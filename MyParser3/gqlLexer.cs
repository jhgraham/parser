//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from gql.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class gqlLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, LOGICAL_OPERATOR=2, RowId=3, TableId=4, Attribute=5, ALL=6, DISTINCT=7, 
		SELECT=8, FROM=9, NUMBER=10, STRING=11, ASTERISK=12, WS=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "LOGICAL_OPERATOR", "RowId", "TableId", "Attribute", "ALL", "DISTINCT", 
		"SELECT", "FROM", "NUMBER", "STRING", "ASTERISK", "WS"
	};


	public gqlLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public gqlLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", null, null, null, null, "'ALL'", "'DISTINCT'", "'SELECT'", 
		"'FROM'", null, null, "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "LOGICAL_OPERATOR", "RowId", "TableId", "Attribute", "ALL", 
		"DISTINCT", "SELECT", "FROM", "NUMBER", "STRING", "ASTERISK", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "gql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static gqlLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xF', 'Y', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '%', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x6', '\v', 
		'G', '\n', '\v', '\r', '\v', '\xE', '\v', 'H', '\x3', '\f', '\x3', '\f', 
		'\x6', '\f', 'M', '\n', '\f', '\r', '\f', '\xE', '\f', 'N', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x6', '\xE', 'T', '\n', '\xE', '\r', '\xE', 
		'\xE', '\xE', 'U', '\x3', '\xE', '\x3', '\xE', '\x2', '\x2', '\xF', '\x3', 
		'\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', 
		'\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', 
		'\xE', '\x1B', '\xF', '\x3', '\x2', '\x5', '\x3', '\x2', '\x32', ';', 
		'\x4', '\x2', '\x43', '\\', '\x63', '|', '\x5', '\x2', '\v', '\f', '\xF', 
		'\xF', '\"', '\"', '\x2', '\\', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x5', '$', '\x3', '\x2', '\x2', '\x2', 
		'\a', '&', '\x3', '\x2', '\x2', '\x2', '\t', '(', '\x3', '\x2', '\x2', 
		'\x2', '\v', '*', '\x3', '\x2', '\x2', '\x2', '\r', ',', '\x3', '\x2', 
		'\x2', '\x2', '\xF', '\x30', '\x3', '\x2', '\x2', '\x2', '\x11', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x13', '@', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x17', 'J', '\x3', '\x2', '\x2', 
		'\x2', '\x19', 'P', '\x3', '\x2', '\x2', '\x2', '\x1B', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x1E', '\a', '.', '\x2', '\x2', '\x1E', '\x4', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '\x63', '\x2', '\x2', ' ', 
		'!', '\a', 'p', '\x2', '\x2', '!', '%', '\a', '\x66', '\x2', '\x2', '\"', 
		'#', '\a', 'q', '\x2', '\x2', '#', '%', '\a', 't', '\x2', '\x2', '$', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', 
		'%', '\x6', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x5', '\x17', '\f', 
		'\x2', '\'', '\b', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x5', '\x17', 
		'\f', '\x2', ')', '\n', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x5', '\x17', 
		'\f', '\x2', '+', '\f', '\x3', '\x2', '\x2', '\x2', ',', '-', '\a', '\x43', 
		'\x2', '\x2', '-', '.', '\a', 'N', '\x2', '\x2', '.', '/', '\a', 'N', 
		'\x2', '\x2', '/', '\xE', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', 
		'\a', '\x46', '\x2', '\x2', '\x31', '\x32', '\a', 'K', '\x2', '\x2', '\x32', 
		'\x33', '\a', 'U', '\x2', '\x2', '\x33', '\x34', '\a', 'V', '\x2', '\x2', 
		'\x34', '\x35', '\a', 'K', '\x2', '\x2', '\x35', '\x36', '\a', 'P', '\x2', 
		'\x2', '\x36', '\x37', '\a', '\x45', '\x2', '\x2', '\x37', '\x38', '\a', 
		'V', '\x2', '\x2', '\x38', '\x10', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\a', 'U', '\x2', '\x2', ':', ';', '\a', 'G', '\x2', '\x2', ';', 
		'<', '\a', 'N', '\x2', '\x2', '<', '=', '\a', 'G', '\x2', '\x2', '=', 
		'>', '\a', '\x45', '\x2', '\x2', '>', '?', '\a', 'V', '\x2', '\x2', '?', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', 'H', '\x2', '\x2', 
		'\x41', '\x42', '\a', 'T', '\x2', '\x2', '\x42', '\x43', '\a', 'Q', '\x2', 
		'\x2', '\x43', '\x44', '\a', 'O', '\x2', '\x2', '\x44', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x45', 'G', '\t', '\x2', '\x2', '\x2', '\x46', '\x45', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', 
		'\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 
		'I', '\x16', '\x3', '\x2', '\x2', '\x2', 'J', 'L', '\t', '\x3', '\x2', 
		'\x2', 'K', 'M', '\t', '\x3', '\x2', '\x2', 'L', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', '\x18', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'Q', '\a', ',', '\x2', '\x2', 'Q', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'T', '\t', '\x4', '\x2', '\x2', 'S', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\b', '\xE', '\x2', '\x2', 'X', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\a', '\x2', '$', 'H', 'N', 'U', '\x3', '\b', '\x2', 
		'\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
