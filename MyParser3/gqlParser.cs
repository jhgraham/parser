//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from gql.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class gqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, LOGICAL_OPERATOR=2, RowId=3, TableId=4, Attribute=5, ALL=6, DISTINCT=7, 
		SELECT=8, FROM=9, NUMBER=10, STRING=11, ASTERISK=12, WS=13;
	public const int
		RULE_selectItem = 0, RULE_querySpecification = 1, RULE_setQuantifier = 2;
	public static readonly string[] ruleNames = {
		"selectItem", "querySpecification", "setQuantifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", null, null, null, null, "'ALL'", "'DISTINCT'", "'SELECT'", 
		"'FROM'", null, null, "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "LOGICAL_OPERATOR", "RowId", "TableId", "Attribute", "ALL", 
		"DISTINCT", "SELECT", "FROM", "NUMBER", "STRING", "ASTERISK", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "gql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static gqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public gqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public gqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SelectItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RowId() { return GetToken(gqlParser.RowId, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(gqlParser.ASTERISK, 0); }
		public SelectItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgqlListener typedListener = listener as IgqlListener;
			if (typedListener != null) typedListener.EnterSelectItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgqlListener typedListener = listener as IgqlListener;
			if (typedListener != null) typedListener.ExitSelectItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgqlVisitor<TResult> typedVisitor = visitor as IgqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectItemContext selectItem() {
		SelectItemContext _localctx = new SelectItemContext(Context, State);
		EnterRule(_localctx, 0, RULE_selectItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6;
			_la = TokenStream.LA(1);
			if ( !(_la==RowId || _la==ASTERISK) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(gqlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemContext[] selectItem() {
			return GetRuleContexts<SelectItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemContext selectItem(int i) {
			return GetRuleContext<SelectItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetQuantifierContext setQuantifier() {
			return GetRuleContext<SetQuantifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(gqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TableId() { return GetTokens(gqlParser.TableId); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TableId(int i) {
			return GetToken(gqlParser.TableId, i);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgqlListener typedListener = listener as IgqlListener;
			if (typedListener != null) typedListener.EnterQuerySpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgqlListener typedListener = listener as IgqlListener;
			if (typedListener != null) typedListener.ExitQuerySpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgqlVisitor<TResult> typedVisitor = visitor as IgqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationContext querySpecification() {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(Context, State);
		EnterRule(_localctx, 2, RULE_querySpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8;
			Match(SELECT);
			State = 10;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 9;
				setQuantifier();
				}
			}

			State = 12;
			selectItem();
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 13;
				Match(T__0);
				State = 14;
				selectItem();
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 20;
				Match(FROM);
				State = 21;
				Match(TableId);
				State = 26;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 22;
					Match(T__0);
					State = 23;
					Match(TableId);
					}
					}
					State = 28;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetQuantifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(gqlParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(gqlParser.ALL, 0); }
		public SetQuantifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setQuantifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgqlListener typedListener = listener as IgqlListener;
			if (typedListener != null) typedListener.EnterSetQuantifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgqlListener typedListener = listener as IgqlListener;
			if (typedListener != null) typedListener.ExitSetQuantifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgqlVisitor<TResult> typedVisitor = visitor as IgqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetQuantifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetQuantifierContext setQuantifier() {
		SetQuantifierContext _localctx = new SetQuantifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_setQuantifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', '$', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\r', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '\x12', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '\x15', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\x1B', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\x1E', '\v', '\x3', '\x5', '\x3', ' ', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x2', '\x2', '\x5', '\x2', '\x4', '\x6', '\x2', 
		'\x4', '\x4', '\x2', '\x5', '\x5', '\xE', '\xE', '\x3', '\x2', '\b', '\t', 
		'\x2', '$', '\x2', '\b', '\x3', '\x2', '\x2', '\x2', '\x4', '\n', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '!', '\x3', '\x2', '\x2', '\x2', '\b', '\t', 
		'\t', '\x2', '\x2', '\x2', '\t', '\x3', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\f', '\a', '\n', '\x2', '\x2', '\v', '\r', '\x5', '\x6', '\x4', '\x2', 
		'\f', '\v', '\x3', '\x2', '\x2', '\x2', '\f', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\r', '\xE', '\x3', '\x2', '\x2', '\x2', '\xE', '\x13', '\x5', 
		'\x2', '\x2', '\x2', '\xF', '\x10', '\a', '\x3', '\x2', '\x2', '\x10', 
		'\x12', '\x5', '\x2', '\x2', '\x2', '\x11', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x15', '\x3', '\x2', '\x2', '\x2', '\x13', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x13', '\x14', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x15', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x17', '\a', '\v', '\x2', '\x2', '\x17', '\x1C', '\a', 
		'\x6', '\x2', '\x2', '\x18', '\x19', '\a', '\x3', '\x2', '\x2', '\x19', 
		'\x1B', '\a', '\x6', '\x2', '\x2', '\x1A', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		' ', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '\x16', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x5', '\x3', '\x2', '\x2', '\x2', '!', '\"', 
		'\t', '\x3', '\x2', '\x2', '\"', '\a', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\f', '\x13', '\x1C', '\x1F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
