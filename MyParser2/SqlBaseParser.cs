//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SqlBase.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class SqlBaseParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		ADD=10, ADMIN=11, ALL=12, ALTER=13, ANALYZE=14, AND=15, ANY=16, ARRAY=17, 
		AS=18, ASC=19, AT=20, BERNOULLI=21, BETWEEN=22, BY=23, CALL=24, CALLED=25, 
		CASCADE=26, CASE=27, CAST=28, CATALOGS=29, COLUMN=30, COLUMNS=31, COMMENT=32, 
		COMMIT=33, COMMITTED=34, CONSTRAINT=35, CREATE=36, CROSS=37, CUBE=38, 
		CURRENT=39, CURRENT_DATE=40, CURRENT_ROLE=41, CURRENT_TIME=42, CURRENT_TIMESTAMP=43, 
		CURRENT_USER=44, DATA=45, DATE=46, DAY=47, DEALLOCATE=48, DEFINER=49, 
		DELETE=50, DESC=51, DESCRIBE=52, DETERMINISTIC=53, DISTINCT=54, DISTRIBUTED=55, 
		DROP=56, ELSE=57, END=58, ESCAPE=59, EXCEPT=60, EXCLUDING=61, EXECUTE=62, 
		EXISTS=63, EXPLAIN=64, EXTRACT=65, EXTERNAL=66, FALSE=67, FILTER=68, FIRST=69, 
		FOLLOWING=70, FOR=71, FORMAT=72, FROM=73, FULL=74, FUNCTION=75, FUNCTIONS=76, 
		GRANT=77, GRANTED=78, GRANTS=79, GRAPHVIZ=80, GROUP=81, GROUPING=82, HAVING=83, 
		HOUR=84, IF=85, IGNORE=86, IN=87, INCLUDING=88, INNER=89, INPUT=90, INSERT=91, 
		INTERSECT=92, INTERVAL=93, INTO=94, INVOKER=95, IO=96, IS=97, ISOLATION=98, 
		JSON=99, JOIN=100, LANGUAGE=101, LAST=102, LATERAL=103, LEFT=104, LEVEL=105, 
		LIKE=106, LIMIT=107, LOCALTIME=108, LOCALTIMESTAMP=109, LOGICAL=110, MAP=111, 
		MATERIALIZED=112, MINUTE=113, MONTH=114, NAME=115, NATURAL=116, NFC=117, 
		NFD=118, NFKC=119, NFKD=120, NO=121, NONE=122, NORMALIZE=123, NOT=124, 
		NULL=125, NULLIF=126, NULLS=127, ON=128, ONLY=129, OPTION=130, OR=131, 
		ORDER=132, ORDINALITY=133, OUTER=134, OUTPUT=135, OVER=136, PARTITION=137, 
		PARTITIONS=138, POSITION=139, PRECEDING=140, PREPARE=141, PRIVILEGES=142, 
		PROPERTIES=143, RANGE=144, READ=145, RECURSIVE=146, RENAME=147, REPEATABLE=148, 
		REPLACE=149, RESET=150, RESPECT=151, RESTRICT=152, RETURN=153, RETURNS=154, 
		REVOKE=155, RIGHT=156, ROLE=157, ROLES=158, ROLLBACK=159, ROLLUP=160, 
		ROW=161, ROWS=162, SCHEMA=163, SCHEMAS=164, SECOND=165, SECURITY=166, 
		SELECT=167, SERIALIZABLE=168, SESSION=169, SET=170, SETS=171, SHOW=172, 
		SOME=173, SQL=174, START=175, STATS=176, SUBSTRING=177, SYSTEM=178, TABLE=179, 
		TABLES=180, TABLESAMPLE=181, TEMPORARY=182, TEXT=183, THEN=184, TIME=185, 
		TIMESTAMP=186, TO=187, TRANSACTION=188, TRUE=189, TRY_CAST=190, TYPE=191, 
		UESCAPE=192, UNBOUNDED=193, UNCOMMITTED=194, UNION=195, UNNEST=196, USE=197, 
		USER=198, USING=199, VALIDATE=200, VALUES=201, VERBOSE=202, VIEW=203, 
		WHEN=204, WHERE=205, WITH=206, WORK=207, WRITE=208, YEAR=209, ZONE=210, 
		EQ=211, NEQ=212, LT=213, LTE=214, GT=215, GTE=216, PLUS=217, MINUS=218, 
		ASTERISK=219, SLASH=220, PERCENT=221, CONCAT=222, STRING=223, UNICODE_STRING=224, 
		BINARY_LITERAL=225, INTEGER_VALUE=226, DECIMAL_VALUE=227, DOUBLE_VALUE=228, 
		IDENTIFIER=229, DIGIT_IDENTIFIER=230, QUOTED_IDENTIFIER=231, BACKQUOTED_IDENTIFIER=232, 
		TIME_WITH_TIME_ZONE=233, TIMESTAMP_WITH_TIME_ZONE=234, DOUBLE_PRECISION=235, 
		SIMPLE_COMMENT=236, BRACKETED_COMMENT=237, WS=238, UNRECOGNIZED=239, DELIMITER=240;
	public const int
		RULE_singleStatement = 0, RULE_standaloneExpression = 1, RULE_standaloneRoutineBody = 2, 
		RULE_statement = 3, RULE_query = 4, RULE_with = 5, RULE_tableElement = 6, 
		RULE_columnDefinition = 7, RULE_likeClause = 8, RULE_properties = 9, RULE_property = 10, 
		RULE_sqlParameterDeclaration = 11, RULE_routineCharacteristics = 12, RULE_routineCharacteristic = 13, 
		RULE_alterRoutineCharacteristics = 14, RULE_alterRoutineCharacteristic = 15, 
		RULE_routineBody = 16, RULE_returnStatement = 17, RULE_externalBodyReference = 18, 
		RULE_language = 19, RULE_determinism = 20, RULE_nullCallClause = 21, RULE_externalRoutineName = 22, 
		RULE_queryNoWith = 23, RULE_queryTerm = 24, RULE_queryPrimary = 25, RULE_sortItem = 26, 
		RULE_querySpecification = 27, RULE_groupBy = 28, RULE_groupingElement = 29, 
		RULE_groupingSet = 30, RULE_namedQuery = 31, RULE_setQuantifier = 32, 
		RULE_selectItem = 33, RULE_relation = 34, RULE_joinType = 35, RULE_joinCriteria = 36, 
		RULE_sampledRelation = 37, RULE_sampleType = 38, RULE_aliasedRelation = 39, 
		RULE_columnAliases = 40, RULE_relationPrimary = 41, RULE_expression = 42, 
		RULE_booleanExpression = 43, RULE_predicate = 44, RULE_valueExpression = 45, 
		RULE_primaryExpression = 46, RULE_string = 47, RULE_nullTreatment = 48, 
		RULE_timeZoneSpecifier = 49, RULE_comparisonOperator = 50, RULE_comparisonQuantifier = 51, 
		RULE_booleanValue = 52, RULE_interval = 53, RULE_intervalField = 54, RULE_normalForm = 55, 
		RULE_types = 56, RULE_type = 57, RULE_typeParameter = 58, RULE_baseType = 59, 
		RULE_whenClause = 60, RULE_filter = 61, RULE_over = 62, RULE_windowFrame = 63, 
		RULE_frameBound = 64, RULE_explainOption = 65, RULE_transactionMode = 66, 
		RULE_levelOfIsolation = 67, RULE_callArgument = 68, RULE_privilege = 69, 
		RULE_qualifiedName = 70, RULE_grantor = 71, RULE_principal = 72, RULE_roles = 73, 
		RULE_identifier = 74, RULE_number = 75, RULE_nonReserved = 76;
	public static readonly string[] ruleNames = {
		"singleStatement", "standaloneExpression", "standaloneRoutineBody", "statement", 
		"query", "with", "tableElement", "columnDefinition", "likeClause", "properties", 
		"property", "sqlParameterDeclaration", "routineCharacteristics", "routineCharacteristic", 
		"alterRoutineCharacteristics", "alterRoutineCharacteristic", "routineBody", 
		"returnStatement", "externalBodyReference", "language", "determinism", 
		"nullCallClause", "externalRoutineName", "queryNoWith", "queryTerm", "queryPrimary", 
		"sortItem", "querySpecification", "groupBy", "groupingElement", "groupingSet", 
		"namedQuery", "setQuantifier", "selectItem", "relation", "joinType", "joinCriteria", 
		"sampledRelation", "sampleType", "aliasedRelation", "columnAliases", "relationPrimary", 
		"expression", "booleanExpression", "predicate", "valueExpression", "primaryExpression", 
		"string", "nullTreatment", "timeZoneSpecifier", "comparisonOperator", 
		"comparisonQuantifier", "booleanValue", "interval", "intervalField", "normalForm", 
		"types", "type", "typeParameter", "baseType", "whenClause", "filter", 
		"over", "windowFrame", "frameBound", "explainOption", "transactionMode", 
		"levelOfIsolation", "callArgument", "privilege", "qualifiedName", "grantor", 
		"principal", "roles", "identifier", "number", "nonReserved"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'('", "')'", "','", "'?'", "'->'", "'['", "']'", "'=>'", 
		"'ADD'", "'ADMIN'", "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", "'ANY'", 
		"'ARRAY'", "'AS'", "'ASC'", "'AT'", "'BERNOULLI'", "'BETWEEN'", "'BY'", 
		"'CALL'", "'CALLED'", "'CASCADE'", "'CASE'", "'CAST'", "'CATALOGS'", "'COLUMN'", 
		"'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMMITTED'", "'CONSTRAINT'", "'CREATE'", 
		"'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_ROLE'", 
		"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DATA'", "'DATE'", 
		"'DAY'", "'DEALLOCATE'", "'DEFINER'", "'DELETE'", "'DESC'", "'DESCRIBE'", 
		"'DETERMINISTIC'", "'DISTINCT'", "'DISTRIBUTED'", "'DROP'", "'ELSE'", 
		"'END'", "'ESCAPE'", "'EXCEPT'", "'EXCLUDING'", "'EXECUTE'", "'EXISTS'", 
		"'EXPLAIN'", "'EXTRACT'", "'EXTERNAL'", "'FALSE'", "'FILTER'", "'FIRST'", 
		"'FOLLOWING'", "'FOR'", "'FORMAT'", "'FROM'", "'FULL'", "'FUNCTION'", 
		"'FUNCTIONS'", "'GRANT'", "'GRANTED'", "'GRANTS'", "'GRAPHVIZ'", "'GROUP'", 
		"'GROUPING'", "'HAVING'", "'HOUR'", "'IF'", "'IGNORE'", "'IN'", "'INCLUDING'", 
		"'INNER'", "'INPUT'", "'INSERT'", "'INTERSECT'", "'INTERVAL'", "'INTO'", 
		"'INVOKER'", "'IO'", "'IS'", "'ISOLATION'", "'JSON'", "'JOIN'", "'LANGUAGE'", 
		"'LAST'", "'LATERAL'", "'LEFT'", "'LEVEL'", "'LIKE'", "'LIMIT'", "'LOCALTIME'", 
		"'LOCALTIMESTAMP'", "'LOGICAL'", "'MAP'", "'MATERIALIZED'", "'MINUTE'", 
		"'MONTH'", "'NAME'", "'NATURAL'", "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", 
		"'NO'", "'NONE'", "'NORMALIZE'", "'NOT'", "'NULL'", "'NULLIF'", "'NULLS'", 
		"'ON'", "'ONLY'", "'OPTION'", "'OR'", "'ORDER'", "'ORDINALITY'", "'OUTER'", 
		"'OUTPUT'", "'OVER'", "'PARTITION'", "'PARTITIONS'", "'POSITION'", "'PRECEDING'", 
		"'PREPARE'", "'PRIVILEGES'", "'PROPERTIES'", "'RANGE'", "'READ'", "'RECURSIVE'", 
		"'RENAME'", "'REPEATABLE'", "'REPLACE'", "'RESET'", "'RESPECT'", "'RESTRICT'", 
		"'RETURN'", "'RETURNS'", "'REVOKE'", "'RIGHT'", "'ROLE'", "'ROLES'", "'ROLLBACK'", 
		"'ROLLUP'", "'ROW'", "'ROWS'", "'SCHEMA'", "'SCHEMAS'", "'SECOND'", "'SECURITY'", 
		"'SELECT'", "'SERIALIZABLE'", "'SESSION'", "'SET'", "'SETS'", "'SHOW'", 
		"'SOME'", "'SQL'", "'START'", "'STATS'", "'SUBSTRING'", "'SYSTEM'", "'TABLE'", 
		"'TABLES'", "'TABLESAMPLE'", "'TEMPORARY'", "'TEXT'", "'THEN'", "'TIME'", 
		"'TIMESTAMP'", "'TO'", "'TRANSACTION'", "'TRUE'", "'TRY_CAST'", "'TYPE'", 
		"'UESCAPE'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNION'", "'UNNEST'", "'USE'", 
		"'USER'", "'USING'", "'VALIDATE'", "'VALUES'", "'VERBOSE'", "'VIEW'", 
		"'WHEN'", "'WHERE'", "'WITH'", "'WORK'", "'WRITE'", "'YEAR'", "'ZONE'", 
		"'='", null, "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "ADD", "ADMIN", 
		"ALL", "ALTER", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "AT", "BERNOULLI", 
		"BETWEEN", "BY", "CALL", "CALLED", "CASCADE", "CASE", "CAST", "CATALOGS", 
		"COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "CONSTRAINT", "CREATE", 
		"CROSS", "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_TIME", 
		"CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", "DATE", "DAY", "DEALLOCATE", 
		"DEFINER", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", "DISTINCT", 
		"DISTRIBUTED", "DROP", "ELSE", "END", "ESCAPE", "EXCEPT", "EXCLUDING", 
		"EXECUTE", "EXISTS", "EXPLAIN", "EXTRACT", "EXTERNAL", "FALSE", "FILTER", 
		"FIRST", "FOLLOWING", "FOR", "FORMAT", "FROM", "FULL", "FUNCTION", "FUNCTIONS", 
		"GRANT", "GRANTED", "GRANTS", "GRAPHVIZ", "GROUP", "GROUPING", "HAVING", 
		"HOUR", "IF", "IGNORE", "IN", "INCLUDING", "INNER", "INPUT", "INSERT", 
		"INTERSECT", "INTERVAL", "INTO", "INVOKER", "IO", "IS", "ISOLATION", "JSON", 
		"JOIN", "LANGUAGE", "LAST", "LATERAL", "LEFT", "LEVEL", "LIKE", "LIMIT", 
		"LOCALTIME", "LOCALTIMESTAMP", "LOGICAL", "MAP", "MATERIALIZED", "MINUTE", 
		"MONTH", "NAME", "NATURAL", "NFC", "NFD", "NFKC", "NFKD", "NO", "NONE", 
		"NORMALIZE", "NOT", "NULL", "NULLIF", "NULLS", "ON", "ONLY", "OPTION", 
		"OR", "ORDER", "ORDINALITY", "OUTER", "OUTPUT", "OVER", "PARTITION", "PARTITIONS", 
		"POSITION", "PRECEDING", "PREPARE", "PRIVILEGES", "PROPERTIES", "RANGE", 
		"READ", "RECURSIVE", "RENAME", "REPEATABLE", "REPLACE", "RESET", "RESPECT", 
		"RESTRICT", "RETURN", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLES", "ROLLBACK", 
		"ROLLUP", "ROW", "ROWS", "SCHEMA", "SCHEMAS", "SECOND", "SECURITY", "SELECT", 
		"SERIALIZABLE", "SESSION", "SET", "SETS", "SHOW", "SOME", "SQL", "START", 
		"STATS", "SUBSTRING", "SYSTEM", "TABLE", "TABLES", "TABLESAMPLE", "TEMPORARY", 
		"TEXT", "THEN", "TIME", "TIMESTAMP", "TO", "TRANSACTION", "TRUE", "TRY_CAST", 
		"TYPE", "UESCAPE", "UNBOUNDED", "UNCOMMITTED", "UNION", "UNNEST", "USE", 
		"USER", "USING", "VALIDATE", "VALUES", "VERBOSE", "VIEW", "WHEN", "WHERE", 
		"WITH", "WORK", "WRITE", "YEAR", "ZONE", "EQ", "NEQ", "LT", "LTE", "GT", 
		"GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", "CONCAT", "STRING", 
		"UNICODE_STRING", "BINARY_LITERAL", "INTEGER_VALUE", "DECIMAL_VALUE", 
		"DOUBLE_VALUE", "IDENTIFIER", "DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", 
		"BACKQUOTED_IDENTIFIER", "TIME_WITH_TIME_ZONE", "TIMESTAMP_WITH_TIME_ZONE", 
		"DOUBLE_PRECISION", "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", "UNRECOGNIZED", 
		"DELIMITER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SqlBase.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SqlBaseParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SqlBaseParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SqlBaseParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SingleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SqlBaseParser.Eof, 0); }
		public SingleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStatementContext singleStatement() {
		SingleStatementContext _localctx = new SingleStatementContext(Context, State);
		EnterRule(_localctx, 0, RULE_singleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			statement();
			State = 155;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandaloneExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SqlBaseParser.Eof, 0); }
		public StandaloneExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standaloneExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandaloneExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandaloneExpressionContext standaloneExpression() {
		StandaloneExpressionContext _localctx = new StandaloneExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_standaloneExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			expression();
			State = 158;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandaloneRoutineBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SqlBaseParser.Eof, 0); }
		public StandaloneRoutineBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standaloneRoutineBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandaloneRoutineBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandaloneRoutineBodyContext standaloneRoutineBody() {
		StandaloneRoutineBodyContext _localctx = new StandaloneRoutineBodyContext(Context, State);
		EnterRule(_localctx, 4, RULE_standaloneRoutineBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			routineBody();
			State = 161;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExplainContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(SqlBaseParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(SqlBaseParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(SqlBaseParser.VERBOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplainOptionContext[] explainOption() {
			return GetRuleContexts<ExplainOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainOptionContext explainOption(int i) {
			return GetRuleContext<ExplainOptionContext>(i);
		}
		public ExplainContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplain(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrepareContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(SqlBaseParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public PrepareContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrepare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DropMaterializedViewContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SqlBaseParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(SqlBaseParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		public DropMaterializedViewContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropMaterializedView(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UseContext : StatementContext {
		public IdentifierContext schema;
		public IdentifierContext catalog;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(SqlBaseParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public UseContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeallocateContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(SqlBaseParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(SqlBaseParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DeallocateContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeallocate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RenameTableContext : StatementContext {
		public QualifiedNameContext from;
		public QualifiedNameContext to;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(SqlBaseParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		public RenameTableContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CommitContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(SqlBaseParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(SqlBaseParser.WORK, 0); }
		public CommitContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateRoleContext : StatementContext {
		public IdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(SqlBaseParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(SqlBaseParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GrantorContext grantor() {
			return GetRuleContext<GrantorContext>(0);
		}
		public CreateRoleContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateRole(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateFunctionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SqlBaseParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypesContext types() {
			return GetRuleContext<TypesContext>(0);
		}
		public ShowCreateFunctionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DropColumnContext : StatementContext {
		public QualifiedNameContext tableName;
		public QualifiedNameContext column;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SqlBaseParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(SqlBaseParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(SqlBaseParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(SqlBaseParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(SqlBaseParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(SqlBaseParser.EXISTS, i);
		}
		public DropColumnContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DropViewContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SqlBaseParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		public DropViewContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropView(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowTablesContext : StatementContext {
		public StringContext pattern;
		public StringContext escape;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(SqlBaseParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(SqlBaseParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(SqlBaseParser.ESCAPE, 0); }
		public ShowTablesContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowTables(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCatalogsContext : StatementContext {
		public StringContext pattern;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOGS() { return GetToken(SqlBaseParser.CATALOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(SqlBaseParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ShowCatalogsContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCatalogs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowRolesContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLES() { return GetToken(SqlBaseParser.ROLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(SqlBaseParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		public ShowRolesContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowRoles(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RenameColumnContext : StatementContext {
		public QualifiedNameContext tableName;
		public IdentifierContext from;
		public IdentifierContext to;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(SqlBaseParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(SqlBaseParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(SqlBaseParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(SqlBaseParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(SqlBaseParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(SqlBaseParser.EXISTS, i);
		}
		public RenameColumnContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RevokeRolesContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(SqlBaseParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolesContext roles() {
			return GetRuleContext<RolesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext[] principal() {
			return GetRuleContexts<PrincipalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext principal(int i) {
			return GetRuleContext<PrincipalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(SqlBaseParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(SqlBaseParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SqlBaseParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTED() { return GetToken(SqlBaseParser.GRANTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SqlBaseParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GrantorContext grantor() {
			return GetRuleContext<GrantorContext>(0);
		}
		public RevokeRolesContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevokeRoles(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateTableContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ShowCreateTableContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowColumnsContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(SqlBaseParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(SqlBaseParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(SqlBaseParser.DESC, 0); }
		public ShowColumnsContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowColumns(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowRoleGrantsContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(SqlBaseParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS() { return GetToken(SqlBaseParser.GRANTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		public ShowRoleGrantsContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowRoleGrants(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddColumnContext : StatementContext {
		public QualifiedNameContext tableName;
		public ColumnDefinitionContext column;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(SqlBaseParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(SqlBaseParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(SqlBaseParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(SqlBaseParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(SqlBaseParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(SqlBaseParser.EXISTS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		public AddColumnContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ResetSessionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(SqlBaseParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(SqlBaseParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ResetSessionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetSession(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InsertIntoContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(SqlBaseParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(SqlBaseParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAliasesContext columnAliases() {
			return GetRuleContext<ColumnAliasesContext>(0);
		}
		public InsertIntoContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertInto(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowSessionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(SqlBaseParser.SESSION, 0); }
		public ShowSessionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSession(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateSchemaContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(SqlBaseParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public CreateSchemaContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateSchema(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExecuteContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(SqlBaseParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(SqlBaseParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExecuteContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RenameSchemaContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(SqlBaseParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(SqlBaseParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RenameSchemaContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameSchema(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DropRoleContext : StatementContext {
		public IdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SqlBaseParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(SqlBaseParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DropRoleContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropRole(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnalyzeContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(SqlBaseParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public AnalyzeContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalyze(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetRoleContext : StatementContext {
		public IdentifierContext role;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SqlBaseParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(SqlBaseParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SqlBaseParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(SqlBaseParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SetRoleContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetRole(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateFunctionContext : StatementContext {
		public QualifiedNameContext functionName;
		public TypeContext returnType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SqlBaseParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(SqlBaseParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCharacteristicsContext routineCharacteristics() {
			return GetRuleContext<RoutineCharacteristicsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SqlBaseParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(SqlBaseParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(SqlBaseParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SqlParameterDeclarationContext[] sqlParameterDeclaration() {
			return GetRuleContexts<SqlParameterDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlParameterDeclarationContext sqlParameterDeclaration(int i) {
			return GetRuleContext<SqlParameterDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(SqlBaseParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public CreateFunctionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowGrantsContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS() { return GetToken(SqlBaseParser.GRANTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlBaseParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		public ShowGrantsContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowGrants(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DropSchemaContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SqlBaseParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(SqlBaseParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(SqlBaseParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(SqlBaseParser.RESTRICT, 0); }
		public DropSchemaContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropSchema(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateViewContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ShowCreateViewContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateView(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateTableContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableElementContext[] tableElement() {
			return GetRuleContexts<TableElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableElementContext tableElement(int i) {
			return GetRuleContext<TableElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(SqlBaseParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public CreateTableContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StartTransactionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(SqlBaseParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(SqlBaseParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionModeContext[] transactionMode() {
			return GetRuleContexts<TransactionModeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionModeContext transactionMode(int i) {
			return GetRuleContext<TransactionModeContext>(i);
		}
		public StartTransactionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateTableAsSelectContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAliasesContext columnAliases() {
			return GetRuleContext<ColumnAliasesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(SqlBaseParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(SqlBaseParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(SqlBaseParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(SqlBaseParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(SqlBaseParser.NO, 0); }
		public CreateTableAsSelectContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTableAsSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowStatsContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS() { return GetToken(SqlBaseParser.STATS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SqlBaseParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ShowStatsContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowStats(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DropFunctionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SqlBaseParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SqlBaseParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(SqlBaseParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypesContext types() {
			return GetRuleContext<TypesContext>(0);
		}
		public DropFunctionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RevokeContext : StatementContext {
		public PrincipalContext grantee;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(SqlBaseParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlBaseParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext principal() {
			return GetRuleContext<PrincipalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext[] privilege() {
			return GetRuleContexts<PrivilegeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext privilege(int i) {
			return GetRuleContext<PrivilegeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SqlBaseParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(SqlBaseParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(SqlBaseParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(SqlBaseParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SqlBaseParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		public RevokeContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(SqlBaseParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SqlBaseParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public DeleteContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DescribeInputContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(SqlBaseParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(SqlBaseParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DescribeInputContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeInput(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowStatsForQueryContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS() { return GetToken(SqlBaseParser.STATS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SqlBaseParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		public ShowStatsForQueryContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowStatsForQuery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementDefaultContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public StatementDefaultContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateMaterializedViewContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(SqlBaseParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(SqlBaseParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public CreateMaterializedViewContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateMaterializedView(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterFunctionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SqlBaseParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SqlBaseParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterRoutineCharacteristicsContext alterRoutineCharacteristics() {
			return GetRuleContext<AlterRoutineCharacteristicsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypesContext types() {
			return GetRuleContext<TypesContext>(0);
		}
		public AlterFunctionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetSessionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SqlBaseParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(SqlBaseParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(SqlBaseParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SetSessionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetSession(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateViewContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SqlBaseParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(SqlBaseParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(SqlBaseParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(SqlBaseParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(SqlBaseParser.INVOKER, 0); }
		public CreateViewContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateView(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowSchemasContext : StatementContext {
		public StringContext pattern;
		public StringContext escape;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(SqlBaseParser.SCHEMAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(SqlBaseParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(SqlBaseParser.ESCAPE, 0); }
		public ShowSchemasContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSchemas(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DropTableContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SqlBaseParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		public DropTableContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RollbackContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(SqlBaseParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(SqlBaseParser.WORK, 0); }
		public RollbackContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollback(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GrantRolesContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(SqlBaseParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolesContext roles() {
			return GetRuleContext<RolesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext[] principal() {
			return GetRuleContexts<PrincipalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext principal(int i) {
			return GetRuleContext<PrincipalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(SqlBaseParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(SqlBaseParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTED() { return GetToken(SqlBaseParser.GRANTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SqlBaseParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GrantorContext grantor() {
			return GetRuleContext<GrantorContext>(0);
		}
		public GrantRolesContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantRoles(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(SqlBaseParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallArgumentContext[] callArgument() {
			return GetRuleContexts<CallArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallArgumentContext callArgument(int i) {
			return GetRuleContext<CallArgumentContext>(i);
		}
		public CallContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateMaterializedViewContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlBaseParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(SqlBaseParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ShowCreateMaterializedViewContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateMaterializedView(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowFunctionsContext : StatementContext {
		public StringContext pattern;
		public StringContext escape;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS() { return GetToken(SqlBaseParser.FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(SqlBaseParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(SqlBaseParser.ESCAPE, 0); }
		public ShowFunctionsContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DescribeOutputContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(SqlBaseParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(SqlBaseParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DescribeOutputContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeOutput(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GrantContext : StatementContext {
		public PrincipalContext grantee;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT() { return GetTokens(SqlBaseParser.GRANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT(int i) {
			return GetToken(SqlBaseParser.GRANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlBaseParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext principal() {
			return GetRuleContext<PrincipalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext[] privilege() {
			return GetRuleContexts<PrivilegeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext privilege(int i) {
			return GetRuleContext<PrivilegeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SqlBaseParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(SqlBaseParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(SqlBaseParser.OPTION, 0); }
		public GrantContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		int _la;
		try {
			State = 766;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				_localctx = new StatementDefaultContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				query();
				}
				break;
			case 2:
				_localctx = new UseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 164;
				Match(USE);
				State = 165;
				((UseContext)_localctx).schema = identifier();
				}
				break;
			case 3:
				_localctx = new UseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 166;
				Match(USE);
				State = 167;
				((UseContext)_localctx).catalog = identifier();
				State = 168;
				Match(T__0);
				State = 169;
				((UseContext)_localctx).schema = identifier();
				}
				break;
			case 4:
				_localctx = new CreateSchemaContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 171;
				Match(CREATE);
				State = 172;
				Match(SCHEMA);
				State = 176;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 173;
					Match(IF);
					State = 174;
					Match(NOT);
					State = 175;
					Match(EXISTS);
					}
					break;
				}
				State = 178;
				qualifiedName();
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 179;
					Match(WITH);
					State = 180;
					properties();
					}
				}

				}
				break;
			case 5:
				_localctx = new DropSchemaContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 183;
				Match(DROP);
				State = 184;
				Match(SCHEMA);
				State = 187;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 185;
					Match(IF);
					State = 186;
					Match(EXISTS);
					}
					break;
				}
				State = 189;
				qualifiedName();
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 190;
					_la = TokenStream.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case 6:
				_localctx = new RenameSchemaContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 193;
				Match(ALTER);
				State = 194;
				Match(SCHEMA);
				State = 195;
				qualifiedName();
				State = 196;
				Match(RENAME);
				State = 197;
				Match(TO);
				State = 198;
				identifier();
				}
				break;
			case 7:
				_localctx = new CreateTableAsSelectContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 200;
				Match(CREATE);
				State = 201;
				Match(TABLE);
				State = 205;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 202;
					Match(IF);
					State = 203;
					Match(NOT);
					State = 204;
					Match(EXISTS);
					}
					break;
				}
				State = 207;
				qualifiedName();
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 208;
					columnAliases();
					}
				}

				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 211;
					Match(COMMENT);
					State = 212;
					@string();
					}
				}

				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 215;
					Match(WITH);
					State = 216;
					properties();
					}
				}

				State = 219;
				Match(AS);
				State = 225;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 220;
					query();
					}
					break;
				case 2:
					{
					State = 221;
					Match(T__1);
					State = 222;
					query();
					State = 223;
					Match(T__2);
					}
					break;
				}
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 227;
					Match(WITH);
					State = 229;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO) {
						{
						State = 228;
						Match(NO);
						}
					}

					State = 231;
					Match(DATA);
					}
				}

				}
				break;
			case 8:
				_localctx = new CreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 234;
				Match(CREATE);
				State = 235;
				Match(TABLE);
				State = 239;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 236;
					Match(IF);
					State = 237;
					Match(NOT);
					State = 238;
					Match(EXISTS);
					}
					break;
				}
				State = 241;
				qualifiedName();
				State = 242;
				Match(T__1);
				State = 243;
				tableElement();
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 244;
					Match(T__3);
					State = 245;
					tableElement();
					}
					}
					State = 250;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 251;
				Match(T__2);
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 252;
					Match(COMMENT);
					State = 253;
					@string();
					}
				}

				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 256;
					Match(WITH);
					State = 257;
					properties();
					}
				}

				}
				break;
			case 9:
				_localctx = new DropTableContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 260;
				Match(DROP);
				State = 261;
				Match(TABLE);
				State = 264;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 262;
					Match(IF);
					State = 263;
					Match(EXISTS);
					}
					break;
				}
				State = 266;
				qualifiedName();
				}
				break;
			case 10:
				_localctx = new InsertIntoContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 267;
				Match(INSERT);
				State = 268;
				Match(INTO);
				State = 269;
				qualifiedName();
				State = 271;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 270;
					columnAliases();
					}
					break;
				}
				State = 273;
				query();
				}
				break;
			case 11:
				_localctx = new DeleteContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 275;
				Match(DELETE);
				State = 276;
				Match(FROM);
				State = 277;
				qualifiedName();
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 278;
					Match(WHERE);
					State = 279;
					booleanExpression(0);
					}
				}

				}
				break;
			case 12:
				_localctx = new RenameTableContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 282;
				Match(ALTER);
				State = 283;
				Match(TABLE);
				State = 286;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 284;
					Match(IF);
					State = 285;
					Match(EXISTS);
					}
					break;
				}
				State = 288;
				((RenameTableContext)_localctx).from = qualifiedName();
				State = 289;
				Match(RENAME);
				State = 290;
				Match(TO);
				State = 291;
				((RenameTableContext)_localctx).to = qualifiedName();
				}
				break;
			case 13:
				_localctx = new RenameColumnContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 293;
				Match(ALTER);
				State = 294;
				Match(TABLE);
				State = 297;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 295;
					Match(IF);
					State = 296;
					Match(EXISTS);
					}
					break;
				}
				State = 299;
				((RenameColumnContext)_localctx).tableName = qualifiedName();
				State = 300;
				Match(RENAME);
				State = 301;
				Match(COLUMN);
				State = 304;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 302;
					Match(IF);
					State = 303;
					Match(EXISTS);
					}
					break;
				}
				State = 306;
				((RenameColumnContext)_localctx).from = identifier();
				State = 307;
				Match(TO);
				State = 308;
				((RenameColumnContext)_localctx).to = identifier();
				}
				break;
			case 14:
				_localctx = new DropColumnContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 310;
				Match(ALTER);
				State = 311;
				Match(TABLE);
				State = 314;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 312;
					Match(IF);
					State = 313;
					Match(EXISTS);
					}
					break;
				}
				State = 316;
				((DropColumnContext)_localctx).tableName = qualifiedName();
				State = 317;
				Match(DROP);
				State = 318;
				Match(COLUMN);
				State = 321;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 319;
					Match(IF);
					State = 320;
					Match(EXISTS);
					}
					break;
				}
				State = 323;
				((DropColumnContext)_localctx).column = qualifiedName();
				}
				break;
			case 15:
				_localctx = new AddColumnContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 325;
				Match(ALTER);
				State = 326;
				Match(TABLE);
				State = 329;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 327;
					Match(IF);
					State = 328;
					Match(EXISTS);
					}
					break;
				}
				State = 331;
				((AddColumnContext)_localctx).tableName = qualifiedName();
				State = 332;
				Match(ADD);
				State = 333;
				Match(COLUMN);
				State = 337;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 334;
					Match(IF);
					State = 335;
					Match(NOT);
					State = 336;
					Match(EXISTS);
					}
					break;
				}
				State = 339;
				((AddColumnContext)_localctx).column = columnDefinition();
				}
				break;
			case 16:
				_localctx = new AnalyzeContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 341;
				Match(ANALYZE);
				State = 342;
				qualifiedName();
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 343;
					Match(WITH);
					State = 344;
					properties();
					}
				}

				}
				break;
			case 17:
				_localctx = new CreateViewContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 347;
				Match(CREATE);
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 348;
					Match(OR);
					State = 349;
					Match(REPLACE);
					}
				}

				State = 352;
				Match(VIEW);
				State = 353;
				qualifiedName();
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SECURITY) {
					{
					State = 354;
					Match(SECURITY);
					State = 355;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFINER || _la==INVOKER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 358;
				Match(AS);
				State = 359;
				query();
				}
				break;
			case 18:
				_localctx = new DropViewContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 361;
				Match(DROP);
				State = 362;
				Match(VIEW);
				State = 365;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 363;
					Match(IF);
					State = 364;
					Match(EXISTS);
					}
					break;
				}
				State = 367;
				qualifiedName();
				}
				break;
			case 19:
				_localctx = new CreateMaterializedViewContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 368;
				Match(CREATE);
				State = 369;
				Match(MATERIALIZED);
				State = 370;
				Match(VIEW);
				State = 374;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 371;
					Match(IF);
					State = 372;
					Match(NOT);
					State = 373;
					Match(EXISTS);
					}
					break;
				}
				State = 376;
				qualifiedName();
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 377;
					Match(COMMENT);
					State = 378;
					@string();
					}
				}

				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 381;
					Match(WITH);
					State = 382;
					properties();
					}
				}

				State = 385;
				Match(AS);
				State = 391;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 386;
					query();
					}
					break;
				case 2:
					{
					State = 387;
					Match(T__1);
					State = 388;
					query();
					State = 389;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 20:
				_localctx = new DropMaterializedViewContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 393;
				Match(DROP);
				State = 394;
				Match(MATERIALIZED);
				State = 395;
				Match(VIEW);
				State = 398;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 396;
					Match(IF);
					State = 397;
					Match(EXISTS);
					}
					break;
				}
				State = 400;
				qualifiedName();
				}
				break;
			case 21:
				_localctx = new CreateFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 401;
				Match(CREATE);
				State = 404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 402;
					Match(OR);
					State = 403;
					Match(REPLACE);
					}
				}

				State = 407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 406;
					Match(TEMPORARY);
					}
				}

				State = 409;
				Match(FUNCTION);
				State = 410;
				((CreateFunctionContext)_localctx).functionName = qualifiedName();
				State = 411;
				Match(T__1);
				State = 420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ADMIN) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << BERNOULLI) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CURRENT) | (1L << CURRENT_ROLE) | (1L << DATA) | (1L << DATE) | (1L << DAY) | (1L << DEFINER) | (1L << DESC) | (1L << DETERMINISTIC) | (1L << DISTRIBUTED) | (1L << EXCLUDING))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXPLAIN - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)) | (1L << (JSON - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LAST - 64)) | (1L << (LATERAL - 64)) | (1L << (LEVEL - 64)) | (1L << (LIMIT - 64)) | (1L << (LOGICAL - 64)) | (1L << (MAP - 64)) | (1L << (MATERIALIZED - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (NAME - 64)) | (1L << (NFC - 64)) | (1L << (NFD - 64)) | (1L << (NFKC - 64)) | (1L << (NFKD - 64)) | (1L << (NO - 64)) | (1L << (NONE - 64)) | (1L << (NULLIF - 64)) | (1L << (NULLS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (ONLY - 129)) | (1L << (OPTION - 129)) | (1L << (ORDINALITY - 129)) | (1L << (OUTPUT - 129)) | (1L << (OVER - 129)) | (1L << (PARTITION - 129)) | (1L << (PARTITIONS - 129)) | (1L << (POSITION - 129)) | (1L << (PRECEDING - 129)) | (1L << (PRIVILEGES - 129)) | (1L << (PROPERTIES - 129)) | (1L << (RANGE - 129)) | (1L << (READ - 129)) | (1L << (RENAME - 129)) | (1L << (REPEATABLE - 129)) | (1L << (REPLACE - 129)) | (1L << (RESET - 129)) | (1L << (RESPECT - 129)) | (1L << (RESTRICT - 129)) | (1L << (RETURN - 129)) | (1L << (RETURNS - 129)) | (1L << (REVOKE - 129)) | (1L << (ROLE - 129)) | (1L << (ROLES - 129)) | (1L << (ROLLBACK - 129)) | (1L << (ROW - 129)) | (1L << (ROWS - 129)) | (1L << (SCHEMA - 129)) | (1L << (SCHEMAS - 129)) | (1L << (SECOND - 129)) | (1L << (SECURITY - 129)) | (1L << (SERIALIZABLE - 129)) | (1L << (SESSION - 129)) | (1L << (SET - 129)) | (1L << (SETS - 129)) | (1L << (SHOW - 129)) | (1L << (SOME - 129)) | (1L << (SQL - 129)) | (1L << (START - 129)) | (1L << (STATS - 129)) | (1L << (SUBSTRING - 129)) | (1L << (SYSTEM - 129)) | (1L << (TABLES - 129)) | (1L << (TABLESAMPLE - 129)) | (1L << (TEMPORARY - 129)) | (1L << (TEXT - 129)) | (1L << (TIME - 129)) | (1L << (TIMESTAMP - 129)) | (1L << (TO - 129)) | (1L << (TRANSACTION - 129)) | (1L << (TRY_CAST - 129)) | (1L << (TYPE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNBOUNDED - 193)) | (1L << (UNCOMMITTED - 193)) | (1L << (USE - 193)) | (1L << (USER - 193)) | (1L << (VALIDATE - 193)) | (1L << (VERBOSE - 193)) | (1L << (VIEW - 193)) | (1L << (WORK - 193)) | (1L << (WRITE - 193)) | (1L << (YEAR - 193)) | (1L << (ZONE - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (DIGIT_IDENTIFIER - 193)) | (1L << (QUOTED_IDENTIFIER - 193)) | (1L << (BACKQUOTED_IDENTIFIER - 193)))) != 0)) {
					{
					State = 412;
					sqlParameterDeclaration();
					State = 417;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 413;
						Match(T__3);
						State = 414;
						sqlParameterDeclaration();
						}
						}
						State = 419;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 422;
				Match(T__2);
				State = 423;
				Match(RETURNS);
				State = 424;
				((CreateFunctionContext)_localctx).returnType = type(0);
				State = 427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 425;
					Match(COMMENT);
					State = 426;
					@string();
					}
				}

				State = 429;
				routineCharacteristics();
				State = 430;
				routineBody();
				}
				break;
			case 22:
				_localctx = new AlterFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 432;
				Match(ALTER);
				State = 433;
				Match(FUNCTION);
				State = 434;
				qualifiedName();
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 435;
					types();
					}
				}

				State = 438;
				alterRoutineCharacteristics();
				}
				break;
			case 23:
				_localctx = new DropFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 440;
				Match(DROP);
				State = 442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 441;
					Match(TEMPORARY);
					}
				}

				State = 444;
				Match(FUNCTION);
				State = 447;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 445;
					Match(IF);
					State = 446;
					Match(EXISTS);
					}
					break;
				}
				State = 449;
				qualifiedName();
				State = 451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 450;
					types();
					}
				}

				}
				break;
			case 24:
				_localctx = new CallContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 453;
				Match(CALL);
				State = 454;
				qualifiedName();
				State = 455;
				Match(T__1);
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << ADD) | (1L << ADMIN) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << BERNOULLI) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CURRENT) | (1L << CURRENT_DATE) | (1L << CURRENT_ROLE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA) | (1L << DATE) | (1L << DAY) | (1L << DEFINER) | (1L << DESC) | (1L << DETERMINISTIC) | (1L << DISTRIBUTED) | (1L << EXCLUDING) | (1L << EXISTS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXPLAIN - 64)) | (1L << (EXTRACT - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FALSE - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPING - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)) | (1L << (JSON - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LAST - 64)) | (1L << (LATERAL - 64)) | (1L << (LEVEL - 64)) | (1L << (LIMIT - 64)) | (1L << (LOCALTIME - 64)) | (1L << (LOCALTIMESTAMP - 64)) | (1L << (LOGICAL - 64)) | (1L << (MAP - 64)) | (1L << (MATERIALIZED - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (NAME - 64)) | (1L << (NFC - 64)) | (1L << (NFD - 64)) | (1L << (NFKC - 64)) | (1L << (NFKD - 64)) | (1L << (NO - 64)) | (1L << (NONE - 64)) | (1L << (NORMALIZE - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (NULLIF - 64)) | (1L << (NULLS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (ONLY - 129)) | (1L << (OPTION - 129)) | (1L << (ORDINALITY - 129)) | (1L << (OUTPUT - 129)) | (1L << (OVER - 129)) | (1L << (PARTITION - 129)) | (1L << (PARTITIONS - 129)) | (1L << (POSITION - 129)) | (1L << (PRECEDING - 129)) | (1L << (PRIVILEGES - 129)) | (1L << (PROPERTIES - 129)) | (1L << (RANGE - 129)) | (1L << (READ - 129)) | (1L << (RENAME - 129)) | (1L << (REPEATABLE - 129)) | (1L << (REPLACE - 129)) | (1L << (RESET - 129)) | (1L << (RESPECT - 129)) | (1L << (RESTRICT - 129)) | (1L << (RETURN - 129)) | (1L << (RETURNS - 129)) | (1L << (REVOKE - 129)) | (1L << (ROLE - 129)) | (1L << (ROLES - 129)) | (1L << (ROLLBACK - 129)) | (1L << (ROW - 129)) | (1L << (ROWS - 129)) | (1L << (SCHEMA - 129)) | (1L << (SCHEMAS - 129)) | (1L << (SECOND - 129)) | (1L << (SECURITY - 129)) | (1L << (SERIALIZABLE - 129)) | (1L << (SESSION - 129)) | (1L << (SET - 129)) | (1L << (SETS - 129)) | (1L << (SHOW - 129)) | (1L << (SOME - 129)) | (1L << (SQL - 129)) | (1L << (START - 129)) | (1L << (STATS - 129)) | (1L << (SUBSTRING - 129)) | (1L << (SYSTEM - 129)) | (1L << (TABLES - 129)) | (1L << (TABLESAMPLE - 129)) | (1L << (TEMPORARY - 129)) | (1L << (TEXT - 129)) | (1L << (TIME - 129)) | (1L << (TIMESTAMP - 129)) | (1L << (TO - 129)) | (1L << (TRANSACTION - 129)) | (1L << (TRUE - 129)) | (1L << (TRY_CAST - 129)) | (1L << (TYPE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNBOUNDED - 193)) | (1L << (UNCOMMITTED - 193)) | (1L << (USE - 193)) | (1L << (USER - 193)) | (1L << (VALIDATE - 193)) | (1L << (VERBOSE - 193)) | (1L << (VIEW - 193)) | (1L << (WORK - 193)) | (1L << (WRITE - 193)) | (1L << (YEAR - 193)) | (1L << (ZONE - 193)) | (1L << (PLUS - 193)) | (1L << (MINUS - 193)) | (1L << (STRING - 193)) | (1L << (UNICODE_STRING - 193)) | (1L << (BINARY_LITERAL - 193)) | (1L << (INTEGER_VALUE - 193)) | (1L << (DECIMAL_VALUE - 193)) | (1L << (DOUBLE_VALUE - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (DIGIT_IDENTIFIER - 193)) | (1L << (QUOTED_IDENTIFIER - 193)) | (1L << (BACKQUOTED_IDENTIFIER - 193)) | (1L << (DOUBLE_PRECISION - 193)))) != 0)) {
					{
					State = 456;
					callArgument();
					State = 461;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 457;
						Match(T__3);
						State = 458;
						callArgument();
						}
						}
						State = 463;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 466;
				Match(T__2);
				}
				break;
			case 25:
				_localctx = new CreateRoleContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 468;
				Match(CREATE);
				State = 469;
				Match(ROLE);
				State = 470;
				((CreateRoleContext)_localctx).name = identifier();
				State = 474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 471;
					Match(WITH);
					State = 472;
					Match(ADMIN);
					State = 473;
					grantor();
					}
				}

				}
				break;
			case 26:
				_localctx = new DropRoleContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 476;
				Match(DROP);
				State = 477;
				Match(ROLE);
				State = 478;
				((DropRoleContext)_localctx).name = identifier();
				}
				break;
			case 27:
				_localctx = new GrantRolesContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 479;
				Match(GRANT);
				State = 480;
				roles();
				State = 481;
				Match(TO);
				State = 482;
				principal();
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 483;
					Match(T__3);
					State = 484;
					principal();
					}
					}
					State = 489;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 490;
					Match(WITH);
					State = 491;
					Match(ADMIN);
					State = 492;
					Match(OPTION);
					}
				}

				State = 498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GRANTED) {
					{
					State = 495;
					Match(GRANTED);
					State = 496;
					Match(BY);
					State = 497;
					grantor();
					}
				}

				}
				break;
			case 28:
				_localctx = new RevokeRolesContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 500;
				Match(REVOKE);
				State = 504;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 501;
					Match(ADMIN);
					State = 502;
					Match(OPTION);
					State = 503;
					Match(FOR);
					}
					break;
				}
				State = 506;
				roles();
				State = 507;
				Match(FROM);
				State = 508;
				principal();
				State = 513;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 509;
					Match(T__3);
					State = 510;
					principal();
					}
					}
					State = 515;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GRANTED) {
					{
					State = 516;
					Match(GRANTED);
					State = 517;
					Match(BY);
					State = 518;
					grantor();
					}
				}

				}
				break;
			case 29:
				_localctx = new SetRoleContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 521;
				Match(SET);
				State = 522;
				Match(ROLE);
				State = 526;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 523;
					Match(ALL);
					}
					break;
				case 2:
					{
					State = 524;
					Match(NONE);
					}
					break;
				case 3:
					{
					State = 525;
					((SetRoleContext)_localctx).role = identifier();
					}
					break;
				}
				}
				break;
			case 30:
				_localctx = new GrantContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 528;
				Match(GRANT);
				State = 539;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 529;
					privilege();
					State = 534;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 530;
						Match(T__3);
						State = 531;
						privilege();
						}
						}
						State = 536;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case 2:
					{
					State = 537;
					Match(ALL);
					State = 538;
					Match(PRIVILEGES);
					}
					break;
				}
				State = 541;
				Match(ON);
				State = 543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLE) {
					{
					State = 542;
					Match(TABLE);
					}
				}

				State = 545;
				qualifiedName();
				State = 546;
				Match(TO);
				State = 547;
				((GrantContext)_localctx).grantee = principal();
				State = 551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 548;
					Match(WITH);
					State = 549;
					Match(GRANT);
					State = 550;
					Match(OPTION);
					}
				}

				}
				break;
			case 31:
				_localctx = new RevokeContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 553;
				Match(REVOKE);
				State = 557;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 554;
					Match(GRANT);
					State = 555;
					Match(OPTION);
					State = 556;
					Match(FOR);
					}
					break;
				}
				State = 569;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
				case 1:
					{
					State = 559;
					privilege();
					State = 564;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 560;
						Match(T__3);
						State = 561;
						privilege();
						}
						}
						State = 566;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case 2:
					{
					State = 567;
					Match(ALL);
					State = 568;
					Match(PRIVILEGES);
					}
					break;
				}
				State = 571;
				Match(ON);
				State = 573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLE) {
					{
					State = 572;
					Match(TABLE);
					}
				}

				State = 575;
				qualifiedName();
				State = 576;
				Match(FROM);
				State = 577;
				((RevokeContext)_localctx).grantee = principal();
				}
				break;
			case 32:
				_localctx = new ShowGrantsContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 579;
				Match(SHOW);
				State = 580;
				Match(GRANTS);
				State = 586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 581;
					Match(ON);
					State = 583;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==TABLE) {
						{
						State = 582;
						Match(TABLE);
						}
					}

					State = 585;
					qualifiedName();
					}
				}

				}
				break;
			case 33:
				_localctx = new ExplainContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 588;
				Match(EXPLAIN);
				State = 590;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 589;
					Match(ANALYZE);
					}
					break;
				}
				State = 593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VERBOSE) {
					{
					State = 592;
					Match(VERBOSE);
					}
				}

				State = 606;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
				case 1:
					{
					State = 595;
					Match(T__1);
					State = 596;
					explainOption();
					State = 601;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 597;
						Match(T__3);
						State = 598;
						explainOption();
						}
						}
						State = 603;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 604;
					Match(T__2);
					}
					break;
				}
				State = 608;
				statement();
				}
				break;
			case 34:
				_localctx = new ShowCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 609;
				Match(SHOW);
				State = 610;
				Match(CREATE);
				State = 611;
				Match(TABLE);
				State = 612;
				qualifiedName();
				}
				break;
			case 35:
				_localctx = new ShowCreateViewContext(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 613;
				Match(SHOW);
				State = 614;
				Match(CREATE);
				State = 615;
				Match(VIEW);
				State = 616;
				qualifiedName();
				}
				break;
			case 36:
				_localctx = new ShowCreateMaterializedViewContext(_localctx);
				EnterOuterAlt(_localctx, 36);
				{
				State = 617;
				Match(SHOW);
				State = 618;
				Match(CREATE);
				State = 619;
				Match(MATERIALIZED);
				State = 620;
				Match(VIEW);
				State = 621;
				qualifiedName();
				}
				break;
			case 37:
				_localctx = new ShowCreateFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 37);
				{
				State = 622;
				Match(SHOW);
				State = 623;
				Match(CREATE);
				State = 624;
				Match(FUNCTION);
				State = 625;
				qualifiedName();
				State = 627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 626;
					types();
					}
				}

				}
				break;
			case 38:
				_localctx = new ShowTablesContext(_localctx);
				EnterOuterAlt(_localctx, 38);
				{
				State = 629;
				Match(SHOW);
				State = 630;
				Match(TABLES);
				State = 633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 631;
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 632;
					qualifiedName();
					}
				}

				State = 641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE) {
					{
					State = 635;
					Match(LIKE);
					State = 636;
					((ShowTablesContext)_localctx).pattern = @string();
					State = 639;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ESCAPE) {
						{
						State = 637;
						Match(ESCAPE);
						State = 638;
						((ShowTablesContext)_localctx).escape = @string();
						}
					}

					}
				}

				}
				break;
			case 39:
				_localctx = new ShowSchemasContext(_localctx);
				EnterOuterAlt(_localctx, 39);
				{
				State = 643;
				Match(SHOW);
				State = 644;
				Match(SCHEMAS);
				State = 647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 645;
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 646;
					identifier();
					}
				}

				State = 655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE) {
					{
					State = 649;
					Match(LIKE);
					State = 650;
					((ShowSchemasContext)_localctx).pattern = @string();
					State = 653;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ESCAPE) {
						{
						State = 651;
						Match(ESCAPE);
						State = 652;
						((ShowSchemasContext)_localctx).escape = @string();
						}
					}

					}
				}

				}
				break;
			case 40:
				_localctx = new ShowCatalogsContext(_localctx);
				EnterOuterAlt(_localctx, 40);
				{
				State = 657;
				Match(SHOW);
				State = 658;
				Match(CATALOGS);
				State = 661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE) {
					{
					State = 659;
					Match(LIKE);
					State = 660;
					((ShowCatalogsContext)_localctx).pattern = @string();
					}
				}

				}
				break;
			case 41:
				_localctx = new ShowColumnsContext(_localctx);
				EnterOuterAlt(_localctx, 41);
				{
				State = 663;
				Match(SHOW);
				State = 664;
				Match(COLUMNS);
				State = 665;
				_la = TokenStream.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 666;
				qualifiedName();
				}
				break;
			case 42:
				_localctx = new ShowStatsContext(_localctx);
				EnterOuterAlt(_localctx, 42);
				{
				State = 667;
				Match(SHOW);
				State = 668;
				Match(STATS);
				State = 669;
				Match(FOR);
				State = 670;
				qualifiedName();
				}
				break;
			case 43:
				_localctx = new ShowStatsForQueryContext(_localctx);
				EnterOuterAlt(_localctx, 43);
				{
				State = 671;
				Match(SHOW);
				State = 672;
				Match(STATS);
				State = 673;
				Match(FOR);
				State = 674;
				Match(T__1);
				State = 675;
				querySpecification();
				State = 676;
				Match(T__2);
				}
				break;
			case 44:
				_localctx = new ShowRolesContext(_localctx);
				EnterOuterAlt(_localctx, 44);
				{
				State = 678;
				Match(SHOW);
				State = 680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CURRENT) {
					{
					State = 679;
					Match(CURRENT);
					}
				}

				State = 682;
				Match(ROLES);
				State = 685;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 683;
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 684;
					identifier();
					}
				}

				}
				break;
			case 45:
				_localctx = new ShowRoleGrantsContext(_localctx);
				EnterOuterAlt(_localctx, 45);
				{
				State = 687;
				Match(SHOW);
				State = 688;
				Match(ROLE);
				State = 689;
				Match(GRANTS);
				State = 692;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 690;
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 691;
					identifier();
					}
				}

				}
				break;
			case 46:
				_localctx = new ShowColumnsContext(_localctx);
				EnterOuterAlt(_localctx, 46);
				{
				State = 694;
				Match(DESCRIBE);
				State = 695;
				qualifiedName();
				}
				break;
			case 47:
				_localctx = new ShowColumnsContext(_localctx);
				EnterOuterAlt(_localctx, 47);
				{
				State = 696;
				Match(DESC);
				State = 697;
				qualifiedName();
				}
				break;
			case 48:
				_localctx = new ShowFunctionsContext(_localctx);
				EnterOuterAlt(_localctx, 48);
				{
				State = 698;
				Match(SHOW);
				State = 699;
				Match(FUNCTIONS);
				State = 706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE) {
					{
					State = 700;
					Match(LIKE);
					State = 701;
					((ShowFunctionsContext)_localctx).pattern = @string();
					State = 704;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ESCAPE) {
						{
						State = 702;
						Match(ESCAPE);
						State = 703;
						((ShowFunctionsContext)_localctx).escape = @string();
						}
					}

					}
				}

				}
				break;
			case 49:
				_localctx = new ShowSessionContext(_localctx);
				EnterOuterAlt(_localctx, 49);
				{
				State = 708;
				Match(SHOW);
				State = 709;
				Match(SESSION);
				}
				break;
			case 50:
				_localctx = new SetSessionContext(_localctx);
				EnterOuterAlt(_localctx, 50);
				{
				State = 710;
				Match(SET);
				State = 711;
				Match(SESSION);
				State = 712;
				qualifiedName();
				State = 713;
				Match(EQ);
				State = 714;
				expression();
				}
				break;
			case 51:
				_localctx = new ResetSessionContext(_localctx);
				EnterOuterAlt(_localctx, 51);
				{
				State = 716;
				Match(RESET);
				State = 717;
				Match(SESSION);
				State = 718;
				qualifiedName();
				}
				break;
			case 52:
				_localctx = new StartTransactionContext(_localctx);
				EnterOuterAlt(_localctx, 52);
				{
				State = 719;
				Match(START);
				State = 720;
				Match(TRANSACTION);
				State = 729;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ISOLATION || _la==READ) {
					{
					State = 721;
					transactionMode();
					State = 726;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 722;
						Match(T__3);
						State = 723;
						transactionMode();
						}
						}
						State = 728;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			case 53:
				_localctx = new CommitContext(_localctx);
				EnterOuterAlt(_localctx, 53);
				{
				State = 731;
				Match(COMMIT);
				State = 733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WORK) {
					{
					State = 732;
					Match(WORK);
					}
				}

				}
				break;
			case 54:
				_localctx = new RollbackContext(_localctx);
				EnterOuterAlt(_localctx, 54);
				{
				State = 735;
				Match(ROLLBACK);
				State = 737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WORK) {
					{
					State = 736;
					Match(WORK);
					}
				}

				}
				break;
			case 55:
				_localctx = new PrepareContext(_localctx);
				EnterOuterAlt(_localctx, 55);
				{
				State = 739;
				Match(PREPARE);
				State = 740;
				identifier();
				State = 741;
				Match(FROM);
				State = 742;
				statement();
				}
				break;
			case 56:
				_localctx = new DeallocateContext(_localctx);
				EnterOuterAlt(_localctx, 56);
				{
				State = 744;
				Match(DEALLOCATE);
				State = 745;
				Match(PREPARE);
				State = 746;
				identifier();
				}
				break;
			case 57:
				_localctx = new ExecuteContext(_localctx);
				EnterOuterAlt(_localctx, 57);
				{
				State = 747;
				Match(EXECUTE);
				State = 748;
				identifier();
				State = 758;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 749;
					Match(USING);
					State = 750;
					expression();
					State = 755;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 751;
						Match(T__3);
						State = 752;
						expression();
						}
						}
						State = 757;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			case 58:
				_localctx = new DescribeInputContext(_localctx);
				EnterOuterAlt(_localctx, 58);
				{
				State = 760;
				Match(DESCRIBE);
				State = 761;
				Match(INPUT);
				State = 762;
				identifier();
				}
				break;
			case 59:
				_localctx = new DescribeOutputContext(_localctx);
				EnterOuterAlt(_localctx, 59);
				{
				State = 763;
				Match(DESCRIBE);
				State = 764;
				Match(OUTPUT);
				State = 765;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryNoWithContext queryNoWith() {
			return GetRuleContext<QueryNoWithContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithContext with() {
			return GetRuleContext<WithContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 8, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 768;
				with();
				}
			}

			State = 771;
			queryNoWith();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedQueryContext[] namedQuery() {
			return GetRuleContexts<NamedQueryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedQueryContext namedQuery(int i) {
			return GetRuleContext<NamedQueryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(SqlBaseParser.RECURSIVE, 0); }
		public WithContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithContext with() {
		WithContext _localctx = new WithContext(Context, State);
		EnterRule(_localctx, 10, RULE_with);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			Match(WITH);
			State = 775;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RECURSIVE) {
				{
				State = 774;
				Match(RECURSIVE);
				}
			}

			State = 777;
			namedQuery();
			State = 782;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 778;
				Match(T__3);
				State = 779;
				namedQuery();
				}
				}
				State = 784;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeClauseContext likeClause() {
			return GetRuleContext<LikeClauseContext>(0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableElementContext tableElement() {
		TableElementContext _localctx = new TableElementContext(Context, State);
		EnterRule(_localctx, 12, RULE_tableElement);
		try {
			State = 787;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ADMIN:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASC:
			case AT:
			case BERNOULLI:
			case CALL:
			case CALLED:
			case CASCADE:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CURRENT:
			case CURRENT_ROLE:
			case DATA:
			case DATE:
			case DAY:
			case DEFINER:
			case DESC:
			case DETERMINISTIC:
			case DISTRIBUTED:
			case EXCLUDING:
			case EXPLAIN:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORMAT:
			case FUNCTION:
			case FUNCTIONS:
			case GRANT:
			case GRANTED:
			case GRANTS:
			case GRAPHVIZ:
			case HOUR:
			case IF:
			case IGNORE:
			case INCLUDING:
			case INPUT:
			case INTERVAL:
			case INVOKER:
			case IO:
			case ISOLATION:
			case JSON:
			case LANGUAGE:
			case LAST:
			case LATERAL:
			case LEVEL:
			case LIMIT:
			case LOGICAL:
			case MAP:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case NAME:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NONE:
			case NULLIF:
			case NULLS:
			case ONLY:
			case OPTION:
			case ORDINALITY:
			case OUTPUT:
			case OVER:
			case PARTITION:
			case PARTITIONS:
			case POSITION:
			case PRECEDING:
			case PRIVILEGES:
			case PROPERTIES:
			case RANGE:
			case READ:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESPECT:
			case RESTRICT:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLES:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SECURITY:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case SQL:
			case START:
			case STATS:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEMPORARY:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRANSACTION:
			case TRY_CAST:
			case TYPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case USE:
			case USER:
			case VALIDATE:
			case VERBOSE:
			case VIEW:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case IDENTIFIER:
			case DIGIT_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 785;
				columnDefinition();
				}
				break;
			case LIKE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 786;
				likeClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SqlBaseParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(SqlBaseParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionContext columnDefinition() {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 14, RULE_columnDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			identifier();
			State = 790;
			type(0);
			State = 793;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 791;
				Match(NOT);
				State = 792;
				Match(NULL);
				}
			}

			State = 797;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 795;
				Match(COMMENT);
				State = 796;
				@string();
				}
			}

			State = 801;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 799;
				Match(WITH);
				State = 800;
				properties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeClauseContext : ParserRuleContext {
		public IToken optionType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(SqlBaseParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTIES() { return GetToken(SqlBaseParser.PROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDING() { return GetToken(SqlBaseParser.INCLUDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDING() { return GetToken(SqlBaseParser.EXCLUDING, 0); }
		public LikeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likeClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikeClauseContext likeClause() {
		LikeClauseContext _localctx = new LikeClauseContext(Context, State);
		EnterRule(_localctx, 16, RULE_likeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803;
			Match(LIKE);
			State = 804;
			qualifiedName();
			State = 807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCLUDING || _la==INCLUDING) {
				{
				State = 805;
				_localctx.optionType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
					_localctx.optionType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 806;
				Match(PROPERTIES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertiesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public PropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_properties; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertiesContext properties() {
		PropertiesContext _localctx = new PropertiesContext(Context, State);
		EnterRule(_localctx, 18, RULE_properties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 809;
			Match(T__1);
			State = 810;
			property();
			State = 815;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 811;
				Match(T__3);
				State = 812;
				property();
				}
				}
				State = 817;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 818;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(SqlBaseParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 20, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			identifier();
			State = 821;
			Match(EQ);
			State = 822;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlParameterDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public SqlParameterDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlParameterDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlParameterDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlParameterDeclarationContext sqlParameterDeclaration() {
		SqlParameterDeclarationContext _localctx = new SqlParameterDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_sqlParameterDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 824;
			identifier();
			State = 825;
			type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineCharacteristicsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCharacteristicContext[] routineCharacteristic() {
			return GetRuleContexts<RoutineCharacteristicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCharacteristicContext routineCharacteristic(int i) {
			return GetRuleContext<RoutineCharacteristicContext>(i);
		}
		public RoutineCharacteristicsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineCharacteristics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineCharacteristics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineCharacteristicsContext routineCharacteristics() {
		RoutineCharacteristicsContext _localctx = new RoutineCharacteristicsContext(Context, State);
		EnterRule(_localctx, 24, RULE_routineCharacteristics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 830;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CALLED || _la==DETERMINISTIC || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (LANGUAGE - 101)) | (1L << (NOT - 101)) | (1L << (RETURNS - 101)))) != 0)) {
				{
				{
				State = 827;
				routineCharacteristic();
				}
				}
				State = 832;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineCharacteristicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(SqlBaseParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LanguageContext language() {
			return GetRuleContext<LanguageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeterminismContext determinism() {
			return GetRuleContext<DeterminismContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullCallClauseContext nullCallClause() {
			return GetRuleContext<NullCallClauseContext>(0);
		}
		public RoutineCharacteristicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineCharacteristic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineCharacteristic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineCharacteristicContext routineCharacteristic() {
		RoutineCharacteristicContext _localctx = new RoutineCharacteristicContext(Context, State);
		EnterRule(_localctx, 26, RULE_routineCharacteristic);
		try {
			State = 837;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LANGUAGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 833;
				Match(LANGUAGE);
				State = 834;
				language();
				}
				break;
			case DETERMINISTIC:
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 835;
				determinism();
				}
				break;
			case CALLED:
			case RETURNS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 836;
				nullCallClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterRoutineCharacteristicsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterRoutineCharacteristicContext[] alterRoutineCharacteristic() {
			return GetRuleContexts<AlterRoutineCharacteristicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterRoutineCharacteristicContext alterRoutineCharacteristic(int i) {
			return GetRuleContext<AlterRoutineCharacteristicContext>(i);
		}
		public AlterRoutineCharacteristicsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterRoutineCharacteristics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterRoutineCharacteristics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterRoutineCharacteristicsContext alterRoutineCharacteristics() {
		AlterRoutineCharacteristicsContext _localctx = new AlterRoutineCharacteristicsContext(Context, State);
		EnterRule(_localctx, 28, RULE_alterRoutineCharacteristics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CALLED || _la==RETURNS) {
				{
				{
				State = 839;
				alterRoutineCharacteristic();
				}
				}
				State = 844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterRoutineCharacteristicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullCallClauseContext nullCallClause() {
			return GetRuleContext<NullCallClauseContext>(0);
		}
		public AlterRoutineCharacteristicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterRoutineCharacteristic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterRoutineCharacteristic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterRoutineCharacteristicContext alterRoutineCharacteristic() {
		AlterRoutineCharacteristicContext _localctx = new AlterRoutineCharacteristicContext(Context, State);
		EnterRule(_localctx, 30, RULE_alterRoutineCharacteristic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 845;
			nullCallClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalBodyReferenceContext externalBodyReference() {
			return GetRuleContext<ExternalBodyReferenceContext>(0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineBodyContext routineBody() {
		RoutineBodyContext _localctx = new RoutineBodyContext(Context, State);
		EnterRule(_localctx, 32, RULE_routineBody);
		try {
			State = 849;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETURN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 847;
				returnStatement();
				}
				break;
			case EXTERNAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 848;
				externalBodyReference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SqlBaseParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 851;
			Match(RETURN);
			State = 852;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalBodyReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(SqlBaseParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SqlBaseParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExternalRoutineNameContext externalRoutineName() {
			return GetRuleContext<ExternalRoutineNameContext>(0);
		}
		public ExternalBodyReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalBodyReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalBodyReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalBodyReferenceContext externalBodyReference() {
		ExternalBodyReferenceContext _localctx = new ExternalBodyReferenceContext(Context, State);
		EnterRule(_localctx, 36, RULE_externalBodyReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854;
			Match(EXTERNAL);
			State = 857;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 855;
				Match(NAME);
				State = 856;
				externalRoutineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LanguageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(SqlBaseParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LanguageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_language; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLanguage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LanguageContext language() {
		LanguageContext _localctx = new LanguageContext(Context, State);
		EnterRule(_localctx, 38, RULE_language);
		try {
			State = 861;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 859;
				Match(SQL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 860;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeterminismContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETERMINISTIC() { return GetToken(SqlBaseParser.DETERMINISTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		public DeterminismContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_determinism; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeterminism(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeterminismContext determinism() {
		DeterminismContext _localctx = new DeterminismContext(Context, State);
		EnterRule(_localctx, 40, RULE_determinism);
		try {
			State = 866;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DETERMINISTIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 863;
				Match(DETERMINISTIC);
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 864;
				Match(NOT);
				State = 865;
				Match(DETERMINISTIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullCallClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(SqlBaseParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NULL() { return GetTokens(SqlBaseParser.NULL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL(int i) {
			return GetToken(SqlBaseParser.NULL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlBaseParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(SqlBaseParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED() { return GetToken(SqlBaseParser.CALLED, 0); }
		public NullCallClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullCallClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCallClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullCallClauseContext nullCallClause() {
		NullCallClauseContext _localctx = new NullCallClauseContext(Context, State);
		EnterRule(_localctx, 42, RULE_nullCallClause);
		try {
			State = 877;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETURNS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 868;
				Match(RETURNS);
				State = 869;
				Match(NULL);
				State = 870;
				Match(ON);
				State = 871;
				Match(NULL);
				State = 872;
				Match(INPUT);
				}
				break;
			case CALLED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 873;
				Match(CALLED);
				State = 874;
				Match(ON);
				State = 875;
				Match(NULL);
				State = 876;
				Match(INPUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalRoutineNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExternalRoutineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalRoutineName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalRoutineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalRoutineNameContext externalRoutineName() {
		ExternalRoutineNameContext _localctx = new ExternalRoutineNameContext(Context, State);
		EnterRule(_localctx, 44, RULE_externalRoutineName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 879;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryNoWithContext : ParserRuleContext {
		public IToken limit;
		[System.Diagnostics.DebuggerNonUserCode] public QueryTermContext queryTerm() {
			return GetRuleContext<QueryTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(SqlBaseParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SqlBaseParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext[] sortItem() {
			return GetRuleContexts<SortItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext sortItem(int i) {
			return GetRuleContext<SortItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(SqlBaseParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(SqlBaseParser.INTEGER_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SqlBaseParser.ALL, 0); }
		public QueryNoWithContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryNoWith; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryNoWith(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryNoWithContext queryNoWith() {
		QueryNoWithContext _localctx = new QueryNoWithContext(Context, State);
		EnterRule(_localctx, 46, RULE_queryNoWith);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881;
			queryTerm(0);
			State = 892;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 882;
				Match(ORDER);
				State = 883;
				Match(BY);
				State = 884;
				sortItem();
				State = 889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 885;
					Match(T__3);
					State = 886;
					sortItem();
					}
					}
					State = 891;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 896;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 894;
				Match(LIMIT);
				State = 895;
				_localctx.limit = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==INTEGER_VALUE) ) {
					_localctx.limit = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryTermContext : ParserRuleContext {
		public QueryTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryTerm; } }
	 
		public QueryTermContext() { }
		public virtual void CopyFrom(QueryTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class QueryTermDefaultContext : QueryTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryPrimaryContext queryPrimary() {
			return GetRuleContext<QueryPrimaryContext>(0);
		}
		public QueryTermDefaultContext(QueryTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryTermDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetOperationContext : QueryTermContext {
		public QueryTermContext left;
		public IToken @operator;
		public QueryTermContext right;
		[System.Diagnostics.DebuggerNonUserCode] public QueryTermContext[] queryTerm() {
			return GetRuleContexts<QueryTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryTermContext queryTerm(int i) {
			return GetRuleContext<QueryTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(SqlBaseParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetQuantifierContext setQuantifier() {
			return GetRuleContext<SetQuantifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(SqlBaseParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(SqlBaseParser.EXCEPT, 0); }
		public SetOperationContext(QueryTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryTermContext queryTerm() {
		return queryTerm(0);
	}

	private QueryTermContext queryTerm(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		QueryTermContext _localctx = new QueryTermContext(Context, _parentState);
		QueryTermContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_queryTerm, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new QueryTermDefaultContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 899;
			queryPrimary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 915;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 913;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
					case 1:
						{
						_localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
						((SetOperationContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
						State = 901;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 902;
						((SetOperationContext)_localctx).@operator = Match(INTERSECT);
						State = 904;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							State = 903;
							setQuantifier();
							}
						}

						State = 906;
						((SetOperationContext)_localctx).right = queryTerm(3);
						}
						break;
					case 2:
						{
						_localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
						((SetOperationContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
						State = 907;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 908;
						((SetOperationContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EXCEPT || _la==UNION) ) {
							((SetOperationContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 910;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							State = 909;
							setQuantifier();
							}
						}

						State = 912;
						((SetOperationContext)_localctx).right = queryTerm(2);
						}
						break;
					}
					} 
				}
				State = 917;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class QueryPrimaryContext : ParserRuleContext {
		public QueryPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryPrimary; } }
	 
		public QueryPrimaryContext() { }
		public virtual void CopyFrom(QueryPrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubqueryContext : QueryPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryNoWithContext queryNoWith() {
			return GetRuleContext<QueryNoWithContext>(0);
		}
		public SubqueryContext(QueryPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QueryPrimaryDefaultContext : QueryPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		public QueryPrimaryDefaultContext(QueryPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryPrimaryDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableContext : QueryPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlBaseParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public TableContext(QueryPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InlineTableContext : QueryPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(SqlBaseParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InlineTableContext(QueryPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryPrimaryContext queryPrimary() {
		QueryPrimaryContext _localctx = new QueryPrimaryContext(Context, State);
		EnterRule(_localctx, 50, RULE_queryPrimary);
		try {
			int _alt;
			State = 934;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				_localctx = new QueryPrimaryDefaultContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 918;
				querySpecification();
				}
				break;
			case TABLE:
				_localctx = new TableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 919;
				Match(TABLE);
				State = 920;
				qualifiedName();
				}
				break;
			case VALUES:
				_localctx = new InlineTableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 921;
				Match(VALUES);
				State = 922;
				expression();
				State = 927;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,111,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 923;
						Match(T__3);
						State = 924;
						expression();
						}
						} 
					}
					State = 929;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,111,Context);
				}
				}
				break;
			case T__1:
				_localctx = new SubqueryContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 930;
				Match(T__1);
				State = 931;
				queryNoWith();
				State = 932;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortItemContext : ParserRuleContext {
		public IToken ordering;
		public IToken nullOrdering;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(SqlBaseParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(SqlBaseParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(SqlBaseParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(SqlBaseParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(SqlBaseParser.LAST, 0); }
		public SortItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSortItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SortItemContext sortItem() {
		SortItemContext _localctx = new SortItemContext(Context, State);
		EnterRule(_localctx, 52, RULE_sortItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 936;
			expression();
			State = 938;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 937;
				_localctx.ordering = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.ordering = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 942;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NULLS) {
				{
				State = 940;
				Match(NULLS);
				State = 941;
				_localctx.nullOrdering = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
					_localctx.nullOrdering = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationContext : ParserRuleContext {
		public BooleanExpressionContext where;
		public BooleanExpressionContext having;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(SqlBaseParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemContext[] selectItem() {
			return GetRuleContexts<SelectItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemContext selectItem(int i) {
			return GetRuleContext<SelectItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetQuantifierContext setQuantifier() {
			return GetRuleContext<SetQuantifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext[] relation() {
			return GetRuleContexts<RelationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation(int i) {
			return GetRuleContext<RelationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SqlBaseParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(SqlBaseParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SqlBaseParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupByContext groupBy() {
			return GetRuleContext<GroupByContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(SqlBaseParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext[] booleanExpression() {
			return GetRuleContexts<BooleanExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression(int i) {
			return GetRuleContext<BooleanExpressionContext>(i);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationContext querySpecification() {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(Context, State);
		EnterRule(_localctx, 54, RULE_querySpecification);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 944;
			Match(SELECT);
			State = 946;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 945;
				setQuantifier();
				}
				break;
			}
			State = 948;
			selectItem();
			State = 953;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 949;
					Match(T__3);
					State = 950;
					selectItem();
					}
					} 
				}
				State = 955;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			}
			State = 965;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				{
				State = 956;
				Match(FROM);
				State = 957;
				relation(0);
				State = 962;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 958;
						Match(T__3);
						State = 959;
						relation(0);
						}
						} 
					}
					State = 964;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
				}
				}
				break;
			}
			State = 969;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				{
				State = 967;
				Match(WHERE);
				State = 968;
				_localctx.where = booleanExpression(0);
				}
				break;
			}
			State = 974;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				{
				State = 971;
				Match(GROUP);
				State = 972;
				Match(BY);
				State = 973;
				groupBy();
				}
				break;
			}
			State = 978;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				State = 976;
				Match(HAVING);
				State = 977;
				_localctx.having = booleanExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupingElementContext[] groupingElement() {
			return GetRuleContexts<GroupingElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingElementContext groupingElement(int i) {
			return GetRuleContext<GroupingElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetQuantifierContext setQuantifier() {
			return GetRuleContext<SetQuantifierContext>(0);
		}
		public GroupByContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupBy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupBy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByContext groupBy() {
		GroupByContext _localctx = new GroupByContext(Context, State);
		EnterRule(_localctx, 56, RULE_groupBy);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 981;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				{
				State = 980;
				setQuantifier();
				}
				break;
			}
			State = 983;
			groupingElement();
			State = 988;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 984;
					Match(T__3);
					State = 985;
					groupingElement();
					}
					} 
				}
				State = 990;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingElementContext : ParserRuleContext {
		public GroupingElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingElement; } }
	 
		public GroupingElementContext() { }
		public virtual void CopyFrom(GroupingElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultipleGroupingSetsContext : GroupingElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(SqlBaseParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(SqlBaseParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupingSetContext[] groupingSet() {
			return GetRuleContexts<GroupingSetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingSetContext groupingSet(int i) {
			return GetRuleContext<GroupingSetContext>(i);
		}
		public MultipleGroupingSetsContext(GroupingElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleGroupingSets(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleGroupingSetContext : GroupingElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupingSetContext groupingSet() {
			return GetRuleContext<GroupingSetContext>(0);
		}
		public SingleGroupingSetContext(GroupingElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleGroupingSet(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CubeContext : GroupingElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(SqlBaseParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CubeContext(GroupingElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCube(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RollupContext : GroupingElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(SqlBaseParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RollupContext(GroupingElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingElementContext groupingElement() {
		GroupingElementContext _localctx = new GroupingElementContext(Context, State);
		EnterRule(_localctx, 58, RULE_groupingElement);
		int _la;
		try {
			State = 1031;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				_localctx = new SingleGroupingSetContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 991;
				groupingSet();
				}
				break;
			case 2:
				_localctx = new RollupContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 992;
				Match(ROLLUP);
				State = 993;
				Match(T__1);
				State = 1002;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << ADD) | (1L << ADMIN) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << BERNOULLI) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CURRENT) | (1L << CURRENT_DATE) | (1L << CURRENT_ROLE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA) | (1L << DATE) | (1L << DAY) | (1L << DEFINER) | (1L << DESC) | (1L << DETERMINISTIC) | (1L << DISTRIBUTED) | (1L << EXCLUDING) | (1L << EXISTS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXPLAIN - 64)) | (1L << (EXTRACT - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FALSE - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPING - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)) | (1L << (JSON - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LAST - 64)) | (1L << (LATERAL - 64)) | (1L << (LEVEL - 64)) | (1L << (LIMIT - 64)) | (1L << (LOCALTIME - 64)) | (1L << (LOCALTIMESTAMP - 64)) | (1L << (LOGICAL - 64)) | (1L << (MAP - 64)) | (1L << (MATERIALIZED - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (NAME - 64)) | (1L << (NFC - 64)) | (1L << (NFD - 64)) | (1L << (NFKC - 64)) | (1L << (NFKD - 64)) | (1L << (NO - 64)) | (1L << (NONE - 64)) | (1L << (NORMALIZE - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (NULLIF - 64)) | (1L << (NULLS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (ONLY - 129)) | (1L << (OPTION - 129)) | (1L << (ORDINALITY - 129)) | (1L << (OUTPUT - 129)) | (1L << (OVER - 129)) | (1L << (PARTITION - 129)) | (1L << (PARTITIONS - 129)) | (1L << (POSITION - 129)) | (1L << (PRECEDING - 129)) | (1L << (PRIVILEGES - 129)) | (1L << (PROPERTIES - 129)) | (1L << (RANGE - 129)) | (1L << (READ - 129)) | (1L << (RENAME - 129)) | (1L << (REPEATABLE - 129)) | (1L << (REPLACE - 129)) | (1L << (RESET - 129)) | (1L << (RESPECT - 129)) | (1L << (RESTRICT - 129)) | (1L << (RETURN - 129)) | (1L << (RETURNS - 129)) | (1L << (REVOKE - 129)) | (1L << (ROLE - 129)) | (1L << (ROLES - 129)) | (1L << (ROLLBACK - 129)) | (1L << (ROW - 129)) | (1L << (ROWS - 129)) | (1L << (SCHEMA - 129)) | (1L << (SCHEMAS - 129)) | (1L << (SECOND - 129)) | (1L << (SECURITY - 129)) | (1L << (SERIALIZABLE - 129)) | (1L << (SESSION - 129)) | (1L << (SET - 129)) | (1L << (SETS - 129)) | (1L << (SHOW - 129)) | (1L << (SOME - 129)) | (1L << (SQL - 129)) | (1L << (START - 129)) | (1L << (STATS - 129)) | (1L << (SUBSTRING - 129)) | (1L << (SYSTEM - 129)) | (1L << (TABLES - 129)) | (1L << (TABLESAMPLE - 129)) | (1L << (TEMPORARY - 129)) | (1L << (TEXT - 129)) | (1L << (TIME - 129)) | (1L << (TIMESTAMP - 129)) | (1L << (TO - 129)) | (1L << (TRANSACTION - 129)) | (1L << (TRUE - 129)) | (1L << (TRY_CAST - 129)) | (1L << (TYPE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNBOUNDED - 193)) | (1L << (UNCOMMITTED - 193)) | (1L << (USE - 193)) | (1L << (USER - 193)) | (1L << (VALIDATE - 193)) | (1L << (VERBOSE - 193)) | (1L << (VIEW - 193)) | (1L << (WORK - 193)) | (1L << (WRITE - 193)) | (1L << (YEAR - 193)) | (1L << (ZONE - 193)) | (1L << (PLUS - 193)) | (1L << (MINUS - 193)) | (1L << (STRING - 193)) | (1L << (UNICODE_STRING - 193)) | (1L << (BINARY_LITERAL - 193)) | (1L << (INTEGER_VALUE - 193)) | (1L << (DECIMAL_VALUE - 193)) | (1L << (DOUBLE_VALUE - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (DIGIT_IDENTIFIER - 193)) | (1L << (QUOTED_IDENTIFIER - 193)) | (1L << (BACKQUOTED_IDENTIFIER - 193)) | (1L << (DOUBLE_PRECISION - 193)))) != 0)) {
					{
					State = 994;
					expression();
					State = 999;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 995;
						Match(T__3);
						State = 996;
						expression();
						}
						}
						State = 1001;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1004;
				Match(T__2);
				}
				break;
			case 3:
				_localctx = new CubeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1005;
				Match(CUBE);
				State = 1006;
				Match(T__1);
				State = 1015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << ADD) | (1L << ADMIN) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << BERNOULLI) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CURRENT) | (1L << CURRENT_DATE) | (1L << CURRENT_ROLE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA) | (1L << DATE) | (1L << DAY) | (1L << DEFINER) | (1L << DESC) | (1L << DETERMINISTIC) | (1L << DISTRIBUTED) | (1L << EXCLUDING) | (1L << EXISTS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXPLAIN - 64)) | (1L << (EXTRACT - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FALSE - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPING - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)) | (1L << (JSON - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LAST - 64)) | (1L << (LATERAL - 64)) | (1L << (LEVEL - 64)) | (1L << (LIMIT - 64)) | (1L << (LOCALTIME - 64)) | (1L << (LOCALTIMESTAMP - 64)) | (1L << (LOGICAL - 64)) | (1L << (MAP - 64)) | (1L << (MATERIALIZED - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (NAME - 64)) | (1L << (NFC - 64)) | (1L << (NFD - 64)) | (1L << (NFKC - 64)) | (1L << (NFKD - 64)) | (1L << (NO - 64)) | (1L << (NONE - 64)) | (1L << (NORMALIZE - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (NULLIF - 64)) | (1L << (NULLS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (ONLY - 129)) | (1L << (OPTION - 129)) | (1L << (ORDINALITY - 129)) | (1L << (OUTPUT - 129)) | (1L << (OVER - 129)) | (1L << (PARTITION - 129)) | (1L << (PARTITIONS - 129)) | (1L << (POSITION - 129)) | (1L << (PRECEDING - 129)) | (1L << (PRIVILEGES - 129)) | (1L << (PROPERTIES - 129)) | (1L << (RANGE - 129)) | (1L << (READ - 129)) | (1L << (RENAME - 129)) | (1L << (REPEATABLE - 129)) | (1L << (REPLACE - 129)) | (1L << (RESET - 129)) | (1L << (RESPECT - 129)) | (1L << (RESTRICT - 129)) | (1L << (RETURN - 129)) | (1L << (RETURNS - 129)) | (1L << (REVOKE - 129)) | (1L << (ROLE - 129)) | (1L << (ROLES - 129)) | (1L << (ROLLBACK - 129)) | (1L << (ROW - 129)) | (1L << (ROWS - 129)) | (1L << (SCHEMA - 129)) | (1L << (SCHEMAS - 129)) | (1L << (SECOND - 129)) | (1L << (SECURITY - 129)) | (1L << (SERIALIZABLE - 129)) | (1L << (SESSION - 129)) | (1L << (SET - 129)) | (1L << (SETS - 129)) | (1L << (SHOW - 129)) | (1L << (SOME - 129)) | (1L << (SQL - 129)) | (1L << (START - 129)) | (1L << (STATS - 129)) | (1L << (SUBSTRING - 129)) | (1L << (SYSTEM - 129)) | (1L << (TABLES - 129)) | (1L << (TABLESAMPLE - 129)) | (1L << (TEMPORARY - 129)) | (1L << (TEXT - 129)) | (1L << (TIME - 129)) | (1L << (TIMESTAMP - 129)) | (1L << (TO - 129)) | (1L << (TRANSACTION - 129)) | (1L << (TRUE - 129)) | (1L << (TRY_CAST - 129)) | (1L << (TYPE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNBOUNDED - 193)) | (1L << (UNCOMMITTED - 193)) | (1L << (USE - 193)) | (1L << (USER - 193)) | (1L << (VALIDATE - 193)) | (1L << (VERBOSE - 193)) | (1L << (VIEW - 193)) | (1L << (WORK - 193)) | (1L << (WRITE - 193)) | (1L << (YEAR - 193)) | (1L << (ZONE - 193)) | (1L << (PLUS - 193)) | (1L << (MINUS - 193)) | (1L << (STRING - 193)) | (1L << (UNICODE_STRING - 193)) | (1L << (BINARY_LITERAL - 193)) | (1L << (INTEGER_VALUE - 193)) | (1L << (DECIMAL_VALUE - 193)) | (1L << (DOUBLE_VALUE - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (DIGIT_IDENTIFIER - 193)) | (1L << (QUOTED_IDENTIFIER - 193)) | (1L << (BACKQUOTED_IDENTIFIER - 193)) | (1L << (DOUBLE_PRECISION - 193)))) != 0)) {
					{
					State = 1007;
					expression();
					State = 1012;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 1008;
						Match(T__3);
						State = 1009;
						expression();
						}
						}
						State = 1014;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1017;
				Match(T__2);
				}
				break;
			case 4:
				_localctx = new MultipleGroupingSetsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1018;
				Match(GROUPING);
				State = 1019;
				Match(SETS);
				State = 1020;
				Match(T__1);
				State = 1021;
				groupingSet();
				State = 1026;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1022;
					Match(T__3);
					State = 1023;
					groupingSet();
					}
					}
					State = 1028;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1029;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GroupingSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupingSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingSetContext groupingSet() {
		GroupingSetContext _localctx = new GroupingSetContext(Context, State);
		EnterRule(_localctx, 60, RULE_groupingSet);
		int _la;
		try {
			State = 1046;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1033;
				Match(T__1);
				State = 1042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << ADD) | (1L << ADMIN) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << BERNOULLI) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CURRENT) | (1L << CURRENT_DATE) | (1L << CURRENT_ROLE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA) | (1L << DATE) | (1L << DAY) | (1L << DEFINER) | (1L << DESC) | (1L << DETERMINISTIC) | (1L << DISTRIBUTED) | (1L << EXCLUDING) | (1L << EXISTS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXPLAIN - 64)) | (1L << (EXTRACT - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FALSE - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPING - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)) | (1L << (JSON - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LAST - 64)) | (1L << (LATERAL - 64)) | (1L << (LEVEL - 64)) | (1L << (LIMIT - 64)) | (1L << (LOCALTIME - 64)) | (1L << (LOCALTIMESTAMP - 64)) | (1L << (LOGICAL - 64)) | (1L << (MAP - 64)) | (1L << (MATERIALIZED - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (NAME - 64)) | (1L << (NFC - 64)) | (1L << (NFD - 64)) | (1L << (NFKC - 64)) | (1L << (NFKD - 64)) | (1L << (NO - 64)) | (1L << (NONE - 64)) | (1L << (NORMALIZE - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (NULLIF - 64)) | (1L << (NULLS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (ONLY - 129)) | (1L << (OPTION - 129)) | (1L << (ORDINALITY - 129)) | (1L << (OUTPUT - 129)) | (1L << (OVER - 129)) | (1L << (PARTITION - 129)) | (1L << (PARTITIONS - 129)) | (1L << (POSITION - 129)) | (1L << (PRECEDING - 129)) | (1L << (PRIVILEGES - 129)) | (1L << (PROPERTIES - 129)) | (1L << (RANGE - 129)) | (1L << (READ - 129)) | (1L << (RENAME - 129)) | (1L << (REPEATABLE - 129)) | (1L << (REPLACE - 129)) | (1L << (RESET - 129)) | (1L << (RESPECT - 129)) | (1L << (RESTRICT - 129)) | (1L << (RETURN - 129)) | (1L << (RETURNS - 129)) | (1L << (REVOKE - 129)) | (1L << (ROLE - 129)) | (1L << (ROLES - 129)) | (1L << (ROLLBACK - 129)) | (1L << (ROW - 129)) | (1L << (ROWS - 129)) | (1L << (SCHEMA - 129)) | (1L << (SCHEMAS - 129)) | (1L << (SECOND - 129)) | (1L << (SECURITY - 129)) | (1L << (SERIALIZABLE - 129)) | (1L << (SESSION - 129)) | (1L << (SET - 129)) | (1L << (SETS - 129)) | (1L << (SHOW - 129)) | (1L << (SOME - 129)) | (1L << (SQL - 129)) | (1L << (START - 129)) | (1L << (STATS - 129)) | (1L << (SUBSTRING - 129)) | (1L << (SYSTEM - 129)) | (1L << (TABLES - 129)) | (1L << (TABLESAMPLE - 129)) | (1L << (TEMPORARY - 129)) | (1L << (TEXT - 129)) | (1L << (TIME - 129)) | (1L << (TIMESTAMP - 129)) | (1L << (TO - 129)) | (1L << (TRANSACTION - 129)) | (1L << (TRUE - 129)) | (1L << (TRY_CAST - 129)) | (1L << (TYPE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNBOUNDED - 193)) | (1L << (UNCOMMITTED - 193)) | (1L << (USE - 193)) | (1L << (USER - 193)) | (1L << (VALIDATE - 193)) | (1L << (VERBOSE - 193)) | (1L << (VIEW - 193)) | (1L << (WORK - 193)) | (1L << (WRITE - 193)) | (1L << (YEAR - 193)) | (1L << (ZONE - 193)) | (1L << (PLUS - 193)) | (1L << (MINUS - 193)) | (1L << (STRING - 193)) | (1L << (UNICODE_STRING - 193)) | (1L << (BINARY_LITERAL - 193)) | (1L << (INTEGER_VALUE - 193)) | (1L << (DECIMAL_VALUE - 193)) | (1L << (DOUBLE_VALUE - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (DIGIT_IDENTIFIER - 193)) | (1L << (QUOTED_IDENTIFIER - 193)) | (1L << (BACKQUOTED_IDENTIFIER - 193)) | (1L << (DOUBLE_PRECISION - 193)))) != 0)) {
					{
					State = 1034;
					expression();
					State = 1039;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 1035;
						Match(T__3);
						State = 1036;
						expression();
						}
						}
						State = 1041;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1044;
				Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1045;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedQueryContext : ParserRuleContext {
		public IdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAliasesContext columnAliases() {
			return GetRuleContext<ColumnAliasesContext>(0);
		}
		public NamedQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedQueryContext namedQuery() {
		NamedQueryContext _localctx = new NamedQueryContext(Context, State);
		EnterRule(_localctx, 62, RULE_namedQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1048;
			_localctx.name = identifier();
			State = 1050;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 1049;
				columnAliases();
				}
			}

			State = 1052;
			Match(AS);
			State = 1053;
			Match(T__1);
			State = 1054;
			query();
			State = 1055;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetQuantifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(SqlBaseParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SqlBaseParser.ALL, 0); }
		public SetQuantifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setQuantifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetQuantifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetQuantifierContext setQuantifier() {
		SetQuantifierContext _localctx = new SetQuantifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_setQuantifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1057;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectItemContext : ParserRuleContext {
		public SelectItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectItem; } }
	 
		public SelectItemContext() { }
		public virtual void CopyFrom(SelectItemContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectAllContext : SelectItemContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(SqlBaseParser.ASTERISK, 0); }
		public SelectAllContext(SelectItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectAll(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectSingleContext : SelectItemContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		public SelectSingleContext(SelectItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSingle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectItemContext selectItem() {
		SelectItemContext _localctx = new SelectItemContext(Context, State);
		EnterRule(_localctx, 66, RULE_selectItem);
		int _la;
		try {
			State = 1071;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				_localctx = new SelectSingleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1059;
				expression();
				State = 1064;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
				case 1:
					{
					State = 1061;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 1060;
						Match(AS);
						}
					}

					State = 1063;
					identifier();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SelectAllContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1066;
				qualifiedName();
				State = 1067;
				Match(T__0);
				State = 1068;
				Match(ASTERISK);
				}
				break;
			case 3:
				_localctx = new SelectAllContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1070;
				Match(ASTERISK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
	 
		public RelationContext() { }
		public virtual void CopyFrom(RelationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RelationDefaultContext : RelationContext {
		[System.Diagnostics.DebuggerNonUserCode] public SampledRelationContext sampledRelation() {
			return GetRuleContext<SampledRelationContext>(0);
		}
		public RelationDefaultContext(RelationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JoinRelationContext : RelationContext {
		public RelationContext left;
		public SampledRelationContext right;
		public RelationContext rightRelation;
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext[] relation() {
			return GetRuleContexts<RelationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation(int i) {
			return GetRuleContext<RelationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(SqlBaseParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(SqlBaseParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JoinTypeContext joinType() {
			return GetRuleContext<JoinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinCriteriaContext joinCriteria() {
			return GetRuleContext<JoinCriteriaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(SqlBaseParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SampledRelationContext sampledRelation() {
			return GetRuleContext<SampledRelationContext>(0);
		}
		public JoinRelationContext(RelationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		return relation(0);
	}

	private RelationContext relation(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationContext _localctx = new RelationContext(Context, _parentState);
		RelationContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_relation, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new RelationDefaultContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1074;
			sampledRelation();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1094;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JoinRelationContext(new RelationContext(_parentctx, _parentState));
					((JoinRelationContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_relation);
					State = 1076;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 1090;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CROSS:
						{
						State = 1077;
						Match(CROSS);
						State = 1078;
						Match(JOIN);
						State = 1079;
						((JoinRelationContext)_localctx).right = sampledRelation();
						}
						break;
					case FULL:
					case INNER:
					case JOIN:
					case LEFT:
					case RIGHT:
						{
						State = 1080;
						joinType();
						State = 1081;
						Match(JOIN);
						State = 1082;
						((JoinRelationContext)_localctx).rightRelation = relation(0);
						State = 1083;
						joinCriteria();
						}
						break;
					case NATURAL:
						{
						State = 1085;
						Match(NATURAL);
						State = 1086;
						joinType();
						State = 1087;
						Match(JOIN);
						State = 1088;
						((JoinRelationContext)_localctx).right = sampledRelation();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 1096;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class JoinTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(SqlBaseParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(SqlBaseParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(SqlBaseParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(SqlBaseParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(SqlBaseParser.FULL, 0); }
		public JoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinTypeContext joinType() {
		JoinTypeContext _localctx = new JoinTypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_joinType);
		int _la;
		try {
			State = 1112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
			case JOIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INNER) {
					{
					State = 1097;
					Match(INNER);
					}
				}

				}
				break;
			case LEFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1100;
				Match(LEFT);
				State = 1102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 1101;
					Match(OUTER);
					}
				}

				}
				break;
			case RIGHT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1104;
				Match(RIGHT);
				State = 1106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 1105;
					Match(OUTER);
					}
				}

				}
				break;
			case FULL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1108;
				Match(FULL);
				State = 1110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 1109;
					Match(OUTER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinCriteriaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlBaseParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(SqlBaseParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public JoinCriteriaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinCriteria; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinCriteria(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinCriteriaContext joinCriteria() {
		JoinCriteriaContext _localctx = new JoinCriteriaContext(Context, State);
		EnterRule(_localctx, 72, RULE_joinCriteria);
		int _la;
		try {
			State = 1128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1114;
				Match(ON);
				State = 1115;
				booleanExpression(0);
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1116;
				Match(USING);
				State = 1117;
				Match(T__1);
				State = 1118;
				identifier();
				State = 1123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1119;
					Match(T__3);
					State = 1120;
					identifier();
					}
					}
					State = 1125;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1126;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SampledRelationContext : ParserRuleContext {
		public ExpressionContext percentage;
		[System.Diagnostics.DebuggerNonUserCode] public AliasedRelationContext aliasedRelation() {
			return GetRuleContext<AliasedRelationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(SqlBaseParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SampleTypeContext sampleType() {
			return GetRuleContext<SampleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SampledRelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sampledRelation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSampledRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SampledRelationContext sampledRelation() {
		SampledRelationContext _localctx = new SampledRelationContext(Context, State);
		EnterRule(_localctx, 74, RULE_sampledRelation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1130;
			aliasedRelation();
			State = 1137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				{
				State = 1131;
				Match(TABLESAMPLE);
				State = 1132;
				sampleType();
				State = 1133;
				Match(T__1);
				State = 1134;
				_localctx.percentage = expression();
				State = 1135;
				Match(T__2);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SampleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BERNOULLI() { return GetToken(SqlBaseParser.BERNOULLI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(SqlBaseParser.SYSTEM, 0); }
		public SampleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sampleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSampleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SampleTypeContext sampleType() {
		SampleTypeContext _localctx = new SampleTypeContext(Context, State);
		EnterRule(_localctx, 76, RULE_sampleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1139;
			_la = TokenStream.LA(1);
			if ( !(_la==BERNOULLI || _la==SYSTEM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasedRelationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationPrimaryContext relationPrimary() {
			return GetRuleContext<RelationPrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAliasesContext columnAliases() {
			return GetRuleContext<ColumnAliasesContext>(0);
		}
		public AliasedRelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasedRelation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasedRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasedRelationContext aliasedRelation() {
		AliasedRelationContext _localctx = new AliasedRelationContext(Context, State);
		EnterRule(_localctx, 78, RULE_aliasedRelation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1141;
			relationPrimary();
			State = 1149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
			case 1:
				{
				State = 1143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 1142;
					Match(AS);
					}
				}

				State = 1145;
				identifier();
				State = 1147;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
				case 1:
					{
					State = 1146;
					columnAliases();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnAliasesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ColumnAliasesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnAliases; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnAliases(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnAliasesContext columnAliases() {
		ColumnAliasesContext _localctx = new ColumnAliasesContext(Context, State);
		EnterRule(_localctx, 80, RULE_columnAliases);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1151;
			Match(T__1);
			State = 1152;
			identifier();
			State = 1157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 1153;
				Match(T__3);
				State = 1154;
				identifier();
				}
				}
				State = 1159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1160;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationPrimaryContext : ParserRuleContext {
		public RelationPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationPrimary; } }
	 
		public RelationPrimaryContext() { }
		public virtual void CopyFrom(RelationPrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubqueryRelationContext : RelationPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public SubqueryRelationContext(RelationPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryRelation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedRelationContext : RelationPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation() {
			return GetRuleContext<RelationContext>(0);
		}
		public ParenthesizedRelationContext(RelationPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedRelation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnnestContext : RelationPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNNEST() { return GetToken(SqlBaseParser.UNNEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SqlBaseParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(SqlBaseParser.ORDINALITY, 0); }
		public UnnestContext(RelationPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnnest(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LateralContext : RelationPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL() { return GetToken(SqlBaseParser.LATERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public LateralContext(RelationPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLateral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableNameContext : RelationPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public TableNameContext(RelationPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationPrimaryContext relationPrimary() {
		RelationPrimaryContext _localctx = new RelationPrimaryContext(Context, State);
		EnterRule(_localctx, 82, RULE_relationPrimary);
		int _la;
		try {
			State = 1191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				_localctx = new TableNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1162;
				qualifiedName();
				}
				break;
			case 2:
				_localctx = new SubqueryRelationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1163;
				Match(T__1);
				State = 1164;
				query();
				State = 1165;
				Match(T__2);
				}
				break;
			case 3:
				_localctx = new UnnestContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1167;
				Match(UNNEST);
				State = 1168;
				Match(T__1);
				State = 1169;
				expression();
				State = 1174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1170;
					Match(T__3);
					State = 1171;
					expression();
					}
					}
					State = 1176;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1177;
				Match(T__2);
				State = 1180;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
				case 1:
					{
					State = 1178;
					Match(WITH);
					State = 1179;
					Match(ORDINALITY);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new LateralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1182;
				Match(LATERAL);
				State = 1183;
				Match(T__1);
				State = 1184;
				query();
				State = 1185;
				Match(T__2);
				}
				break;
			case 5:
				_localctx = new ParenthesizedRelationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1187;
				Match(T__1);
				State = 1188;
				relation(0);
				State = 1189;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1193;
			booleanExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
	 
		public BooleanExpressionContext() { }
		public virtual void CopyFrom(BooleanExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalNotContext : BooleanExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public LogicalNotContext(BooleanExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredicatedContext : BooleanExpressionContext {
		public ValueExpressionContext _valueExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PredicatedContext(BooleanExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicated(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalBinaryContext : BooleanExpressionContext {
		public BooleanExpressionContext left;
		public IToken @operator;
		public BooleanExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext[] booleanExpression() {
			return GetRuleContexts<BooleanExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression(int i) {
			return GetRuleContext<BooleanExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SqlBaseParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SqlBaseParser.OR, 0); }
		public LogicalBinaryContext(BooleanExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		return booleanExpression(0);
	}

	private BooleanExpressionContext booleanExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BooleanExpressionContext _localctx = new BooleanExpressionContext(Context, _parentState);
		BooleanExpressionContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_booleanExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1202;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__4:
			case ADD:
			case ADMIN:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASC:
			case AT:
			case BERNOULLI:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASE:
			case CAST:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATE:
			case DAY:
			case DEFINER:
			case DESC:
			case DETERMINISTIC:
			case DISTRIBUTED:
			case EXCLUDING:
			case EXISTS:
			case EXPLAIN:
			case EXTRACT:
			case EXTERNAL:
			case FALSE:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORMAT:
			case FUNCTION:
			case FUNCTIONS:
			case GRANT:
			case GRANTED:
			case GRANTS:
			case GRAPHVIZ:
			case GROUPING:
			case HOUR:
			case IF:
			case IGNORE:
			case INCLUDING:
			case INPUT:
			case INTERVAL:
			case INVOKER:
			case IO:
			case ISOLATION:
			case JSON:
			case LANGUAGE:
			case LAST:
			case LATERAL:
			case LEVEL:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOGICAL:
			case MAP:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case NAME:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NONE:
			case NORMALIZE:
			case NULL:
			case NULLIF:
			case NULLS:
			case ONLY:
			case OPTION:
			case ORDINALITY:
			case OUTPUT:
			case OVER:
			case PARTITION:
			case PARTITIONS:
			case POSITION:
			case PRECEDING:
			case PRIVILEGES:
			case PROPERTIES:
			case RANGE:
			case READ:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESPECT:
			case RESTRICT:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLES:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SECURITY:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case SQL:
			case START:
			case STATS:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEMPORARY:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRANSACTION:
			case TRUE:
			case TRY_CAST:
			case TYPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case USE:
			case USER:
			case VALIDATE:
			case VERBOSE:
			case VIEW:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case PLUS:
			case MINUS:
			case STRING:
			case UNICODE_STRING:
			case BINARY_LITERAL:
			case INTEGER_VALUE:
			case DECIMAL_VALUE:
			case DOUBLE_VALUE:
			case IDENTIFIER:
			case DIGIT_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
			case DOUBLE_PRECISION:
				{
				_localctx = new PredicatedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1196;
				((PredicatedContext)_localctx)._valueExpression = valueExpression(0);
				State = 1198;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
				case 1:
					{
					State = 1197;
					predicate(((PredicatedContext)_localctx)._valueExpression);
					}
					break;
				}
				}
				break;
			case NOT:
				{
				_localctx = new LogicalNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1200;
				Match(NOT);
				State = 1201;
				booleanExpression(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1212;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,157,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1210;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
					case 1:
						{
						_localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
						((LogicalBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						State = 1204;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1205;
						((LogicalBinaryContext)_localctx).@operator = Match(AND);
						State = 1206;
						((LogicalBinaryContext)_localctx).right = booleanExpression(3);
						}
						break;
					case 2:
						{
						_localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
						((LogicalBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						State = 1207;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1208;
						((LogicalBinaryContext)_localctx).@operator = Match(OR);
						State = 1209;
						((LogicalBinaryContext)_localctx).right = booleanExpression(2);
						}
						break;
					}
					} 
				}
				State = 1214;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,157,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ParserRuleContext value;
		public PredicateContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public PredicateContext(ParserRuleContext parent, int invokingState, ParserRuleContext value)
			: base(parent, invokingState)
		{
			this.value = value;
		}
		public override int RuleIndex { get { return RULE_predicate; } }
	 
		public PredicateContext() { }
		public virtual void CopyFrom(PredicateContext context) {
			base.CopyFrom(context);
			this.value = context.value;
		}
	}
	public partial class ComparisonContext : PredicateContext {
		public ValueExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		public ComparisonContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LikeContext : PredicateContext {
		public ValueExpressionContext pattern;
		public ValueExpressionContext escape;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(SqlBaseParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext[] valueExpression() {
			return GetRuleContexts<ValueExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression(int i) {
			return GetRuleContext<ValueExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(SqlBaseParser.ESCAPE, 0); }
		public LikeContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLike(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InSubqueryContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		public InSubqueryContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DistinctFromContext : PredicateContext {
		public ValueExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(SqlBaseParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(SqlBaseParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		public DistinctFromContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistinctFrom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InListContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		public InListContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(SqlBaseParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SqlBaseParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		public NullPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BetweenContext : PredicateContext {
		public ValueExpressionContext lower;
		public ValueExpressionContext upper;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(SqlBaseParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SqlBaseParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext[] valueExpression() {
			return GetRuleContexts<ValueExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression(int i) {
			return GetRuleContext<ValueExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SqlBaseParser.NOT, 0); }
		public BetweenContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetween(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QuantifiedComparisonContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonQuantifierContext comparisonQuantifier() {
			return GetRuleContext<ComparisonQuantifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public QuantifiedComparisonContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantifiedComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate(ParserRuleContext value) {
		PredicateContext _localctx = new PredicateContext(Context, State, value);
		EnterRule(_localctx, 88, RULE_predicate);
		int _la;
		try {
			State = 1276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
			case 1:
				_localctx = new ComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1215;
				comparisonOperator();
				State = 1216;
				((ComparisonContext)_localctx).right = valueExpression(0);
				}
				break;
			case 2:
				_localctx = new QuantifiedComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1218;
				comparisonOperator();
				State = 1219;
				comparisonQuantifier();
				State = 1220;
				Match(T__1);
				State = 1221;
				query();
				State = 1222;
				Match(T__2);
				}
				break;
			case 3:
				_localctx = new BetweenContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1224;
					Match(NOT);
					}
				}

				State = 1227;
				Match(BETWEEN);
				State = 1228;
				((BetweenContext)_localctx).lower = valueExpression(0);
				State = 1229;
				Match(AND);
				State = 1230;
				((BetweenContext)_localctx).upper = valueExpression(0);
				}
				break;
			case 4:
				_localctx = new InListContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1232;
					Match(NOT);
					}
				}

				State = 1235;
				Match(IN);
				State = 1236;
				Match(T__1);
				State = 1237;
				expression();
				State = 1242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1238;
					Match(T__3);
					State = 1239;
					expression();
					}
					}
					State = 1244;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1245;
				Match(T__2);
				}
				break;
			case 5:
				_localctx = new InSubqueryContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1247;
					Match(NOT);
					}
				}

				State = 1250;
				Match(IN);
				State = 1251;
				Match(T__1);
				State = 1252;
				query();
				State = 1253;
				Match(T__2);
				}
				break;
			case 6:
				_localctx = new LikeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1255;
					Match(NOT);
					}
				}

				State = 1258;
				Match(LIKE);
				State = 1259;
				((LikeContext)_localctx).pattern = valueExpression(0);
				State = 1262;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
				case 1:
					{
					State = 1260;
					Match(ESCAPE);
					State = 1261;
					((LikeContext)_localctx).escape = valueExpression(0);
					}
					break;
				}
				}
				break;
			case 7:
				_localctx = new NullPredicateContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1264;
				Match(IS);
				State = 1266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1265;
					Match(NOT);
					}
				}

				State = 1268;
				Match(NULL);
				}
				break;
			case 8:
				_localctx = new DistinctFromContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1269;
				Match(IS);
				State = 1271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1270;
					Match(NOT);
					}
				}

				State = 1273;
				Match(DISTINCT);
				State = 1274;
				Match(FROM);
				State = 1275;
				((DistinctFromContext)_localctx).right = valueExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueExpressionContext : ParserRuleContext {
		public ValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueExpression; } }
	 
		public ValueExpressionContext() { }
		public virtual void CopyFrom(ValueExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueExpressionDefaultContext : ValueExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ValueExpressionDefaultContext(ValueExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueExpressionDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatenationContext : ValueExpressionContext {
		public ValueExpressionContext left;
		public ValueExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(SqlBaseParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext[] valueExpression() {
			return GetRuleContexts<ValueExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression(int i) {
			return GetRuleContext<ValueExpressionContext>(i);
		}
		public ConcatenationContext(ValueExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticBinaryContext : ValueExpressionContext {
		public ValueExpressionContext left;
		public IToken @operator;
		public ValueExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext[] valueExpression() {
			return GetRuleContexts<ValueExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression(int i) {
			return GetRuleContext<ValueExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(SqlBaseParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(SqlBaseParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(SqlBaseParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SqlBaseParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SqlBaseParser.MINUS, 0); }
		public ArithmeticBinaryContext(ValueExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticUnaryContext : ValueExpressionContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SqlBaseParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SqlBaseParser.PLUS, 0); }
		public ArithmeticUnaryContext(ValueExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtTimeZoneContext : ValueExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(SqlBaseParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeZoneSpecifierContext timeZoneSpecifier() {
			return GetRuleContext<TimeZoneSpecifierContext>(0);
		}
		public AtTimeZoneContext(ValueExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtTimeZone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueExpressionContext valueExpression() {
		return valueExpression(0);
	}

	private ValueExpressionContext valueExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ValueExpressionContext _localctx = new ValueExpressionContext(Context, _parentState);
		ValueExpressionContext _prevctx = _localctx;
		int _startState = 90;
		EnterRecursionRule(_localctx, 90, RULE_valueExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1282;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__4:
			case ADD:
			case ADMIN:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASC:
			case AT:
			case BERNOULLI:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASE:
			case CAST:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATE:
			case DAY:
			case DEFINER:
			case DESC:
			case DETERMINISTIC:
			case DISTRIBUTED:
			case EXCLUDING:
			case EXISTS:
			case EXPLAIN:
			case EXTRACT:
			case EXTERNAL:
			case FALSE:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORMAT:
			case FUNCTION:
			case FUNCTIONS:
			case GRANT:
			case GRANTED:
			case GRANTS:
			case GRAPHVIZ:
			case GROUPING:
			case HOUR:
			case IF:
			case IGNORE:
			case INCLUDING:
			case INPUT:
			case INTERVAL:
			case INVOKER:
			case IO:
			case ISOLATION:
			case JSON:
			case LANGUAGE:
			case LAST:
			case LATERAL:
			case LEVEL:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOGICAL:
			case MAP:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case NAME:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NONE:
			case NORMALIZE:
			case NULL:
			case NULLIF:
			case NULLS:
			case ONLY:
			case OPTION:
			case ORDINALITY:
			case OUTPUT:
			case OVER:
			case PARTITION:
			case PARTITIONS:
			case POSITION:
			case PRECEDING:
			case PRIVILEGES:
			case PROPERTIES:
			case RANGE:
			case READ:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESPECT:
			case RESTRICT:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLES:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SECURITY:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case SQL:
			case START:
			case STATS:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEMPORARY:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRANSACTION:
			case TRUE:
			case TRY_CAST:
			case TYPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case USE:
			case USER:
			case VALIDATE:
			case VERBOSE:
			case VIEW:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case STRING:
			case UNICODE_STRING:
			case BINARY_LITERAL:
			case INTEGER_VALUE:
			case DECIMAL_VALUE:
			case DOUBLE_VALUE:
			case IDENTIFIER:
			case DIGIT_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
			case DOUBLE_PRECISION:
				{
				_localctx = new ValueExpressionDefaultContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1279;
				primaryExpression(0);
				}
				break;
			case PLUS:
			case MINUS:
				{
				_localctx = new ArithmeticUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1280;
				((ArithmeticUnaryContext)_localctx).@operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((ArithmeticUnaryContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1281;
				valueExpression(4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1298;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1296;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
					case 1:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						State = 1284;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1285;
						((ArithmeticBinaryContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 219)) & ~0x3f) == 0 && ((1L << (_la - 219)) & ((1L << (ASTERISK - 219)) | (1L << (SLASH - 219)) | (1L << (PERCENT - 219)))) != 0)) ) {
							((ArithmeticBinaryContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1286;
						((ArithmeticBinaryContext)_localctx).right = valueExpression(4);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						State = 1287;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1288;
						((ArithmeticBinaryContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((ArithmeticBinaryContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1289;
						((ArithmeticBinaryContext)_localctx).right = valueExpression(3);
						}
						break;
					case 3:
						{
						_localctx = new ConcatenationContext(new ValueExpressionContext(_parentctx, _parentState));
						((ConcatenationContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						State = 1290;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1291;
						Match(CONCAT);
						State = 1292;
						((ConcatenationContext)_localctx).right = valueExpression(2);
						}
						break;
					case 4:
						{
						_localctx = new AtTimeZoneContext(new ValueExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						State = 1293;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1294;
						Match(AT);
						State = 1295;
						timeZoneSpecifier();
						}
						break;
					}
					} 
				}
				State = 1300;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
	 
		public PrimaryExpressionContext() { }
		public virtual void CopyFrom(PrimaryExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DereferenceContext : PrimaryExpressionContext {
		public PrimaryExpressionContext @base;
		public IdentifierContext fieldName;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DereferenceContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDereference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConstructorContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_PRECISION() { return GetToken(SqlBaseParser.DOUBLE_PRECISION, 0); }
		public TypeConstructorContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SpecialDateTimeFunctionContext : PrimaryExpressionContext {
		public IToken name;
		public IToken precision;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(SqlBaseParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(SqlBaseParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(SqlBaseParser.INTEGER_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(SqlBaseParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(SqlBaseParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(SqlBaseParser.LOCALTIMESTAMP, 0); }
		public SpecialDateTimeFunctionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialDateTimeFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubstringContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(SqlBaseParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext[] valueExpression() {
			return GetRuleContexts<ValueExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression(int i) {
			return GetRuleContext<ValueExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SqlBaseParser.FOR, 0); }
		public SubstringContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstring(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(SqlBaseParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SqlBaseParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY_CAST() { return GetToken(SqlBaseParser.TRY_CAST, 0); }
		public CastContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParameterContext : PrimaryExpressionContext {
		public ParameterContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NormalizeContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZE() { return GetToken(SqlBaseParser.NORMALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalFormContext normalForm() {
			return GetRuleContext<NormalFormContext>(0);
		}
		public NormalizeContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalize(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntervalLiteralContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public IntervalLiteralContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericLiteralContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumericLiteralContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanValueContext booleanValue() {
			return GetRuleContext<BooleanValueContext>(0);
		}
		public BooleanLiteralContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleCaseContext : PrimaryExpressionContext {
		public ExpressionContext elseExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(SqlBaseParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SqlBaseParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhenClauseContext[] whenClause() {
			return GetRuleContexts<WhenClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenClauseContext whenClause(int i) {
			return GetRuleContext<WhenClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SqlBaseParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SimpleCaseContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleCase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ColumnReferenceContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ColumnReferenceContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnReference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SqlBaseParser.NULL, 0); }
		public NullLiteralContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RowConstructorContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(SqlBaseParser.ROW, 0); }
		public RowConstructorContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubscriptContext : PrimaryExpressionContext {
		public PrimaryExpressionContext value;
		public ValueExpressionContext index;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		public SubscriptContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public SubqueryExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryLiteralContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_LITERAL() { return GetToken(SqlBaseParser.BINARY_LITERAL, 0); }
		public BinaryLiteralContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurrentUserContext : PrimaryExpressionContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(SqlBaseParser.CURRENT_USER, 0); }
		public CurrentUserContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentUser(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExtractContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(SqlBaseParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlBaseParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		public ExtractContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtract(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringLiteralContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayConstructorContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SqlBaseParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayConstructorContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(SqlBaseParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OverContext over() {
			return GetRuleContext<OverContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(SqlBaseParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SqlBaseParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext[] sortItem() {
			return GetRuleContexts<SortItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext sortItem(int i) {
			return GetRuleContext<SortItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetQuantifierContext setQuantifier() {
			return GetRuleContext<SetQuantifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullTreatmentContext nullTreatment() {
			return GetRuleContext<NullTreatmentContext>(0);
		}
		public FunctionCallContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExistsContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlBaseParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public ExistsContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExists(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PositionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(SqlBaseParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext[] valueExpression() {
			return GetRuleContexts<ValueExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression(int i) {
			return GetRuleContext<ValueExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SqlBaseParser.IN, 0); }
		public PositionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPosition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SearchedCaseContext : PrimaryExpressionContext {
		public ExpressionContext elseExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(SqlBaseParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SqlBaseParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhenClauseContext[] whenClause() {
			return GetRuleContexts<WhenClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenClauseContext whenClause(int i) {
			return GetRuleContext<WhenClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SqlBaseParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SearchedCaseContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearchedCase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupingOperationContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(SqlBaseParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public GroupingOperationContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupingOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		return primaryExpression(0);
	}

	private PrimaryExpressionContext primaryExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, _parentState);
		PrimaryExpressionContext _prevctx = _localctx;
		int _startState = 92;
		EnterRecursionRule(_localctx, 92, RULE_primaryExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1540;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				{
				_localctx = new NullLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1302;
				Match(NULL);
				}
				break;
			case 2:
				{
				_localctx = new IntervalLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1303;
				interval();
				}
				break;
			case 3:
				{
				_localctx = new TypeConstructorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1304;
				identifier();
				State = 1305;
				@string();
				}
				break;
			case 4:
				{
				_localctx = new TypeConstructorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1307;
				Match(DOUBLE_PRECISION);
				State = 1308;
				@string();
				}
				break;
			case 5:
				{
				_localctx = new NumericLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1309;
				number();
				}
				break;
			case 6:
				{
				_localctx = new BooleanLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1310;
				booleanValue();
				}
				break;
			case 7:
				{
				_localctx = new StringLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1311;
				@string();
				}
				break;
			case 8:
				{
				_localctx = new BinaryLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1312;
				Match(BINARY_LITERAL);
				}
				break;
			case 9:
				{
				_localctx = new ParameterContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1313;
				Match(T__4);
				}
				break;
			case 10:
				{
				_localctx = new PositionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1314;
				Match(POSITION);
				State = 1315;
				Match(T__1);
				State = 1316;
				valueExpression(0);
				State = 1317;
				Match(IN);
				State = 1318;
				valueExpression(0);
				State = 1319;
				Match(T__2);
				}
				break;
			case 11:
				{
				_localctx = new RowConstructorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1321;
				Match(T__1);
				State = 1322;
				expression();
				State = 1325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1323;
					Match(T__3);
					State = 1324;
					expression();
					}
					}
					State = 1327;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__3 );
				State = 1329;
				Match(T__2);
				}
				break;
			case 12:
				{
				_localctx = new RowConstructorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1331;
				Match(ROW);
				State = 1332;
				Match(T__1);
				State = 1333;
				expression();
				State = 1338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1334;
					Match(T__3);
					State = 1335;
					expression();
					}
					}
					State = 1340;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1341;
				Match(T__2);
				}
				break;
			case 13:
				{
				_localctx = new FunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1343;
				qualifiedName();
				State = 1344;
				Match(T__1);
				State = 1345;
				Match(ASTERISK);
				State = 1346;
				Match(T__2);
				State = 1348;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
				case 1:
					{
					State = 1347;
					filter();
					}
					break;
				}
				State = 1351;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
				case 1:
					{
					State = 1350;
					over();
					}
					break;
				}
				}
				break;
			case 14:
				{
				_localctx = new FunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1353;
				qualifiedName();
				State = 1354;
				Match(T__1);
				State = 1366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << ADD) | (1L << ADMIN) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << BERNOULLI) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CURRENT) | (1L << CURRENT_DATE) | (1L << CURRENT_ROLE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA) | (1L << DATE) | (1L << DAY) | (1L << DEFINER) | (1L << DESC) | (1L << DETERMINISTIC) | (1L << DISTINCT) | (1L << DISTRIBUTED) | (1L << EXCLUDING) | (1L << EXISTS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXPLAIN - 64)) | (1L << (EXTRACT - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FALSE - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPING - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)) | (1L << (JSON - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LAST - 64)) | (1L << (LATERAL - 64)) | (1L << (LEVEL - 64)) | (1L << (LIMIT - 64)) | (1L << (LOCALTIME - 64)) | (1L << (LOCALTIMESTAMP - 64)) | (1L << (LOGICAL - 64)) | (1L << (MAP - 64)) | (1L << (MATERIALIZED - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (NAME - 64)) | (1L << (NFC - 64)) | (1L << (NFD - 64)) | (1L << (NFKC - 64)) | (1L << (NFKD - 64)) | (1L << (NO - 64)) | (1L << (NONE - 64)) | (1L << (NORMALIZE - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (NULLIF - 64)) | (1L << (NULLS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (ONLY - 129)) | (1L << (OPTION - 129)) | (1L << (ORDINALITY - 129)) | (1L << (OUTPUT - 129)) | (1L << (OVER - 129)) | (1L << (PARTITION - 129)) | (1L << (PARTITIONS - 129)) | (1L << (POSITION - 129)) | (1L << (PRECEDING - 129)) | (1L << (PRIVILEGES - 129)) | (1L << (PROPERTIES - 129)) | (1L << (RANGE - 129)) | (1L << (READ - 129)) | (1L << (RENAME - 129)) | (1L << (REPEATABLE - 129)) | (1L << (REPLACE - 129)) | (1L << (RESET - 129)) | (1L << (RESPECT - 129)) | (1L << (RESTRICT - 129)) | (1L << (RETURN - 129)) | (1L << (RETURNS - 129)) | (1L << (REVOKE - 129)) | (1L << (ROLE - 129)) | (1L << (ROLES - 129)) | (1L << (ROLLBACK - 129)) | (1L << (ROW - 129)) | (1L << (ROWS - 129)) | (1L << (SCHEMA - 129)) | (1L << (SCHEMAS - 129)) | (1L << (SECOND - 129)) | (1L << (SECURITY - 129)) | (1L << (SERIALIZABLE - 129)) | (1L << (SESSION - 129)) | (1L << (SET - 129)) | (1L << (SETS - 129)) | (1L << (SHOW - 129)) | (1L << (SOME - 129)) | (1L << (SQL - 129)) | (1L << (START - 129)) | (1L << (STATS - 129)) | (1L << (SUBSTRING - 129)) | (1L << (SYSTEM - 129)) | (1L << (TABLES - 129)) | (1L << (TABLESAMPLE - 129)) | (1L << (TEMPORARY - 129)) | (1L << (TEXT - 129)) | (1L << (TIME - 129)) | (1L << (TIMESTAMP - 129)) | (1L << (TO - 129)) | (1L << (TRANSACTION - 129)) | (1L << (TRUE - 129)) | (1L << (TRY_CAST - 129)) | (1L << (TYPE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNBOUNDED - 193)) | (1L << (UNCOMMITTED - 193)) | (1L << (USE - 193)) | (1L << (USER - 193)) | (1L << (VALIDATE - 193)) | (1L << (VERBOSE - 193)) | (1L << (VIEW - 193)) | (1L << (WORK - 193)) | (1L << (WRITE - 193)) | (1L << (YEAR - 193)) | (1L << (ZONE - 193)) | (1L << (PLUS - 193)) | (1L << (MINUS - 193)) | (1L << (STRING - 193)) | (1L << (UNICODE_STRING - 193)) | (1L << (BINARY_LITERAL - 193)) | (1L << (INTEGER_VALUE - 193)) | (1L << (DECIMAL_VALUE - 193)) | (1L << (DOUBLE_VALUE - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (DIGIT_IDENTIFIER - 193)) | (1L << (QUOTED_IDENTIFIER - 193)) | (1L << (BACKQUOTED_IDENTIFIER - 193)) | (1L << (DOUBLE_PRECISION - 193)))) != 0)) {
					{
					State = 1356;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
					case 1:
						{
						State = 1355;
						setQuantifier();
						}
						break;
					}
					State = 1358;
					expression();
					State = 1363;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 1359;
						Match(T__3);
						State = 1360;
						expression();
						}
						}
						State = 1365;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 1368;
					Match(ORDER);
					State = 1369;
					Match(BY);
					State = 1370;
					sortItem();
					State = 1375;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 1371;
						Match(T__3);
						State = 1372;
						sortItem();
						}
						}
						State = 1377;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1380;
				Match(T__2);
				State = 1382;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
				case 1:
					{
					State = 1381;
					filter();
					}
					break;
				}
				State = 1388;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
				case 1:
					{
					State = 1385;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IGNORE || _la==RESPECT) {
						{
						State = 1384;
						nullTreatment();
						}
					}

					State = 1387;
					over();
					}
					break;
				}
				}
				break;
			case 15:
				{
				_localctx = new LambdaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1390;
				identifier();
				State = 1391;
				Match(T__5);
				State = 1392;
				expression();
				}
				break;
			case 16:
				{
				_localctx = new LambdaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1394;
				Match(T__1);
				State = 1403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ADMIN) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << BERNOULLI) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CURRENT) | (1L << CURRENT_ROLE) | (1L << DATA) | (1L << DATE) | (1L << DAY) | (1L << DEFINER) | (1L << DESC) | (1L << DETERMINISTIC) | (1L << DISTRIBUTED) | (1L << EXCLUDING))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXPLAIN - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)) | (1L << (JSON - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LAST - 64)) | (1L << (LATERAL - 64)) | (1L << (LEVEL - 64)) | (1L << (LIMIT - 64)) | (1L << (LOGICAL - 64)) | (1L << (MAP - 64)) | (1L << (MATERIALIZED - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (NAME - 64)) | (1L << (NFC - 64)) | (1L << (NFD - 64)) | (1L << (NFKC - 64)) | (1L << (NFKD - 64)) | (1L << (NO - 64)) | (1L << (NONE - 64)) | (1L << (NULLIF - 64)) | (1L << (NULLS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (ONLY - 129)) | (1L << (OPTION - 129)) | (1L << (ORDINALITY - 129)) | (1L << (OUTPUT - 129)) | (1L << (OVER - 129)) | (1L << (PARTITION - 129)) | (1L << (PARTITIONS - 129)) | (1L << (POSITION - 129)) | (1L << (PRECEDING - 129)) | (1L << (PRIVILEGES - 129)) | (1L << (PROPERTIES - 129)) | (1L << (RANGE - 129)) | (1L << (READ - 129)) | (1L << (RENAME - 129)) | (1L << (REPEATABLE - 129)) | (1L << (REPLACE - 129)) | (1L << (RESET - 129)) | (1L << (RESPECT - 129)) | (1L << (RESTRICT - 129)) | (1L << (RETURN - 129)) | (1L << (RETURNS - 129)) | (1L << (REVOKE - 129)) | (1L << (ROLE - 129)) | (1L << (ROLES - 129)) | (1L << (ROLLBACK - 129)) | (1L << (ROW - 129)) | (1L << (ROWS - 129)) | (1L << (SCHEMA - 129)) | (1L << (SCHEMAS - 129)) | (1L << (SECOND - 129)) | (1L << (SECURITY - 129)) | (1L << (SERIALIZABLE - 129)) | (1L << (SESSION - 129)) | (1L << (SET - 129)) | (1L << (SETS - 129)) | (1L << (SHOW - 129)) | (1L << (SOME - 129)) | (1L << (SQL - 129)) | (1L << (START - 129)) | (1L << (STATS - 129)) | (1L << (SUBSTRING - 129)) | (1L << (SYSTEM - 129)) | (1L << (TABLES - 129)) | (1L << (TABLESAMPLE - 129)) | (1L << (TEMPORARY - 129)) | (1L << (TEXT - 129)) | (1L << (TIME - 129)) | (1L << (TIMESTAMP - 129)) | (1L << (TO - 129)) | (1L << (TRANSACTION - 129)) | (1L << (TRY_CAST - 129)) | (1L << (TYPE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNBOUNDED - 193)) | (1L << (UNCOMMITTED - 193)) | (1L << (USE - 193)) | (1L << (USER - 193)) | (1L << (VALIDATE - 193)) | (1L << (VERBOSE - 193)) | (1L << (VIEW - 193)) | (1L << (WORK - 193)) | (1L << (WRITE - 193)) | (1L << (YEAR - 193)) | (1L << (ZONE - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (DIGIT_IDENTIFIER - 193)) | (1L << (QUOTED_IDENTIFIER - 193)) | (1L << (BACKQUOTED_IDENTIFIER - 193)))) != 0)) {
					{
					State = 1395;
					identifier();
					State = 1400;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 1396;
						Match(T__3);
						State = 1397;
						identifier();
						}
						}
						State = 1402;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1405;
				Match(T__2);
				State = 1406;
				Match(T__5);
				State = 1407;
				expression();
				}
				break;
			case 17:
				{
				_localctx = new SubqueryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1408;
				Match(T__1);
				State = 1409;
				query();
				State = 1410;
				Match(T__2);
				}
				break;
			case 18:
				{
				_localctx = new ExistsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1412;
				Match(EXISTS);
				State = 1413;
				Match(T__1);
				State = 1414;
				query();
				State = 1415;
				Match(T__2);
				}
				break;
			case 19:
				{
				_localctx = new SimpleCaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1417;
				Match(CASE);
				State = 1418;
				valueExpression(0);
				State = 1420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1419;
					whenClause();
					}
					}
					State = 1422;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 1426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 1424;
					Match(ELSE);
					State = 1425;
					((SimpleCaseContext)_localctx).elseExpression = expression();
					}
				}

				State = 1428;
				Match(END);
				}
				break;
			case 20:
				{
				_localctx = new SearchedCaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1430;
				Match(CASE);
				State = 1432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1431;
					whenClause();
					}
					}
					State = 1434;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 1438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 1436;
					Match(ELSE);
					State = 1437;
					((SearchedCaseContext)_localctx).elseExpression = expression();
					}
				}

				State = 1440;
				Match(END);
				}
				break;
			case 21:
				{
				_localctx = new CastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1442;
				Match(CAST);
				State = 1443;
				Match(T__1);
				State = 1444;
				expression();
				State = 1445;
				Match(AS);
				State = 1446;
				type(0);
				State = 1447;
				Match(T__2);
				}
				break;
			case 22:
				{
				_localctx = new CastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1449;
				Match(TRY_CAST);
				State = 1450;
				Match(T__1);
				State = 1451;
				expression();
				State = 1452;
				Match(AS);
				State = 1453;
				type(0);
				State = 1454;
				Match(T__2);
				}
				break;
			case 23:
				{
				_localctx = new ArrayConstructorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1456;
				Match(ARRAY);
				State = 1457;
				Match(T__6);
				State = 1466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << ADD) | (1L << ADMIN) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << BERNOULLI) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CURRENT) | (1L << CURRENT_DATE) | (1L << CURRENT_ROLE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA) | (1L << DATE) | (1L << DAY) | (1L << DEFINER) | (1L << DESC) | (1L << DETERMINISTIC) | (1L << DISTRIBUTED) | (1L << EXCLUDING) | (1L << EXISTS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXPLAIN - 64)) | (1L << (EXTRACT - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FALSE - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUPING - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)) | (1L << (JSON - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LAST - 64)) | (1L << (LATERAL - 64)) | (1L << (LEVEL - 64)) | (1L << (LIMIT - 64)) | (1L << (LOCALTIME - 64)) | (1L << (LOCALTIMESTAMP - 64)) | (1L << (LOGICAL - 64)) | (1L << (MAP - 64)) | (1L << (MATERIALIZED - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (NAME - 64)) | (1L << (NFC - 64)) | (1L << (NFD - 64)) | (1L << (NFKC - 64)) | (1L << (NFKD - 64)) | (1L << (NO - 64)) | (1L << (NONE - 64)) | (1L << (NORMALIZE - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (NULLIF - 64)) | (1L << (NULLS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (ONLY - 129)) | (1L << (OPTION - 129)) | (1L << (ORDINALITY - 129)) | (1L << (OUTPUT - 129)) | (1L << (OVER - 129)) | (1L << (PARTITION - 129)) | (1L << (PARTITIONS - 129)) | (1L << (POSITION - 129)) | (1L << (PRECEDING - 129)) | (1L << (PRIVILEGES - 129)) | (1L << (PROPERTIES - 129)) | (1L << (RANGE - 129)) | (1L << (READ - 129)) | (1L << (RENAME - 129)) | (1L << (REPEATABLE - 129)) | (1L << (REPLACE - 129)) | (1L << (RESET - 129)) | (1L << (RESPECT - 129)) | (1L << (RESTRICT - 129)) | (1L << (RETURN - 129)) | (1L << (RETURNS - 129)) | (1L << (REVOKE - 129)) | (1L << (ROLE - 129)) | (1L << (ROLES - 129)) | (1L << (ROLLBACK - 129)) | (1L << (ROW - 129)) | (1L << (ROWS - 129)) | (1L << (SCHEMA - 129)) | (1L << (SCHEMAS - 129)) | (1L << (SECOND - 129)) | (1L << (SECURITY - 129)) | (1L << (SERIALIZABLE - 129)) | (1L << (SESSION - 129)) | (1L << (SET - 129)) | (1L << (SETS - 129)) | (1L << (SHOW - 129)) | (1L << (SOME - 129)) | (1L << (SQL - 129)) | (1L << (START - 129)) | (1L << (STATS - 129)) | (1L << (SUBSTRING - 129)) | (1L << (SYSTEM - 129)) | (1L << (TABLES - 129)) | (1L << (TABLESAMPLE - 129)) | (1L << (TEMPORARY - 129)) | (1L << (TEXT - 129)) | (1L << (TIME - 129)) | (1L << (TIMESTAMP - 129)) | (1L << (TO - 129)) | (1L << (TRANSACTION - 129)) | (1L << (TRUE - 129)) | (1L << (TRY_CAST - 129)) | (1L << (TYPE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNBOUNDED - 193)) | (1L << (UNCOMMITTED - 193)) | (1L << (USE - 193)) | (1L << (USER - 193)) | (1L << (VALIDATE - 193)) | (1L << (VERBOSE - 193)) | (1L << (VIEW - 193)) | (1L << (WORK - 193)) | (1L << (WRITE - 193)) | (1L << (YEAR - 193)) | (1L << (ZONE - 193)) | (1L << (PLUS - 193)) | (1L << (MINUS - 193)) | (1L << (STRING - 193)) | (1L << (UNICODE_STRING - 193)) | (1L << (BINARY_LITERAL - 193)) | (1L << (INTEGER_VALUE - 193)) | (1L << (DECIMAL_VALUE - 193)) | (1L << (DOUBLE_VALUE - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (DIGIT_IDENTIFIER - 193)) | (1L << (QUOTED_IDENTIFIER - 193)) | (1L << (BACKQUOTED_IDENTIFIER - 193)) | (1L << (DOUBLE_PRECISION - 193)))) != 0)) {
					{
					State = 1458;
					expression();
					State = 1463;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 1459;
						Match(T__3);
						State = 1460;
						expression();
						}
						}
						State = 1465;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1468;
				Match(T__7);
				}
				break;
			case 24:
				{
				_localctx = new ColumnReferenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1469;
				identifier();
				}
				break;
			case 25:
				{
				_localctx = new SpecialDateTimeFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1470;
				((SpecialDateTimeFunctionContext)_localctx).name = Match(CURRENT_DATE);
				}
				break;
			case 26:
				{
				_localctx = new SpecialDateTimeFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1471;
				((SpecialDateTimeFunctionContext)_localctx).name = Match(CURRENT_TIME);
				State = 1475;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
				case 1:
					{
					State = 1472;
					Match(T__1);
					State = 1473;
					((SpecialDateTimeFunctionContext)_localctx).precision = Match(INTEGER_VALUE);
					State = 1474;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 27:
				{
				_localctx = new SpecialDateTimeFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1477;
				((SpecialDateTimeFunctionContext)_localctx).name = Match(CURRENT_TIMESTAMP);
				State = 1481;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
				case 1:
					{
					State = 1478;
					Match(T__1);
					State = 1479;
					((SpecialDateTimeFunctionContext)_localctx).precision = Match(INTEGER_VALUE);
					State = 1480;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 28:
				{
				_localctx = new SpecialDateTimeFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1483;
				((SpecialDateTimeFunctionContext)_localctx).name = Match(LOCALTIME);
				State = 1487;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
				case 1:
					{
					State = 1484;
					Match(T__1);
					State = 1485;
					((SpecialDateTimeFunctionContext)_localctx).precision = Match(INTEGER_VALUE);
					State = 1486;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 29:
				{
				_localctx = new SpecialDateTimeFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1489;
				((SpecialDateTimeFunctionContext)_localctx).name = Match(LOCALTIMESTAMP);
				State = 1493;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
				case 1:
					{
					State = 1490;
					Match(T__1);
					State = 1491;
					((SpecialDateTimeFunctionContext)_localctx).precision = Match(INTEGER_VALUE);
					State = 1492;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 30:
				{
				_localctx = new CurrentUserContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1495;
				((CurrentUserContext)_localctx).name = Match(CURRENT_USER);
				}
				break;
			case 31:
				{
				_localctx = new SubstringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1496;
				Match(SUBSTRING);
				State = 1497;
				Match(T__1);
				State = 1498;
				valueExpression(0);
				State = 1499;
				Match(FROM);
				State = 1500;
				valueExpression(0);
				State = 1503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 1501;
					Match(FOR);
					State = 1502;
					valueExpression(0);
					}
				}

				State = 1505;
				Match(T__2);
				}
				break;
			case 32:
				{
				_localctx = new NormalizeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1507;
				Match(NORMALIZE);
				State = 1508;
				Match(T__1);
				State = 1509;
				valueExpression(0);
				State = 1512;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 1510;
					Match(T__3);
					State = 1511;
					normalForm();
					}
				}

				State = 1514;
				Match(T__2);
				}
				break;
			case 33:
				{
				_localctx = new ExtractContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1516;
				Match(EXTRACT);
				State = 1517;
				Match(T__1);
				State = 1518;
				identifier();
				State = 1519;
				Match(FROM);
				State = 1520;
				valueExpression(0);
				State = 1521;
				Match(T__2);
				}
				break;
			case 34:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1523;
				Match(T__1);
				State = 1524;
				expression();
				State = 1525;
				Match(T__2);
				}
				break;
			case 35:
				{
				_localctx = new GroupingOperationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1527;
				Match(GROUPING);
				State = 1528;
				Match(T__1);
				State = 1537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ADMIN) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << BERNOULLI) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CURRENT) | (1L << CURRENT_ROLE) | (1L << DATA) | (1L << DATE) | (1L << DAY) | (1L << DEFINER) | (1L << DESC) | (1L << DETERMINISTIC) | (1L << DISTRIBUTED) | (1L << EXCLUDING))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXPLAIN - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)) | (1L << (JSON - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LAST - 64)) | (1L << (LATERAL - 64)) | (1L << (LEVEL - 64)) | (1L << (LIMIT - 64)) | (1L << (LOGICAL - 64)) | (1L << (MAP - 64)) | (1L << (MATERIALIZED - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (NAME - 64)) | (1L << (NFC - 64)) | (1L << (NFD - 64)) | (1L << (NFKC - 64)) | (1L << (NFKD - 64)) | (1L << (NO - 64)) | (1L << (NONE - 64)) | (1L << (NULLIF - 64)) | (1L << (NULLS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (ONLY - 129)) | (1L << (OPTION - 129)) | (1L << (ORDINALITY - 129)) | (1L << (OUTPUT - 129)) | (1L << (OVER - 129)) | (1L << (PARTITION - 129)) | (1L << (PARTITIONS - 129)) | (1L << (POSITION - 129)) | (1L << (PRECEDING - 129)) | (1L << (PRIVILEGES - 129)) | (1L << (PROPERTIES - 129)) | (1L << (RANGE - 129)) | (1L << (READ - 129)) | (1L << (RENAME - 129)) | (1L << (REPEATABLE - 129)) | (1L << (REPLACE - 129)) | (1L << (RESET - 129)) | (1L << (RESPECT - 129)) | (1L << (RESTRICT - 129)) | (1L << (RETURN - 129)) | (1L << (RETURNS - 129)) | (1L << (REVOKE - 129)) | (1L << (ROLE - 129)) | (1L << (ROLES - 129)) | (1L << (ROLLBACK - 129)) | (1L << (ROW - 129)) | (1L << (ROWS - 129)) | (1L << (SCHEMA - 129)) | (1L << (SCHEMAS - 129)) | (1L << (SECOND - 129)) | (1L << (SECURITY - 129)) | (1L << (SERIALIZABLE - 129)) | (1L << (SESSION - 129)) | (1L << (SET - 129)) | (1L << (SETS - 129)) | (1L << (SHOW - 129)) | (1L << (SOME - 129)) | (1L << (SQL - 129)) | (1L << (START - 129)) | (1L << (STATS - 129)) | (1L << (SUBSTRING - 129)) | (1L << (SYSTEM - 129)) | (1L << (TABLES - 129)) | (1L << (TABLESAMPLE - 129)) | (1L << (TEMPORARY - 129)) | (1L << (TEXT - 129)) | (1L << (TIME - 129)) | (1L << (TIMESTAMP - 129)) | (1L << (TO - 129)) | (1L << (TRANSACTION - 129)) | (1L << (TRY_CAST - 129)) | (1L << (TYPE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNBOUNDED - 193)) | (1L << (UNCOMMITTED - 193)) | (1L << (USE - 193)) | (1L << (USER - 193)) | (1L << (VALIDATE - 193)) | (1L << (VERBOSE - 193)) | (1L << (VIEW - 193)) | (1L << (WORK - 193)) | (1L << (WRITE - 193)) | (1L << (YEAR - 193)) | (1L << (ZONE - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (DIGIT_IDENTIFIER - 193)) | (1L << (QUOTED_IDENTIFIER - 193)) | (1L << (BACKQUOTED_IDENTIFIER - 193)))) != 0)) {
					{
					State = 1529;
					qualifiedName();
					State = 1534;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 1530;
						Match(T__3);
						State = 1531;
						qualifiedName();
						}
						}
						State = 1536;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1539;
				Match(T__2);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1552;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1550;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
					case 1:
						{
						_localctx = new SubscriptContext(new PrimaryExpressionContext(_parentctx, _parentState));
						((SubscriptContext)_localctx).value = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 1542;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1543;
						Match(T__6);
						State = 1544;
						((SubscriptContext)_localctx).index = valueExpression(0);
						State = 1545;
						Match(T__7);
						}
						break;
					case 2:
						{
						_localctx = new DereferenceContext(new PrimaryExpressionContext(_parentctx, _parentState));
						((DereferenceContext)_localctx).base = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 1547;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1548;
						Match(T__0);
						State = 1549;
						((DereferenceContext)_localctx).fieldName = identifier();
						}
						break;
					}
					} 
				}
				State = 1554;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
	 
		public StringContext() { }
		public virtual void CopyFrom(StringContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnicodeStringLiteralContext : StringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNICODE_STRING() { return GetToken(SqlBaseParser.UNICODE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UESCAPE() { return GetToken(SqlBaseParser.UESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SqlBaseParser.STRING, 0); }
		public UnicodeStringLiteralContext(StringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnicodeStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BasicStringLiteralContext : StringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SqlBaseParser.STRING, 0); }
		public BasicStringLiteralContext(StringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 94, RULE_string);
		try {
			State = 1561;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				_localctx = new BasicStringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1555;
				Match(STRING);
				}
				break;
			case UNICODE_STRING:
				_localctx = new UnicodeStringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1556;
				Match(UNICODE_STRING);
				State = 1559;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
				case 1:
					{
					State = 1557;
					Match(UESCAPE);
					State = 1558;
					Match(STRING);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullTreatmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(SqlBaseParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(SqlBaseParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT() { return GetToken(SqlBaseParser.RESPECT, 0); }
		public NullTreatmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullTreatment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullTreatment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullTreatmentContext nullTreatment() {
		NullTreatmentContext _localctx = new NullTreatmentContext(Context, State);
		EnterRule(_localctx, 96, RULE_nullTreatment);
		try {
			State = 1567;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IGNORE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1563;
				Match(IGNORE);
				State = 1564;
				Match(NULLS);
				}
				break;
			case RESPECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1565;
				Match(RESPECT);
				State = 1566;
				Match(NULLS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeZoneSpecifierContext : ParserRuleContext {
		public TimeZoneSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeZoneSpecifier; } }
	 
		public TimeZoneSpecifierContext() { }
		public virtual void CopyFrom(TimeZoneSpecifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TimeZoneIntervalContext : TimeZoneSpecifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(SqlBaseParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(SqlBaseParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public TimeZoneIntervalContext(TimeZoneSpecifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeZoneInterval(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimeZoneStringContext : TimeZoneSpecifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(SqlBaseParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(SqlBaseParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public TimeZoneStringContext(TimeZoneSpecifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeZoneString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeZoneSpecifierContext timeZoneSpecifier() {
		TimeZoneSpecifierContext _localctx = new TimeZoneSpecifierContext(Context, State);
		EnterRule(_localctx, 98, RULE_timeZoneSpecifier);
		try {
			State = 1575;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,204,Context) ) {
			case 1:
				_localctx = new TimeZoneIntervalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1569;
				Match(TIME);
				State = 1570;
				Match(ZONE);
				State = 1571;
				interval();
				}
				break;
			case 2:
				_localctx = new TimeZoneStringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1572;
				Match(TIME);
				State = 1573;
				Match(ZONE);
				State = 1574;
				@string();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(SqlBaseParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(SqlBaseParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SqlBaseParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(SqlBaseParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SqlBaseParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(SqlBaseParser.GTE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 100, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1577;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (EQ - 211)) | (1L << (NEQ - 211)) | (1L << (LT - 211)) | (1L << (LTE - 211)) | (1L << (GT - 211)) | (1L << (GTE - 211)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonQuantifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SqlBaseParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(SqlBaseParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(SqlBaseParser.ANY, 0); }
		public ComparisonQuantifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonQuantifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonQuantifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonQuantifierContext comparisonQuantifier() {
		ComparisonQuantifierContext _localctx = new ComparisonQuantifierContext(Context, State);
		EnterRule(_localctx, 102, RULE_comparisonQuantifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1579;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SqlBaseParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SqlBaseParser.FALSE, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanValueContext booleanValue() {
		BooleanValueContext _localctx = new BooleanValueContext(Context, State);
		EnterRule(_localctx, 104, RULE_booleanValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalContext : ParserRuleContext {
		public IToken sign;
		public IntervalFieldContext from;
		public IntervalFieldContext to;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(SqlBaseParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalFieldContext[] intervalField() {
			return GetRuleContexts<IntervalFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalFieldContext intervalField(int i) {
			return GetRuleContext<IntervalFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SqlBaseParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SqlBaseParser.MINUS, 0); }
		public IntervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalContext interval() {
		IntervalContext _localctx = new IntervalContext(Context, State);
		EnterRule(_localctx, 106, RULE_interval);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1583;
			Match(INTERVAL);
			State = 1585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 1584;
				_localctx.sign = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.sign = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1587;
			@string();
			State = 1588;
			_localctx.from = intervalField();
			State = 1591;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				{
				State = 1589;
				Match(TO);
				State = 1590;
				_localctx.to = intervalField();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(SqlBaseParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(SqlBaseParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(SqlBaseParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(SqlBaseParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(SqlBaseParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(SqlBaseParser.SECOND, 0); }
		public IntervalFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalFieldContext intervalField() {
		IntervalFieldContext _localctx = new IntervalFieldContext(Context, State);
		EnterRule(_localctx, 108, RULE_intervalField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1593;
			_la = TokenStream.LA(1);
			if ( !(_la==DAY || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (HOUR - 84)) | (1L << (MINUTE - 84)) | (1L << (MONTH - 84)))) != 0) || _la==SECOND || _la==YEAR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalFormContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFD() { return GetToken(SqlBaseParser.NFD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFC() { return GetToken(SqlBaseParser.NFC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKD() { return GetToken(SqlBaseParser.NFKD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKC() { return GetToken(SqlBaseParser.NFKC, 0); }
		public NormalFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalForm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalFormContext normalForm() {
		NormalFormContext _localctx = new NormalFormContext(Context, State);
		EnterRule(_localctx, 110, RULE_normalForm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1595;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (NFC - 117)) | (1L << (NFD - 117)) | (1L << (NFKC - 117)) | (1L << (NFKD - 117)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_types; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypesContext types() {
		TypesContext _localctx = new TypesContext(Context, State);
		EnterRule(_localctx, 112, RULE_types);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1597;
			Match(T__1);
			State = 1606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ADMIN) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << BERNOULLI) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CURRENT) | (1L << CURRENT_ROLE) | (1L << DATA) | (1L << DATE) | (1L << DAY) | (1L << DEFINER) | (1L << DESC) | (1L << DETERMINISTIC) | (1L << DISTRIBUTED) | (1L << EXCLUDING))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXPLAIN - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)) | (1L << (JSON - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LAST - 64)) | (1L << (LATERAL - 64)) | (1L << (LEVEL - 64)) | (1L << (LIMIT - 64)) | (1L << (LOGICAL - 64)) | (1L << (MAP - 64)) | (1L << (MATERIALIZED - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (NAME - 64)) | (1L << (NFC - 64)) | (1L << (NFD - 64)) | (1L << (NFKC - 64)) | (1L << (NFKD - 64)) | (1L << (NO - 64)) | (1L << (NONE - 64)) | (1L << (NULLIF - 64)) | (1L << (NULLS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (ONLY - 129)) | (1L << (OPTION - 129)) | (1L << (ORDINALITY - 129)) | (1L << (OUTPUT - 129)) | (1L << (OVER - 129)) | (1L << (PARTITION - 129)) | (1L << (PARTITIONS - 129)) | (1L << (POSITION - 129)) | (1L << (PRECEDING - 129)) | (1L << (PRIVILEGES - 129)) | (1L << (PROPERTIES - 129)) | (1L << (RANGE - 129)) | (1L << (READ - 129)) | (1L << (RENAME - 129)) | (1L << (REPEATABLE - 129)) | (1L << (REPLACE - 129)) | (1L << (RESET - 129)) | (1L << (RESPECT - 129)) | (1L << (RESTRICT - 129)) | (1L << (RETURN - 129)) | (1L << (RETURNS - 129)) | (1L << (REVOKE - 129)) | (1L << (ROLE - 129)) | (1L << (ROLES - 129)) | (1L << (ROLLBACK - 129)) | (1L << (ROW - 129)) | (1L << (ROWS - 129)) | (1L << (SCHEMA - 129)) | (1L << (SCHEMAS - 129)) | (1L << (SECOND - 129)) | (1L << (SECURITY - 129)) | (1L << (SERIALIZABLE - 129)) | (1L << (SESSION - 129)) | (1L << (SET - 129)) | (1L << (SETS - 129)) | (1L << (SHOW - 129)) | (1L << (SOME - 129)) | (1L << (SQL - 129)) | (1L << (START - 129)) | (1L << (STATS - 129)) | (1L << (SUBSTRING - 129)) | (1L << (SYSTEM - 129)) | (1L << (TABLES - 129)) | (1L << (TABLESAMPLE - 129)) | (1L << (TEMPORARY - 129)) | (1L << (TEXT - 129)) | (1L << (TIME - 129)) | (1L << (TIMESTAMP - 129)) | (1L << (TO - 129)) | (1L << (TRANSACTION - 129)) | (1L << (TRY_CAST - 129)) | (1L << (TYPE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNBOUNDED - 193)) | (1L << (UNCOMMITTED - 193)) | (1L << (USE - 193)) | (1L << (USER - 193)) | (1L << (VALIDATE - 193)) | (1L << (VERBOSE - 193)) | (1L << (VIEW - 193)) | (1L << (WORK - 193)) | (1L << (WRITE - 193)) | (1L << (YEAR - 193)) | (1L << (ZONE - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (DIGIT_IDENTIFIER - 193)) | (1L << (QUOTED_IDENTIFIER - 193)) | (1L << (BACKQUOTED_IDENTIFIER - 193)) | (1L << (TIME_WITH_TIME_ZONE - 193)) | (1L << (TIMESTAMP_WITH_TIME_ZONE - 193)) | (1L << (DOUBLE_PRECISION - 193)))) != 0)) {
				{
				State = 1598;
				type(0);
				State = 1603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1599;
					Match(T__3);
					State = 1600;
					type(0);
					}
					}
					State = 1605;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1608;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IntervalFieldContext from;
		public IntervalFieldContext to;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SqlBaseParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SqlBaseParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SqlBaseParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(SqlBaseParser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(SqlBaseParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(SqlBaseParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalFieldContext[] intervalField() {
			return GetRuleContexts<IntervalFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalFieldContext intervalField(int i) {
			return GetRuleContext<IntervalFieldContext>(i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 114;
		EnterRecursionRule(_localctx, 114, RULE_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1657;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
			case 1:
				{
				State = 1611;
				Match(ARRAY);
				State = 1612;
				Match(LT);
				State = 1613;
				type(0);
				State = 1614;
				Match(GT);
				}
				break;
			case 2:
				{
				State = 1616;
				Match(MAP);
				State = 1617;
				Match(LT);
				State = 1618;
				type(0);
				State = 1619;
				Match(T__3);
				State = 1620;
				type(0);
				State = 1621;
				Match(GT);
				}
				break;
			case 3:
				{
				State = 1623;
				Match(ROW);
				State = 1624;
				Match(T__1);
				State = 1625;
				identifier();
				State = 1626;
				type(0);
				State = 1633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1627;
					Match(T__3);
					State = 1628;
					identifier();
					State = 1629;
					type(0);
					}
					}
					State = 1635;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1636;
				Match(T__2);
				}
				break;
			case 4:
				{
				State = 1638;
				baseType();
				State = 1650;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
				case 1:
					{
					State = 1639;
					Match(T__1);
					State = 1640;
					typeParameter();
					State = 1645;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 1641;
						Match(T__3);
						State = 1642;
						typeParameter();
						}
						}
						State = 1647;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1648;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 5:
				{
				State = 1652;
				Match(INTERVAL);
				State = 1653;
				_localctx.from = intervalField();
				State = 1654;
				Match(TO);
				State = 1655;
				_localctx.to = intervalField();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1663;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,213,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_type);
					State = 1659;
					if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
					State = 1660;
					Match(ARRAY);
					}
					} 
				}
				State = 1665;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,213,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(SqlBaseParser.INTEGER_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 116, RULE_typeParameter);
		try {
			State = 1668;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1666;
				Match(INTEGER_VALUE);
				}
				break;
			case ADD:
			case ADMIN:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASC:
			case AT:
			case BERNOULLI:
			case CALL:
			case CALLED:
			case CASCADE:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CURRENT:
			case CURRENT_ROLE:
			case DATA:
			case DATE:
			case DAY:
			case DEFINER:
			case DESC:
			case DETERMINISTIC:
			case DISTRIBUTED:
			case EXCLUDING:
			case EXPLAIN:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORMAT:
			case FUNCTION:
			case FUNCTIONS:
			case GRANT:
			case GRANTED:
			case GRANTS:
			case GRAPHVIZ:
			case HOUR:
			case IF:
			case IGNORE:
			case INCLUDING:
			case INPUT:
			case INTERVAL:
			case INVOKER:
			case IO:
			case ISOLATION:
			case JSON:
			case LANGUAGE:
			case LAST:
			case LATERAL:
			case LEVEL:
			case LIMIT:
			case LOGICAL:
			case MAP:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case NAME:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NONE:
			case NULLIF:
			case NULLS:
			case ONLY:
			case OPTION:
			case ORDINALITY:
			case OUTPUT:
			case OVER:
			case PARTITION:
			case PARTITIONS:
			case POSITION:
			case PRECEDING:
			case PRIVILEGES:
			case PROPERTIES:
			case RANGE:
			case READ:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESPECT:
			case RESTRICT:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLES:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SECURITY:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case SQL:
			case START:
			case STATS:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEMPORARY:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRANSACTION:
			case TRY_CAST:
			case TYPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case USE:
			case USER:
			case VALIDATE:
			case VERBOSE:
			case VIEW:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case IDENTIFIER:
			case DIGIT_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
			case TIME_WITH_TIME_ZONE:
			case TIMESTAMP_WITH_TIME_ZONE:
			case DOUBLE_PRECISION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1667;
				type(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_WITH_TIME_ZONE() { return GetToken(SqlBaseParser.TIME_WITH_TIME_ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_WITH_TIME_ZONE() { return GetToken(SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_PRECISION() { return GetToken(SqlBaseParser.DOUBLE_PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(Context, State);
		EnterRule(_localctx, 118, RULE_baseType);
		try {
			State = 1674;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TIME_WITH_TIME_ZONE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1670;
				Match(TIME_WITH_TIME_ZONE);
				}
				break;
			case TIMESTAMP_WITH_TIME_ZONE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1671;
				Match(TIMESTAMP_WITH_TIME_ZONE);
				}
				break;
			case DOUBLE_PRECISION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1672;
				Match(DOUBLE_PRECISION);
				}
				break;
			case ADD:
			case ADMIN:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASC:
			case AT:
			case BERNOULLI:
			case CALL:
			case CALLED:
			case CASCADE:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CURRENT:
			case CURRENT_ROLE:
			case DATA:
			case DATE:
			case DAY:
			case DEFINER:
			case DESC:
			case DETERMINISTIC:
			case DISTRIBUTED:
			case EXCLUDING:
			case EXPLAIN:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORMAT:
			case FUNCTION:
			case FUNCTIONS:
			case GRANT:
			case GRANTED:
			case GRANTS:
			case GRAPHVIZ:
			case HOUR:
			case IF:
			case IGNORE:
			case INCLUDING:
			case INPUT:
			case INTERVAL:
			case INVOKER:
			case IO:
			case ISOLATION:
			case JSON:
			case LANGUAGE:
			case LAST:
			case LATERAL:
			case LEVEL:
			case LIMIT:
			case LOGICAL:
			case MAP:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case NAME:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NONE:
			case NULLIF:
			case NULLS:
			case ONLY:
			case OPTION:
			case ORDINALITY:
			case OUTPUT:
			case OVER:
			case PARTITION:
			case PARTITIONS:
			case POSITION:
			case PRECEDING:
			case PRIVILEGES:
			case PROPERTIES:
			case RANGE:
			case READ:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESPECT:
			case RESTRICT:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLES:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SECURITY:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case SQL:
			case START:
			case STATS:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEMPORARY:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRANSACTION:
			case TRY_CAST:
			case TYPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case USE:
			case USER:
			case VALIDATE:
			case VERBOSE:
			case VIEW:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case IDENTIFIER:
			case DIGIT_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1673;
				qualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenClauseContext : ParserRuleContext {
		public ExpressionContext condition;
		public ExpressionContext result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(SqlBaseParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SqlBaseParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public WhenClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenClauseContext whenClause() {
		WhenClauseContext _localctx = new WhenClauseContext(Context, State);
		EnterRule(_localctx, 120, RULE_whenClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1676;
			Match(WHEN);
			State = 1677;
			_localctx.condition = expression();
			State = 1678;
			Match(THEN);
			State = 1679;
			_localctx.result = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(SqlBaseParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SqlBaseParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 122, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1681;
			Match(FILTER);
			State = 1682;
			Match(T__1);
			State = 1683;
			Match(WHERE);
			State = 1684;
			booleanExpression(0);
			State = 1685;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _partition = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(SqlBaseParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(SqlBaseParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(SqlBaseParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(SqlBaseParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(SqlBaseParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext[] sortItem() {
			return GetRuleContexts<SortItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext sortItem(int i) {
			return GetRuleContext<SortItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameContext windowFrame() {
			return GetRuleContext<WindowFrameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverContext over() {
		OverContext _localctx = new OverContext(Context, State);
		EnterRule(_localctx, 124, RULE_over);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1687;
			Match(OVER);
			State = 1688;
			Match(T__1);
			State = 1699;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 1689;
				Match(PARTITION);
				State = 1690;
				Match(BY);
				State = 1691;
				_localctx._expression = expression();
				_localctx._partition.Add(_localctx._expression);
				State = 1696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1692;
					Match(T__3);
					State = 1693;
					_localctx._expression = expression();
					_localctx._partition.Add(_localctx._expression);
					}
					}
					State = 1698;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1711;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 1701;
				Match(ORDER);
				State = 1702;
				Match(BY);
				State = 1703;
				sortItem();
				State = 1708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 1704;
					Match(T__3);
					State = 1705;
					sortItem();
					}
					}
					State = 1710;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1714;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				State = 1713;
				windowFrame();
				}
			}

			State = 1716;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameContext : ParserRuleContext {
		public IToken frameType;
		public FrameBoundContext start;
		public FrameBoundContext end;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(SqlBaseParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FrameBoundContext[] frameBound() {
			return GetRuleContexts<FrameBoundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameBoundContext frameBound(int i) {
			return GetRuleContext<FrameBoundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(SqlBaseParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(SqlBaseParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SqlBaseParser.AND, 0); }
		public WindowFrameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrame; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFrame(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameContext windowFrame() {
		WindowFrameContext _localctx = new WindowFrameContext(Context, State);
		EnterRule(_localctx, 126, RULE_windowFrame);
		try {
			State = 1734;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1718;
				_localctx.frameType = Match(RANGE);
				State = 1719;
				_localctx.start = frameBound();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1720;
				_localctx.frameType = Match(ROWS);
				State = 1721;
				_localctx.start = frameBound();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1722;
				_localctx.frameType = Match(RANGE);
				State = 1723;
				Match(BETWEEN);
				State = 1724;
				_localctx.start = frameBound();
				State = 1725;
				Match(AND);
				State = 1726;
				_localctx.end = frameBound();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1728;
				_localctx.frameType = Match(ROWS);
				State = 1729;
				Match(BETWEEN);
				State = 1730;
				_localctx.start = frameBound();
				State = 1731;
				Match(AND);
				State = 1732;
				_localctx.end = frameBound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameBoundContext : ParserRuleContext {
		public FrameBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameBound; } }
	 
		public FrameBoundContext() { }
		public virtual void CopyFrom(FrameBoundContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoundedFrameContext : FrameBoundContext {
		public IToken boundType;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(SqlBaseParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(SqlBaseParser.FOLLOWING, 0); }
		public BoundedFrameContext(FrameBoundContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoundedFrame(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnboundedFrameContext : FrameBoundContext {
		public IToken boundType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(SqlBaseParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(SqlBaseParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(SqlBaseParser.FOLLOWING, 0); }
		public UnboundedFrameContext(FrameBoundContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnboundedFrame(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurrentRowBoundContext : FrameBoundContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(SqlBaseParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(SqlBaseParser.ROW, 0); }
		public CurrentRowBoundContext(FrameBoundContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentRowBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameBoundContext frameBound() {
		FrameBoundContext _localctx = new FrameBoundContext(Context, State);
		EnterRule(_localctx, 128, RULE_frameBound);
		int _la;
		try {
			State = 1745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,222,Context) ) {
			case 1:
				_localctx = new UnboundedFrameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1736;
				Match(UNBOUNDED);
				State = 1737;
				((UnboundedFrameContext)_localctx).boundType = Match(PRECEDING);
				}
				break;
			case 2:
				_localctx = new UnboundedFrameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1738;
				Match(UNBOUNDED);
				State = 1739;
				((UnboundedFrameContext)_localctx).boundType = Match(FOLLOWING);
				}
				break;
			case 3:
				_localctx = new CurrentRowBoundContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1740;
				Match(CURRENT);
				State = 1741;
				Match(ROW);
				}
				break;
			case 4:
				_localctx = new BoundedFrameContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1742;
				expression();
				State = 1743;
				((BoundedFrameContext)_localctx).boundType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
					((BoundedFrameContext)_localctx).boundType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainOptionContext : ParserRuleContext {
		public ExplainOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainOption; } }
	 
		public ExplainOptionContext() { }
		public virtual void CopyFrom(ExplainOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExplainFormatContext : ExplainOptionContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(SqlBaseParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(SqlBaseParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAPHVIZ() { return GetToken(SqlBaseParser.GRAPHVIZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(SqlBaseParser.JSON, 0); }
		public ExplainFormatContext(ExplainOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplainFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExplainTypeContext : ExplainOptionContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(SqlBaseParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL() { return GetToken(SqlBaseParser.LOGICAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTRIBUTED() { return GetToken(SqlBaseParser.DISTRIBUTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE() { return GetToken(SqlBaseParser.VALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO() { return GetToken(SqlBaseParser.IO, 0); }
		public ExplainTypeContext(ExplainOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplainType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplainOptionContext explainOption() {
		ExplainOptionContext _localctx = new ExplainOptionContext(Context, State);
		EnterRule(_localctx, 130, RULE_explainOption);
		int _la;
		try {
			State = 1751;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORMAT:
				_localctx = new ExplainFormatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1747;
				Match(FORMAT);
				State = 1748;
				((ExplainFormatContext)_localctx).value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==GRAPHVIZ || _la==JSON || _la==TEXT) ) {
					((ExplainFormatContext)_localctx).value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TYPE:
				_localctx = new ExplainTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1749;
				Match(TYPE);
				State = 1750;
				((ExplainTypeContext)_localctx).value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (DISTRIBUTED - 55)) | (1L << (IO - 55)) | (1L << (LOGICAL - 55)))) != 0) || _la==VALIDATE) ) {
					((ExplainTypeContext)_localctx).value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionModeContext : ParserRuleContext {
		public TransactionModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionMode; } }
	 
		public TransactionModeContext() { }
		public virtual void CopyFrom(TransactionModeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TransactionAccessModeContext : TransactionModeContext {
		public IToken accessMode;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(SqlBaseParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(SqlBaseParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(SqlBaseParser.WRITE, 0); }
		public TransactionAccessModeContext(TransactionModeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionAccessMode(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsolationLevelContext : TransactionModeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(SqlBaseParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(SqlBaseParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevelOfIsolationContext levelOfIsolation() {
			return GetRuleContext<LevelOfIsolationContext>(0);
		}
		public IsolationLevelContext(TransactionModeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsolationLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionModeContext transactionMode() {
		TransactionModeContext _localctx = new TransactionModeContext(Context, State);
		EnterRule(_localctx, 132, RULE_transactionMode);
		int _la;
		try {
			State = 1758;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ISOLATION:
				_localctx = new IsolationLevelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1753;
				Match(ISOLATION);
				State = 1754;
				Match(LEVEL);
				State = 1755;
				levelOfIsolation();
				}
				break;
			case READ:
				_localctx = new TransactionAccessModeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1756;
				Match(READ);
				State = 1757;
				((TransactionAccessModeContext)_localctx).accessMode = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
					((TransactionAccessModeContext)_localctx).accessMode = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelOfIsolationContext : ParserRuleContext {
		public LevelOfIsolationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelOfIsolation; } }
	 
		public LevelOfIsolationContext() { }
		public virtual void CopyFrom(LevelOfIsolationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ReadUncommittedContext : LevelOfIsolationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(SqlBaseParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(SqlBaseParser.UNCOMMITTED, 0); }
		public ReadUncommittedContext(LevelOfIsolationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadUncommitted(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SerializableContext : LevelOfIsolationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(SqlBaseParser.SERIALIZABLE, 0); }
		public SerializableContext(LevelOfIsolationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSerializable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadCommittedContext : LevelOfIsolationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(SqlBaseParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(SqlBaseParser.COMMITTED, 0); }
		public ReadCommittedContext(LevelOfIsolationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadCommitted(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RepeatableReadContext : LevelOfIsolationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(SqlBaseParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(SqlBaseParser.READ, 0); }
		public RepeatableReadContext(LevelOfIsolationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatableRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelOfIsolationContext levelOfIsolation() {
		LevelOfIsolationContext _localctx = new LevelOfIsolationContext(Context, State);
		EnterRule(_localctx, 134, RULE_levelOfIsolation);
		try {
			State = 1767;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
			case 1:
				_localctx = new ReadUncommittedContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1760;
				Match(READ);
				State = 1761;
				Match(UNCOMMITTED);
				}
				break;
			case 2:
				_localctx = new ReadCommittedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1762;
				Match(READ);
				State = 1763;
				Match(COMMITTED);
				}
				break;
			case 3:
				_localctx = new RepeatableReadContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1764;
				Match(REPEATABLE);
				State = 1765;
				Match(READ);
				}
				break;
			case 4:
				_localctx = new SerializableContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1766;
				Match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallArgumentContext : ParserRuleContext {
		public CallArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callArgument; } }
	 
		public CallArgumentContext() { }
		public virtual void CopyFrom(CallArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PositionalArgumentContext : CallArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PositionalArgumentContext(CallArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionalArgument(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamedArgumentContext : CallArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NamedArgumentContext(CallArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallArgumentContext callArgument() {
		CallArgumentContext _localctx = new CallArgumentContext(Context, State);
		EnterRule(_localctx, 136, RULE_callArgument);
		try {
			State = 1774;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,226,Context) ) {
			case 1:
				_localctx = new PositionalArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1769;
				expression();
				}
				break;
			case 2:
				_localctx = new NamedArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1770;
				identifier();
				State = 1771;
				Match(T__8);
				State = 1772;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(SqlBaseParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(SqlBaseParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(SqlBaseParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PrivilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivilege(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeContext privilege() {
		PrivilegeContext _localctx = new PrivilegeContext(Context, State);
		EnterRule(_localctx, 138, RULE_privilege);
		try {
			State = 1780;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1776;
				Match(SELECT);
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1777;
				Match(DELETE);
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1778;
				Match(INSERT);
				}
				break;
			case ADD:
			case ADMIN:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASC:
			case AT:
			case BERNOULLI:
			case CALL:
			case CALLED:
			case CASCADE:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CURRENT:
			case CURRENT_ROLE:
			case DATA:
			case DATE:
			case DAY:
			case DEFINER:
			case DESC:
			case DETERMINISTIC:
			case DISTRIBUTED:
			case EXCLUDING:
			case EXPLAIN:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORMAT:
			case FUNCTION:
			case FUNCTIONS:
			case GRANT:
			case GRANTED:
			case GRANTS:
			case GRAPHVIZ:
			case HOUR:
			case IF:
			case IGNORE:
			case INCLUDING:
			case INPUT:
			case INTERVAL:
			case INVOKER:
			case IO:
			case ISOLATION:
			case JSON:
			case LANGUAGE:
			case LAST:
			case LATERAL:
			case LEVEL:
			case LIMIT:
			case LOGICAL:
			case MAP:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case NAME:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NONE:
			case NULLIF:
			case NULLS:
			case ONLY:
			case OPTION:
			case ORDINALITY:
			case OUTPUT:
			case OVER:
			case PARTITION:
			case PARTITIONS:
			case POSITION:
			case PRECEDING:
			case PRIVILEGES:
			case PROPERTIES:
			case RANGE:
			case READ:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESPECT:
			case RESTRICT:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLES:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SECURITY:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case SQL:
			case START:
			case STATS:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEMPORARY:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRANSACTION:
			case TRY_CAST:
			case TYPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case USE:
			case USER:
			case VALIDATE:
			case VERBOSE:
			case VIEW:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case IDENTIFIER:
			case DIGIT_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1779;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 140, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1782;
			identifier();
			State = 1787;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,228,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1783;
					Match(T__0);
					State = 1784;
					identifier();
					}
					} 
				}
				State = 1789;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,228,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantorContext : ParserRuleContext {
		public GrantorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantor; } }
	 
		public GrantorContext() { }
		public virtual void CopyFrom(GrantorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CurrentUserGrantorContext : GrantorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(SqlBaseParser.CURRENT_USER, 0); }
		public CurrentUserGrantorContext(GrantorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentUserGrantor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SpecifiedPrincipalContext : GrantorContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext principal() {
			return GetRuleContext<PrincipalContext>(0);
		}
		public SpecifiedPrincipalContext(GrantorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecifiedPrincipal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurrentRoleGrantorContext : GrantorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ROLE() { return GetToken(SqlBaseParser.CURRENT_ROLE, 0); }
		public CurrentRoleGrantorContext(GrantorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentRoleGrantor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantorContext grantor() {
		GrantorContext _localctx = new GrantorContext(Context, State);
		EnterRule(_localctx, 142, RULE_grantor);
		try {
			State = 1793;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,229,Context) ) {
			case 1:
				_localctx = new CurrentUserGrantorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1790;
				Match(CURRENT_USER);
				}
				break;
			case 2:
				_localctx = new CurrentRoleGrantorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1791;
				Match(CURRENT_ROLE);
				}
				break;
			case 3:
				_localctx = new SpecifiedPrincipalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1792;
				principal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrincipalContext : ParserRuleContext {
		public PrincipalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_principal; } }
	 
		public PrincipalContext() { }
		public virtual void CopyFrom(PrincipalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnspecifiedPrincipalContext : PrincipalContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UnspecifiedPrincipalContext(PrincipalContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnspecifiedPrincipal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UserPrincipalContext : PrincipalContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(SqlBaseParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UserPrincipalContext(PrincipalContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserPrincipal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RolePrincipalContext : PrincipalContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(SqlBaseParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RolePrincipalContext(PrincipalContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRolePrincipal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrincipalContext principal() {
		PrincipalContext _localctx = new PrincipalContext(Context, State);
		EnterRule(_localctx, 144, RULE_principal);
		try {
			State = 1800;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
			case 1:
				_localctx = new UserPrincipalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1795;
				Match(USER);
				State = 1796;
				identifier();
				}
				break;
			case 2:
				_localctx = new RolePrincipalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1797;
				Match(ROLE);
				State = 1798;
				identifier();
				}
				break;
			case 3:
				_localctx = new UnspecifiedPrincipalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1799;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RolesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public RolesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roles; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RolesContext roles() {
		RolesContext _localctx = new RolesContext(Context, State);
		EnterRule(_localctx, 146, RULE_roles);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1802;
			identifier();
			State = 1807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 1803;
				Match(T__3);
				State = 1804;
				identifier();
				}
				}
				State = 1809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	 
		public IdentifierContext() { }
		public virtual void CopyFrom(IdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BackQuotedIdentifierContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKQUOTED_IDENTIFIER() { return GetToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0); }
		public BackQuotedIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackQuotedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QuotedIdentifierContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(SqlBaseParser.QUOTED_IDENTIFIER, 0); }
		public QuotedIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuotedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DigitIdentifierContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_IDENTIFIER() { return GetToken(SqlBaseParser.DIGIT_IDENTIFIER, 0); }
		public DigitIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDigitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnquotedIdentifierContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SqlBaseParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NonReservedContext nonReserved() {
			return GetRuleContext<NonReservedContext>(0);
		}
		public UnquotedIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnquotedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 148, RULE_identifier);
		try {
			State = 1815;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				_localctx = new UnquotedIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1810;
				Match(IDENTIFIER);
				}
				break;
			case QUOTED_IDENTIFIER:
				_localctx = new QuotedIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1811;
				Match(QUOTED_IDENTIFIER);
				}
				break;
			case ADD:
			case ADMIN:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASC:
			case AT:
			case BERNOULLI:
			case CALL:
			case CALLED:
			case CASCADE:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CURRENT:
			case CURRENT_ROLE:
			case DATA:
			case DATE:
			case DAY:
			case DEFINER:
			case DESC:
			case DETERMINISTIC:
			case DISTRIBUTED:
			case EXCLUDING:
			case EXPLAIN:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORMAT:
			case FUNCTION:
			case FUNCTIONS:
			case GRANT:
			case GRANTED:
			case GRANTS:
			case GRAPHVIZ:
			case HOUR:
			case IF:
			case IGNORE:
			case INCLUDING:
			case INPUT:
			case INTERVAL:
			case INVOKER:
			case IO:
			case ISOLATION:
			case JSON:
			case LANGUAGE:
			case LAST:
			case LATERAL:
			case LEVEL:
			case LIMIT:
			case LOGICAL:
			case MAP:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case NAME:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NONE:
			case NULLIF:
			case NULLS:
			case ONLY:
			case OPTION:
			case ORDINALITY:
			case OUTPUT:
			case OVER:
			case PARTITION:
			case PARTITIONS:
			case POSITION:
			case PRECEDING:
			case PRIVILEGES:
			case PROPERTIES:
			case RANGE:
			case READ:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESPECT:
			case RESTRICT:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLES:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SECURITY:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case SQL:
			case START:
			case STATS:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEMPORARY:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRANSACTION:
			case TRY_CAST:
			case TYPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case USE:
			case USER:
			case VALIDATE:
			case VERBOSE:
			case VIEW:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
				_localctx = new UnquotedIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1812;
				nonReserved();
				}
				break;
			case BACKQUOTED_IDENTIFIER:
				_localctx = new BackQuotedIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1813;
				Match(BACKQUOTED_IDENTIFIER);
				}
				break;
			case DIGIT_IDENTIFIER:
				_localctx = new DigitIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1814;
				Match(DIGIT_IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
	 
		public NumberContext() { }
		public virtual void CopyFrom(NumberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DecimalLiteralContext : NumberContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_VALUE() { return GetToken(SqlBaseParser.DECIMAL_VALUE, 0); }
		public DecimalLiteralContext(NumberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleLiteralContext : NumberContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_VALUE() { return GetToken(SqlBaseParser.DOUBLE_VALUE, 0); }
		public DoubleLiteralContext(NumberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerLiteralContext : NumberContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public IntegerLiteralContext(NumberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 150, RULE_number);
		try {
			State = 1820;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_VALUE:
				_localctx = new DecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1817;
				Match(DECIMAL_VALUE);
				}
				break;
			case DOUBLE_VALUE:
				_localctx = new DoubleLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1818;
				Match(DOUBLE_VALUE);
				}
				break;
			case INTEGER_VALUE:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1819;
				Match(INTEGER_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonReservedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(SqlBaseParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(SqlBaseParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SqlBaseParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(SqlBaseParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(SqlBaseParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SqlBaseParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(SqlBaseParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(SqlBaseParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BERNOULLI() { return GetToken(SqlBaseParser.BERNOULLI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(SqlBaseParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED() { return GetToken(SqlBaseParser.CALLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(SqlBaseParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOGS() { return GetToken(SqlBaseParser.CATALOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(SqlBaseParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(SqlBaseParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(SqlBaseParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(SqlBaseParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(SqlBaseParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(SqlBaseParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ROLE() { return GetToken(SqlBaseParser.CURRENT_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(SqlBaseParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(SqlBaseParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(SqlBaseParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(SqlBaseParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(SqlBaseParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETERMINISTIC() { return GetToken(SqlBaseParser.DETERMINISTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTRIBUTED() { return GetToken(SqlBaseParser.DISTRIBUTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDING() { return GetToken(SqlBaseParser.EXCLUDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(SqlBaseParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(SqlBaseParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(SqlBaseParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(SqlBaseParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(SqlBaseParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(SqlBaseParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SqlBaseParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS() { return GetToken(SqlBaseParser.FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(SqlBaseParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTED() { return GetToken(SqlBaseParser.GRANTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS() { return GetToken(SqlBaseParser.GRANTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAPHVIZ() { return GetToken(SqlBaseParser.GRAPHVIZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(SqlBaseParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlBaseParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(SqlBaseParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDING() { return GetToken(SqlBaseParser.INCLUDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(SqlBaseParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(SqlBaseParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(SqlBaseParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO() { return GetToken(SqlBaseParser.IO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(SqlBaseParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(SqlBaseParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(SqlBaseParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(SqlBaseParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL() { return GetToken(SqlBaseParser.LATERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(SqlBaseParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(SqlBaseParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL() { return GetToken(SqlBaseParser.LOGICAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(SqlBaseParser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(SqlBaseParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(SqlBaseParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(SqlBaseParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SqlBaseParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFC() { return GetToken(SqlBaseParser.NFC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFD() { return GetToken(SqlBaseParser.NFD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKC() { return GetToken(SqlBaseParser.NFKC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKD() { return GetToken(SqlBaseParser.NFKD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(SqlBaseParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(SqlBaseParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(SqlBaseParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(SqlBaseParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(SqlBaseParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(SqlBaseParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(SqlBaseParser.ORDINALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(SqlBaseParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(SqlBaseParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(SqlBaseParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(SqlBaseParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(SqlBaseParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(SqlBaseParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(SqlBaseParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTIES() { return GetToken(SqlBaseParser.PROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(SqlBaseParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(SqlBaseParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(SqlBaseParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(SqlBaseParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(SqlBaseParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(SqlBaseParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT() { return GetToken(SqlBaseParser.RESPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(SqlBaseParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SqlBaseParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(SqlBaseParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(SqlBaseParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(SqlBaseParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLES() { return GetToken(SqlBaseParser.ROLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(SqlBaseParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(SqlBaseParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(SqlBaseParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(SqlBaseParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(SqlBaseParser.SCHEMAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(SqlBaseParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(SqlBaseParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(SqlBaseParser.SERIALIZABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(SqlBaseParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SqlBaseParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(SqlBaseParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(SqlBaseParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(SqlBaseParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(SqlBaseParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(SqlBaseParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS() { return GetToken(SqlBaseParser.STATS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(SqlBaseParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(SqlBaseParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(SqlBaseParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(SqlBaseParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(SqlBaseParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(SqlBaseParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(SqlBaseParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(SqlBaseParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SqlBaseParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(SqlBaseParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY_CAST() { return GetToken(SqlBaseParser.TRY_CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(SqlBaseParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(SqlBaseParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(SqlBaseParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(SqlBaseParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(SqlBaseParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE() { return GetToken(SqlBaseParser.VALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(SqlBaseParser.VERBOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SqlBaseParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(SqlBaseParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(SqlBaseParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(SqlBaseParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(SqlBaseParser.ZONE, 0); }
		public NonReservedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonReserved; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlBaseVisitor<TResult> typedVisitor = visitor as ISqlBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonReserved(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonReservedContext nonReserved() {
		NonReservedContext _localctx = new NonReservedContext(Context, State);
		EnterRule(_localctx, 152, RULE_nonReserved);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1822;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ADMIN) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << BERNOULLI) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CURRENT) | (1L << CURRENT_ROLE) | (1L << DATA) | (1L << DATE) | (1L << DAY) | (1L << DEFINER) | (1L << DESC) | (1L << DETERMINISTIC) | (1L << DISTRIBUTED) | (1L << EXCLUDING))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXPLAIN - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTED - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INPUT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INVOKER - 64)) | (1L << (IO - 64)) | (1L << (ISOLATION - 64)) | (1L << (JSON - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LAST - 64)) | (1L << (LATERAL - 64)) | (1L << (LEVEL - 64)) | (1L << (LIMIT - 64)) | (1L << (LOGICAL - 64)) | (1L << (MAP - 64)) | (1L << (MATERIALIZED - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (NAME - 64)) | (1L << (NFC - 64)) | (1L << (NFD - 64)) | (1L << (NFKC - 64)) | (1L << (NFKD - 64)) | (1L << (NO - 64)) | (1L << (NONE - 64)) | (1L << (NULLIF - 64)) | (1L << (NULLS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (ONLY - 129)) | (1L << (OPTION - 129)) | (1L << (ORDINALITY - 129)) | (1L << (OUTPUT - 129)) | (1L << (OVER - 129)) | (1L << (PARTITION - 129)) | (1L << (PARTITIONS - 129)) | (1L << (POSITION - 129)) | (1L << (PRECEDING - 129)) | (1L << (PRIVILEGES - 129)) | (1L << (PROPERTIES - 129)) | (1L << (RANGE - 129)) | (1L << (READ - 129)) | (1L << (RENAME - 129)) | (1L << (REPEATABLE - 129)) | (1L << (REPLACE - 129)) | (1L << (RESET - 129)) | (1L << (RESPECT - 129)) | (1L << (RESTRICT - 129)) | (1L << (RETURN - 129)) | (1L << (RETURNS - 129)) | (1L << (REVOKE - 129)) | (1L << (ROLE - 129)) | (1L << (ROLES - 129)) | (1L << (ROLLBACK - 129)) | (1L << (ROW - 129)) | (1L << (ROWS - 129)) | (1L << (SCHEMA - 129)) | (1L << (SCHEMAS - 129)) | (1L << (SECOND - 129)) | (1L << (SECURITY - 129)) | (1L << (SERIALIZABLE - 129)) | (1L << (SESSION - 129)) | (1L << (SET - 129)) | (1L << (SETS - 129)) | (1L << (SHOW - 129)) | (1L << (SOME - 129)) | (1L << (SQL - 129)) | (1L << (START - 129)) | (1L << (STATS - 129)) | (1L << (SUBSTRING - 129)) | (1L << (SYSTEM - 129)) | (1L << (TABLES - 129)) | (1L << (TABLESAMPLE - 129)) | (1L << (TEMPORARY - 129)) | (1L << (TEXT - 129)) | (1L << (TIME - 129)) | (1L << (TIMESTAMP - 129)) | (1L << (TO - 129)) | (1L << (TRANSACTION - 129)) | (1L << (TRY_CAST - 129)) | (1L << (TYPE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNBOUNDED - 193)) | (1L << (UNCOMMITTED - 193)) | (1L << (USE - 193)) | (1L << (USER - 193)) | (1L << (VALIDATE - 193)) | (1L << (VERBOSE - 193)) | (1L << (VIEW - 193)) | (1L << (WORK - 193)) | (1L << (WRITE - 193)) | (1L << (YEAR - 193)) | (1L << (ZONE - 193)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 24: return queryTerm_sempred((QueryTermContext)_localctx, predIndex);
		case 34: return relation_sempred((RelationContext)_localctx, predIndex);
		case 43: return booleanExpression_sempred((BooleanExpressionContext)_localctx, predIndex);
		case 45: return valueExpression_sempred((ValueExpressionContext)_localctx, predIndex);
		case 46: return primaryExpression_sempred((PrimaryExpressionContext)_localctx, predIndex);
		case 57: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool queryTerm_sempred(QueryTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relation_sempred(RelationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool booleanExpression_sempred(BooleanExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool valueExpression_sempred(ValueExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		case 8: return Precpred(Context, 5);
		}
		return true;
	}
	private bool primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 14);
		case 10: return Precpred(Context, 12);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 6);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF2', '\x723', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xB3', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xB8', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\xBE', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xC2', 
		'\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xD0', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xD4', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\xD8', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\xDC', '\n', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\xE4', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\xE8', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', '\xEB', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\xF2', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\xF9', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', '\xFC', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\x101', '\n', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x105', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x10B', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x112', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x11B', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x121', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x12C', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x133', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x13D', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x144', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\x14C', '\n', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x154', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x15C', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x161', 
		'\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x167', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x170', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x179', 
		'\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x17E', 
		'\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x182', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x18A', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x191', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x197', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x19A', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x1A2', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\x1A5', '\v', '\x5', '\x5', '\x5', '\x1A7', 
		'\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x1AE', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x1B7', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x1BD', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x1C2', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x1C6', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '\x1CE', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x1D1', 
		'\v', '\x5', '\x5', '\x5', '\x1D3', '\n', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x1DD', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x1E8', '\n', 
		'\x5', '\f', '\x5', '\xE', '\x5', '\x1EB', '\v', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x1F0', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x1F5', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x1FB', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\a', '\x5', '\x202', '\n', '\x5', '\f', '\x5', '\xE', 
		'\x5', '\x205', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x20A', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x211', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x217', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x21A', '\v', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\x21E', '\n', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x222', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x22A', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x230', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', '\x235', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'\x238', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x23C', 
		'\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x240', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x24A', 
		'\n', '\x5', '\x3', '\x5', '\x5', '\x5', '\x24D', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x251', '\n', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x254', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\a', '\x5', '\x25A', '\n', '\x5', '\f', '\x5', '\xE', 
		'\x5', '\x25D', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x261', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x276', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x27C', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x282', 
		'\n', '\x5', '\x5', '\x5', '\x284', '\n', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x28A', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x290', '\n', '\x5', '\x5', '\x5', '\x292', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x298', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x2AB', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x2B0', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x2B7', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x2C3', '\n', 
		'\x5', '\x5', '\x5', '\x2C5', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x2D7', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x2DA', '\v', '\x5', '\x5', '\x5', 
		'\x2DC', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x2E0', 
		'\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x2E4', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 
		'\x2F4', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x2F7', '\v', '\x5', 
		'\x5', '\x5', '\x2F9', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x301', 
		'\n', '\x5', '\x3', '\x6', '\x5', '\x6', '\x304', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x30A', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x30F', '\n', 
		'\a', '\f', '\a', '\xE', '\a', '\x312', '\v', '\a', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\x316', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\x31C', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x320', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\x324', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '\x32A', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\a', '\v', '\x330', '\n', '\v', '\f', '\v', '\xE', 
		'\v', '\x333', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\a', '\xE', '\x33F', '\n', '\xE', '\f', '\xE', '\xE', '\xE', 
		'\x342', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x348', '\n', '\xF', '\x3', '\x10', '\a', '\x10', 
		'\x34B', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x34E', '\v', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\x354', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x35C', '\n', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x360', '\n', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x365', '\n', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x370', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', 
		'\x19', '\x37A', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x37D', '\v', 
		'\x19', '\x5', '\x19', '\x37F', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x5', '\x19', '\x383', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x38B', 
		'\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\x391', '\n', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x394', 
		'\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x397', '\v', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\a', '\x1B', '\x3A0', '\n', '\x1B', '\f', '\x1B', 
		'\xE', '\x1B', '\x3A3', '\v', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x3A9', '\n', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\x3AD', '\n', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x3B1', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x5', '\x1D', '\x3B5', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\a', '\x1D', '\x3BA', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', 
		'\x3BD', '\v', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\a', '\x1D', '\x3C3', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', 
		'\x3C6', '\v', '\x1D', '\x5', '\x1D', '\x3C8', '\n', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x5', '\x1D', '\x3CC', '\n', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x3D1', '\n', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x5', '\x1D', '\x3D5', '\n', '\x1D', '\x3', '\x1E', '\x5', 
		'\x1E', '\x3D8', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\a', '\x1E', '\x3DD', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x3E0', 
		'\v', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', '\x3E8', '\n', '\x1F', '\f', 
		'\x1F', '\xE', '\x1F', '\x3EB', '\v', '\x1F', '\x5', '\x1F', '\x3ED', 
		'\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', '\x3F5', '\n', '\x1F', '\f', 
		'\x1F', '\xE', '\x1F', '\x3F8', '\v', '\x1F', '\x5', '\x1F', '\x3FA', 
		'\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', '\x403', '\n', 
		'\x1F', '\f', '\x1F', '\xE', '\x1F', '\x406', '\v', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x5', '\x1F', '\x40A', '\n', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x410', '\n', ' ', '\f', ' ', 
		'\xE', ' ', '\x413', '\v', ' ', '\x5', ' ', '\x415', '\n', ' ', '\x3', 
		' ', '\x3', ' ', '\x5', ' ', '\x419', '\n', ' ', '\x3', '!', '\x3', '!', 
		'\x5', '!', '\x41D', '\n', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x5', 
		'#', '\x428', '\n', '#', '\x3', '#', '\x5', '#', '\x42B', '\n', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x432', 
		'\n', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x5', '$', '\x445', '\n', '$', '\a', '$', '\x447', '\n', '$', '\f', '$', 
		'\xE', '$', '\x44A', '\v', '$', '\x3', '%', '\x5', '%', '\x44D', '\n', 
		'%', '\x3', '%', '\x3', '%', '\x5', '%', '\x451', '\n', '%', '\x3', '%', 
		'\x3', '%', '\x5', '%', '\x455', '\n', '%', '\x3', '%', '\x3', '%', '\x5', 
		'%', '\x459', '\n', '%', '\x5', '%', '\x45B', '\n', '%', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\a', 
		'&', '\x464', '\n', '&', '\f', '&', '\xE', '&', '\x467', '\v', '&', '\x3', 
		'&', '\x3', '&', '\x5', '&', '\x46B', '\n', '&', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x5', 
		'\'', '\x474', '\n', '\'', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', 
		')', '\x5', ')', '\x47A', '\n', ')', '\x3', ')', '\x3', ')', '\x5', ')', 
		'\x47E', '\n', ')', '\x5', ')', '\x480', '\n', ')', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\a', '*', '\x486', '\n', '*', '\f', '*', 
		'\xE', '*', '\x489', '\v', '*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\a', '+', '\x497', '\n', '+', '\f', '+', 
		'\xE', '+', '\x49A', '\v', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', 
		'+', '\x49F', '\n', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', 
		'\x4AA', '\n', '+', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x5', '-', '\x4B1', '\n', '-', '\x3', '-', '\x3', '-', '\x5', '-', 
		'\x4B5', '\n', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\a', '-', '\x4BD', '\n', '-', '\f', '-', '\xE', '-', 
		'\x4C0', '\v', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', 
		'.', '\x4CC', '\n', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x5', '.', '\x4D4', '\n', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\a', '.', '\x4DB', '\n', '.', 
		'\f', '.', '\xE', '.', '\x4DE', '\v', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x5', '.', '\x4E3', '\n', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x4EB', '\n', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x4F1', '\n', '.', 
		'\x3', '.', '\x3', '.', '\x5', '.', '\x4F5', '\n', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x5', '.', '\x4FA', '\n', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x5', '.', '\x4FF', '\n', '.', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x5', '/', '\x505', '\n', '/', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\a', '/', '\x513', '\n', 
		'/', '\f', '/', '\xE', '/', '\x516', '\v', '/', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x6', '\x30', '\x530', '\n', '\x30', 
		'\r', '\x30', '\xE', '\x30', '\x531', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\a', 
		'\x30', '\x53B', '\n', '\x30', '\f', '\x30', '\xE', '\x30', '\x53E', '\v', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x547', '\n', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x54A', '\n', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x5', '\x30', '\x54F', '\n', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x554', '\n', '\x30', '\f', 
		'\x30', '\xE', '\x30', '\x557', '\v', '\x30', '\x5', '\x30', '\x559', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\a', '\x30', '\x560', '\n', '\x30', '\f', '\x30', '\xE', 
		'\x30', '\x563', '\v', '\x30', '\x5', '\x30', '\x565', '\n', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x5', '\x30', '\x569', '\n', '\x30', '\x3', '\x30', 
		'\x5', '\x30', '\x56C', '\n', '\x30', '\x3', '\x30', '\x5', '\x30', '\x56F', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', 
		'\x579', '\n', '\x30', '\f', '\x30', '\xE', '\x30', '\x57C', '\v', '\x30', 
		'\x5', '\x30', '\x57E', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x6', '\x30', '\x58F', '\n', '\x30', 
		'\r', '\x30', '\xE', '\x30', '\x590', '\x3', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x595', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x6', '\x30', '\x59B', '\n', '\x30', '\r', '\x30', '\xE', 
		'\x30', '\x59C', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x5A1', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x5B8', '\n', '\x30', '\f', 
		'\x30', '\xE', '\x30', '\x5BB', '\v', '\x30', '\x5', '\x30', '\x5BD', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x5C6', '\n', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x5CC', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x5D2', '\n', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x5D8', '\n', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x5E2', '\n', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x5EB', '\n', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x5FF', '\n', 
		'\x30', '\f', '\x30', '\xE', '\x30', '\x602', '\v', '\x30', '\x5', '\x30', 
		'\x604', '\n', '\x30', '\x3', '\x30', '\x5', '\x30', '\x607', '\n', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x611', '\n', 
		'\x30', '\f', '\x30', '\xE', '\x30', '\x614', '\v', '\x30', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x61A', '\n', 
		'\x31', '\x5', '\x31', '\x61C', '\n', '\x31', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x622', '\n', '\x32', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x5', '\x33', '\x62A', '\n', '\x33', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', 
		'\x3', '\x37', '\x5', '\x37', '\x634', '\n', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x63A', '\n', '\x37', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\a', ':', '\x644', '\n', ':', '\f', 
		':', '\xE', ':', '\x647', '\v', ':', '\x5', ':', '\x649', '\n', ':', '\x3', 
		':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\a', ';', '\x662', 
		'\n', ';', '\f', ';', '\xE', ';', '\x665', '\v', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\a', 
		';', '\x66E', '\n', ';', '\f', ';', '\xE', ';', '\x671', '\v', ';', '\x3', 
		';', '\x3', ';', '\x5', ';', '\x675', '\n', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x67C', '\n', ';', '\x3', 
		';', '\x3', ';', '\a', ';', '\x680', '\n', ';', '\f', ';', '\xE', ';', 
		'\x683', '\v', ';', '\x3', '<', '\x3', '<', '\x5', '<', '\x687', '\n', 
		'<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x68D', 
		'\n', '=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x3', '@', '\a', '@', '\x6A1', '\n', '@', '\f', '@', '\xE', '@', '\x6A4', 
		'\v', '@', '\x5', '@', '\x6A6', '\n', '@', '\x3', '@', '\x3', '@', '\x3', 
		'@', '\x3', '@', '\x3', '@', '\a', '@', '\x6AD', '\n', '@', '\f', '@', 
		'\xE', '@', '\x6B0', '\v', '@', '\x5', '@', '\x6B2', '\n', '@', '\x3', 
		'@', '\x5', '@', '\x6B5', '\n', '@', '\x3', '@', '\x3', '@', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x5', '\x41', '\x6C9', '\n', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\x5', '\x42', '\x6D4', '\n', '\x42', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x6DA', '\n', 
		'\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x5', '\x44', '\x6E1', '\n', '\x44', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x5', '\x45', '\x6EA', '\n', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x6F1', '\n', '\x46', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x6F7', '\n', 
		'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\a', 'H', '\x6FC', '\n', 'H', 
		'\f', 'H', '\xE', 'H', '\x6FF', '\v', 'H', '\x3', 'I', '\x3', 'I', '\x3', 
		'I', '\x5', 'I', '\x704', '\n', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x5', 'J', '\x70B', '\n', 'J', '\x3', 'K', '\x3', 
		'K', '\x3', 'K', '\a', 'K', '\x710', '\n', 'K', '\f', 'K', '\xE', 'K', 
		'\x713', '\v', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 
		'L', '\x5', 'L', '\x71A', '\n', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x5', 'M', '\x71F', '\n', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x2', 
		'\b', '\x32', '\x46', 'X', '\\', '^', 't', 'O', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 
		'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', 
		'\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', 
		'\x94', '\x96', '\x98', '\x9A', '\x2', '\x18', '\x4', '\x2', '\x1C', '\x1C', 
		'\x9A', '\x9A', '\x4', '\x2', '\x33', '\x33', '\x61', '\x61', '\x4', '\x2', 
		'K', 'K', 'Y', 'Y', '\x4', '\x2', '?', '?', 'Z', 'Z', '\x4', '\x2', '\xE', 
		'\xE', '\xE4', '\xE4', '\x4', '\x2', '>', '>', '\xC5', '\xC5', '\x4', 
		'\x2', '\x15', '\x15', '\x35', '\x35', '\x4', '\x2', 'G', 'G', 'h', 'h', 
		'\x4', '\x2', '\xE', '\xE', '\x38', '\x38', '\x4', '\x2', '\x17', '\x17', 
		'\xB4', '\xB4', '\x3', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\xDD', '\xDF', 
		'\x3', '\x2', '\xD5', '\xDA', '\x5', '\x2', '\xE', '\xE', '\x12', '\x12', 
		'\xAF', '\xAF', '\x4', '\x2', '\x45', '\x45', '\xBF', '\xBF', '\a', '\x2', 
		'\x31', '\x31', 'V', 'V', 's', 't', '\xA7', '\xA7', '\xD3', '\xD3', '\x3', 
		'\x2', 'w', 'z', '\x4', '\x2', 'H', 'H', '\x8E', '\x8E', '\x5', '\x2', 
		'R', 'R', '\x65', '\x65', '\xB9', '\xB9', '\x6', '\x2', '\x39', '\x39', 
		'\x62', '\x62', 'p', 'p', '\xCA', '\xCA', '\x4', '\x2', '\x83', '\x83', 
		'\xD2', '\xD2', '\x31', '\x2', '\f', '\xE', '\x10', '\x10', '\x12', '\x13', 
		'\x15', '\x17', '\x1A', '\x1C', '\x1F', '$', ')', ')', '+', '+', '/', 
		'\x31', '\x33', '\x33', '\x35', '\x35', '\x37', '\x37', '\x39', '\x39', 
		'?', '?', '\x42', '\x42', '\x44', '\x44', '\x46', 'H', 'J', 'J', 'M', 
		'R', 'V', 'X', 'Z', 'Z', '\\', '\\', '_', '_', '\x61', '\x62', '\x64', 
		'\x65', 'g', 'i', 'k', 'k', 'm', 'm', 'p', 'u', 'w', '|', '\x80', '\x81', 
		'\x83', '\x84', '\x87', '\x87', '\x89', '\x8E', '\x90', '\x93', '\x95', 
		'\x9D', '\x9F', '\xA1', '\xA3', '\xA8', '\xAA', '\xB4', '\xB6', '\xB9', 
		'\xBB', '\xBE', '\xC0', '\xC1', '\xC3', '\xC4', '\xC7', '\xC8', '\xCA', 
		'\xCA', '\xCC', '\xCD', '\xD1', '\xD4', '\x2', '\x841', '\x2', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\xA2', '\x3', '\x2', '\x2', '\x2', '\b', '\x300', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x303', '\x3', '\x2', '\x2', '\x2', '\f', '\x307', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x315', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x317', '\x3', '\x2', '\x2', '\x2', '\x12', '\x325', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x32B', '\x3', '\x2', '\x2', '\x2', '\x16', '\x336', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x33A', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x340', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x347', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x34C', '\x3', '\x2', '\x2', '\x2', ' ', '\x34F', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x353', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x355', '\x3', '\x2', '\x2', '\x2', '&', '\x358', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x35F', '\x3', '\x2', '\x2', '\x2', '*', '\x364', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x36F', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x371', '\x3', '\x2', '\x2', '\x2', '\x30', '\x373', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x384', '\x3', '\x2', '\x2', '\x2', '\x34', '\x3A8', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x3AA', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x3B2', '\x3', '\x2', '\x2', '\x2', ':', '\x3D7', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x409', '\x3', '\x2', '\x2', '\x2', '>', '\x418', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x41A', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x423', '\x3', '\x2', '\x2', '\x2', '\x44', '\x431', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x433', '\x3', '\x2', '\x2', '\x2', 'H', '\x45A', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x46A', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x46C', '\x3', '\x2', '\x2', '\x2', 'N', '\x475', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x477', '\x3', '\x2', '\x2', '\x2', 'R', '\x481', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x4A9', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x4AB', '\x3', '\x2', '\x2', '\x2', 'X', '\x4B4', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x4FE', '\x3', '\x2', '\x2', '\x2', '\\', '\x504', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x606', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x61B', '\x3', '\x2', '\x2', '\x2', '\x62', '\x621', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x629', '\x3', '\x2', '\x2', '\x2', '\x66', '\x62B', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x62D', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x62F', '\x3', '\x2', '\x2', '\x2', 'l', '\x631', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x63B', '\x3', '\x2', '\x2', '\x2', 'p', '\x63D', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x63F', '\x3', '\x2', '\x2', '\x2', 
		't', '\x67B', '\x3', '\x2', '\x2', '\x2', 'v', '\x686', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x68C', '\x3', '\x2', '\x2', '\x2', 'z', '\x68E', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x693', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x699', '\x3', '\x2', '\x2', '\x2', '\x80', '\x6C8', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x6D3', '\x3', '\x2', '\x2', '\x2', '\x84', '\x6D9', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x6E0', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x6E9', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x6F0', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x6F6', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x6F8', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x703', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x70A', '\x3', '\x2', '\x2', '\x2', '\x94', '\x70C', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x719', '\x3', '\x2', '\x2', '\x2', '\x98', '\x71E', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x720', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x9D', '\x5', '\b', '\x5', '\x2', '\x9D', '\x9E', '\a', '\x2', 
		'\x2', '\x3', '\x9E', '\x3', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', 
		'\x5', 'V', ',', '\x2', '\xA0', '\xA1', '\a', '\x2', '\x2', '\x3', '\xA1', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x5', '\"', '\x12', 
		'\x2', '\xA3', '\xA4', '\a', '\x2', '\x2', '\x3', '\xA4', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\x301', '\x5', '\n', '\x6', '\x2', '\xA6', 
		'\xA7', '\a', '\xC7', '\x2', '\x2', '\xA7', '\x301', '\x5', '\x96', 'L', 
		'\x2', '\xA8', '\xA9', '\a', '\xC7', '\x2', '\x2', '\xA9', '\xAA', '\x5', 
		'\x96', 'L', '\x2', '\xAA', '\xAB', '\a', '\x3', '\x2', '\x2', '\xAB', 
		'\xAC', '\x5', '\x96', 'L', '\x2', '\xAC', '\x301', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAE', '\a', '&', '\x2', '\x2', '\xAE', '\xB2', '\a', 
		'\xA5', '\x2', '\x2', '\xAF', '\xB0', '\a', 'W', '\x2', '\x2', '\xB0', 
		'\xB1', '\a', '~', '\x2', '\x2', '\xB1', '\xB3', '\a', '\x41', '\x2', 
		'\x2', '\xB2', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB7', '\x5', '\x8E', 'H', '\x2', '\xB5', '\xB6', '\a', '\xD0', '\x2', 
		'\x2', '\xB6', '\xB8', '\x5', '\x14', '\v', '\x2', '\xB7', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\x301', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\a', ':', '\x2', 
		'\x2', '\xBA', '\xBD', '\a', '\xA5', '\x2', '\x2', '\xBB', '\xBC', '\a', 
		'W', '\x2', '\x2', '\xBC', '\xBE', '\a', '\x41', '\x2', '\x2', '\xBD', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC1', '\x5', 
		'\x8E', 'H', '\x2', '\xC0', '\xC2', '\t', '\x2', '\x2', '\x2', '\xC1', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\x301', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', 
		'\xF', '\x2', '\x2', '\xC4', '\xC5', '\a', '\xA5', '\x2', '\x2', '\xC5', 
		'\xC6', '\x5', '\x8E', 'H', '\x2', '\xC6', '\xC7', '\a', '\x95', '\x2', 
		'\x2', '\xC7', '\xC8', '\a', '\xBD', '\x2', '\x2', '\xC8', '\xC9', '\x5', 
		'\x96', 'L', '\x2', '\xC9', '\x301', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xCB', '\a', '&', '\x2', '\x2', '\xCB', '\xCF', '\a', '\xB5', '\x2', 
		'\x2', '\xCC', '\xCD', '\a', 'W', '\x2', '\x2', '\xCD', '\xCE', '\a', 
		'~', '\x2', '\x2', '\xCE', '\xD0', '\a', '\x41', '\x2', '\x2', '\xCF', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD3', '\x5', 
		'\x8E', 'H', '\x2', '\xD2', '\xD4', '\x5', 'R', '*', '\x2', '\xD3', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', '\"', 
		'\x2', '\x2', '\xD6', '\xD8', '\x5', '`', '\x31', '\x2', '\xD7', '\xD5', 
		'\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\a', '\xD0', 
		'\x2', '\x2', '\xDA', '\xDC', '\x5', '\x14', '\v', '\x2', '\xDB', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xE3', '\a', '\x14', 
		'\x2', '\x2', '\xDE', '\xE4', '\x5', '\n', '\x6', '\x2', '\xDF', '\xE0', 
		'\a', '\x4', '\x2', '\x2', '\xE0', '\xE1', '\x5', '\n', '\x6', '\x2', 
		'\xE1', '\xE2', '\a', '\x5', '\x2', '\x2', '\xE2', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xE3', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xDF', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\xEA', '\x3', '\x2', '\x2', '\x2', 
		'\xE5', '\xE7', '\a', '\xD0', '\x2', '\x2', '\xE6', '\xE8', '\a', '{', 
		'\x2', '\x2', '\xE7', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\xE9', '\xEB', '\a', '/', '\x2', '\x2', '\xEA', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEB', '\x301', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\a', '&', '\x2', '\x2', '\xED', 
		'\xF1', '\a', '\xB5', '\x2', '\x2', '\xEE', '\xEF', '\a', 'W', '\x2', 
		'\x2', '\xEF', '\xF0', '\a', '~', '\x2', '\x2', '\xF0', '\xF2', '\a', 
		'\x41', '\x2', '\x2', '\xF1', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF4', '\x5', '\x8E', 'H', '\x2', '\xF4', '\xF5', '\a', 
		'\x4', '\x2', '\x2', '\xF5', '\xFA', '\x5', '\xE', '\b', '\x2', '\xF6', 
		'\xF7', '\a', '\x6', '\x2', '\x2', '\xF7', '\xF9', '\x5', '\xE', '\b', 
		'\x2', '\xF8', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\xFC', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFD', '\x100', '\a', 
		'\x5', '\x2', '\x2', '\xFE', '\xFF', '\a', '\"', '\x2', '\x2', '\xFF', 
		'\x101', '\x5', '`', '\x31', '\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\x100', '\x101', '\x3', '\x2', '\x2', '\x2', '\x101', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\a', '\xD0', '\x2', '\x2', 
		'\x103', '\x105', '\x5', '\x14', '\v', '\x2', '\x104', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x105', '\x3', '\x2', '\x2', '\x2', '\x105', 
		'\x301', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\a', ':', '\x2', 
		'\x2', '\x107', '\x10A', '\a', '\xB5', '\x2', '\x2', '\x108', '\x109', 
		'\a', 'W', '\x2', '\x2', '\x109', '\x10B', '\a', '\x41', '\x2', '\x2', 
		'\x10A', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x301', '\x5', '\x8E', 'H', '\x2', '\x10D', '\x10E', '\a', ']', '\x2', 
		'\x2', '\x10E', '\x10F', '\a', '`', '\x2', '\x2', '\x10F', '\x111', '\x5', 
		'\x8E', 'H', '\x2', '\x110', '\x112', '\x5', 'R', '*', '\x2', '\x111', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x112', '\x113', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', 
		'\x5', '\n', '\x6', '\x2', '\x114', '\x301', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x116', '\a', '\x34', '\x2', '\x2', '\x116', '\x117', '\a', 
		'K', '\x2', '\x2', '\x117', '\x11A', '\x5', '\x8E', 'H', '\x2', '\x118', 
		'\x119', '\a', '\xCF', '\x2', '\x2', '\x119', '\x11B', '\x5', 'X', '-', 
		'\x2', '\x11A', '\x118', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x301', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x11D', '\a', '\xF', '\x2', '\x2', '\x11D', '\x120', '\a', '\xB5', 
		'\x2', '\x2', '\x11E', '\x11F', '\a', 'W', '\x2', '\x2', '\x11F', '\x121', 
		'\a', '\x41', '\x2', '\x2', '\x120', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x121', '\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\x3', 
		'\x2', '\x2', '\x2', '\x122', '\x123', '\x5', '\x8E', 'H', '\x2', '\x123', 
		'\x124', '\a', '\x95', '\x2', '\x2', '\x124', '\x125', '\a', '\xBD', '\x2', 
		'\x2', '\x125', '\x126', '\x5', '\x8E', 'H', '\x2', '\x126', '\x301', 
		'\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\a', '\xF', '\x2', '\x2', 
		'\x128', '\x12B', '\a', '\xB5', '\x2', '\x2', '\x129', '\x12A', '\a', 
		'W', '\x2', '\x2', '\x12A', '\x12C', '\a', '\x41', '\x2', '\x2', '\x12B', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', 
		'\x5', '\x8E', 'H', '\x2', '\x12E', '\x12F', '\a', '\x95', '\x2', '\x2', 
		'\x12F', '\x132', '\a', ' ', '\x2', '\x2', '\x130', '\x131', '\a', 'W', 
		'\x2', '\x2', '\x131', '\x133', '\a', '\x41', '\x2', '\x2', '\x132', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x134', '\x3', '\x2', '\x2', '\x2', '\x134', '\x135', '\x5', 
		'\x96', 'L', '\x2', '\x135', '\x136', '\a', '\xBD', '\x2', '\x2', '\x136', 
		'\x137', '\x5', '\x96', 'L', '\x2', '\x137', '\x301', '\x3', '\x2', '\x2', 
		'\x2', '\x138', '\x139', '\a', '\xF', '\x2', '\x2', '\x139', '\x13C', 
		'\a', '\xB5', '\x2', '\x2', '\x13A', '\x13B', '\a', 'W', '\x2', '\x2', 
		'\x13B', '\x13D', '\a', '\x41', '\x2', '\x2', '\x13C', '\x13A', '\x3', 
		'\x2', '\x2', '\x2', '\x13C', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13D', 
		'\x13E', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\x5', '\x8E', 
		'H', '\x2', '\x13F', '\x140', '\a', ':', '\x2', '\x2', '\x140', '\x143', 
		'\a', ' ', '\x2', '\x2', '\x141', '\x142', '\a', 'W', '\x2', '\x2', '\x142', 
		'\x144', '\a', '\x41', '\x2', '\x2', '\x143', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x143', '\x144', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\x5', '\x8E', 'H', '\x2', 
		'\x146', '\x301', '\x3', '\x2', '\x2', '\x2', '\x147', '\x148', '\a', 
		'\xF', '\x2', '\x2', '\x148', '\x14B', '\a', '\xB5', '\x2', '\x2', '\x149', 
		'\x14A', '\a', 'W', '\x2', '\x2', '\x14A', '\x14C', '\a', '\x41', '\x2', 
		'\x2', '\x14B', '\x149', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'\x14D', '\x14E', '\x5', '\x8E', 'H', '\x2', '\x14E', '\x14F', '\a', '\f', 
		'\x2', '\x2', '\x14F', '\x153', '\a', ' ', '\x2', '\x2', '\x150', '\x151', 
		'\a', 'W', '\x2', '\x2', '\x151', '\x152', '\a', '~', '\x2', '\x2', '\x152', 
		'\x154', '\a', '\x41', '\x2', '\x2', '\x153', '\x150', '\x3', '\x2', '\x2', 
		'\x2', '\x153', '\x154', '\x3', '\x2', '\x2', '\x2', '\x154', '\x155', 
		'\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\x5', '\x10', '\t', '\x2', 
		'\x156', '\x301', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\a', 
		'\x10', '\x2', '\x2', '\x158', '\x15B', '\x5', '\x8E', 'H', '\x2', '\x159', 
		'\x15A', '\a', '\xD0', '\x2', '\x2', '\x15A', '\x15C', '\x5', '\x14', 
		'\v', '\x2', '\x15B', '\x159', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x301', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '\x160', '\a', '&', '\x2', '\x2', '\x15E', '\x15F', '\a', '\x85', 
		'\x2', '\x2', '\x15F', '\x161', '\a', '\x97', '\x2', '\x2', '\x160', '\x15E', 
		'\x3', '\x2', '\x2', '\x2', '\x160', '\x161', '\x3', '\x2', '\x2', '\x2', 
		'\x161', '\x162', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\a', 
		'\xCD', '\x2', '\x2', '\x163', '\x166', '\x5', '\x8E', 'H', '\x2', '\x164', 
		'\x165', '\a', '\xA8', '\x2', '\x2', '\x165', '\x167', '\t', '\x3', '\x2', 
		'\x2', '\x166', '\x164', '\x3', '\x2', '\x2', '\x2', '\x166', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x167', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x169', '\a', '\x14', '\x2', '\x2', '\x169', '\x16A', '\x5', 
		'\n', '\x6', '\x2', '\x16A', '\x301', '\x3', '\x2', '\x2', '\x2', '\x16B', 
		'\x16C', '\a', ':', '\x2', '\x2', '\x16C', '\x16F', '\a', '\xCD', '\x2', 
		'\x2', '\x16D', '\x16E', '\a', 'W', '\x2', '\x2', '\x16E', '\x170', '\a', 
		'\x41', '\x2', '\x2', '\x16F', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x16F', 
		'\x170', '\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\x3', '\x2', '\x2', 
		'\x2', '\x171', '\x301', '\x5', '\x8E', 'H', '\x2', '\x172', '\x173', 
		'\a', '&', '\x2', '\x2', '\x173', '\x174', '\a', 'r', '\x2', '\x2', '\x174', 
		'\x178', '\a', '\xCD', '\x2', '\x2', '\x175', '\x176', '\a', 'W', '\x2', 
		'\x2', '\x176', '\x177', '\a', '~', '\x2', '\x2', '\x177', '\x179', '\a', 
		'\x41', '\x2', '\x2', '\x178', '\x175', '\x3', '\x2', '\x2', '\x2', '\x178', 
		'\x179', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', '\x3', '\x2', '\x2', 
		'\x2', '\x17A', '\x17D', '\x5', '\x8E', 'H', '\x2', '\x17B', '\x17C', 
		'\a', '\"', '\x2', '\x2', '\x17C', '\x17E', '\x5', '`', '\x31', '\x2', 
		'\x17D', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', '\x3', 
		'\x2', '\x2', '\x2', '\x17E', '\x181', '\x3', '\x2', '\x2', '\x2', '\x17F', 
		'\x180', '\a', '\xD0', '\x2', '\x2', '\x180', '\x182', '\x5', '\x14', 
		'\v', '\x2', '\x181', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x181', '\x182', 
		'\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x189', '\a', '\x14', '\x2', '\x2', '\x184', '\x18A', '\x5', 
		'\n', '\x6', '\x2', '\x185', '\x186', '\a', '\x4', '\x2', '\x2', '\x186', 
		'\x187', '\x5', '\n', '\x6', '\x2', '\x187', '\x188', '\a', '\x5', '\x2', 
		'\x2', '\x188', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x189', '\x184', 
		'\x3', '\x2', '\x2', '\x2', '\x189', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'\x18A', '\x301', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', '\a', 
		':', '\x2', '\x2', '\x18C', '\x18D', '\a', 'r', '\x2', '\x2', '\x18D', 
		'\x190', '\a', '\xCD', '\x2', '\x2', '\x18E', '\x18F', '\a', 'W', '\x2', 
		'\x2', '\x18F', '\x191', '\a', '\x41', '\x2', '\x2', '\x190', '\x18E', 
		'\x3', '\x2', '\x2', '\x2', '\x190', '\x191', '\x3', '\x2', '\x2', '\x2', 
		'\x191', '\x192', '\x3', '\x2', '\x2', '\x2', '\x192', '\x301', '\x5', 
		'\x8E', 'H', '\x2', '\x193', '\x196', '\a', '&', '\x2', '\x2', '\x194', 
		'\x195', '\a', '\x85', '\x2', '\x2', '\x195', '\x197', '\a', '\x97', '\x2', 
		'\x2', '\x196', '\x194', '\x3', '\x2', '\x2', '\x2', '\x196', '\x197', 
		'\x3', '\x2', '\x2', '\x2', '\x197', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\x198', '\x19A', '\a', '\xB8', '\x2', '\x2', '\x199', '\x198', '\x3', 
		'\x2', '\x2', '\x2', '\x199', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x19A', 
		'\x19B', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', '\a', 'M', '\x2', 
		'\x2', '\x19C', '\x19D', '\x5', '\x8E', 'H', '\x2', '\x19D', '\x1A6', 
		'\a', '\x4', '\x2', '\x2', '\x19E', '\x1A3', '\x5', '\x18', '\r', '\x2', 
		'\x19F', '\x1A0', '\a', '\x6', '\x2', '\x2', '\x1A0', '\x1A2', '\x5', 
		'\x18', '\r', '\x2', '\x1A1', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x1A2', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A1', '\x3', '\x2', '\x2', 
		'\x2', '\x1A3', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A7', 
		'\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A3', '\x3', '\x2', '\x2', '\x2', 
		'\x1A6', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', '\x3', 
		'\x2', '\x2', '\x2', '\x1A7', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\x1A9', '\a', '\x5', '\x2', '\x2', '\x1A9', '\x1AA', '\a', '\x9C', '\x2', 
		'\x2', '\x1AA', '\x1AD', '\x5', 't', ';', '\x2', '\x1AB', '\x1AC', '\a', 
		'\"', '\x2', '\x2', '\x1AC', '\x1AE', '\x5', '`', '\x31', '\x2', '\x1AD', 
		'\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\x3', '\x2', '\x2', 
		'\x2', '\x1AE', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', 
		'\x5', '\x1A', '\xE', '\x2', '\x1B0', '\x1B1', '\x5', '\"', '\x12', '\x2', 
		'\x1B1', '\x301', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B3', '\a', 
		'\xF', '\x2', '\x2', '\x1B3', '\x1B4', '\a', 'M', '\x2', '\x2', '\x1B4', 
		'\x1B6', '\x5', '\x8E', 'H', '\x2', '\x1B5', '\x1B7', '\x5', 'r', ':', 
		'\x2', '\x1B6', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B8', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8', '\x1B9', '\x5', '\x1E', '\x10', '\x2', '\x1B9', '\x301', '\x3', 
		'\x2', '\x2', '\x2', '\x1BA', '\x1BC', '\a', ':', '\x2', '\x2', '\x1BB', 
		'\x1BD', '\a', '\xB8', '\x2', '\x2', '\x1BC', '\x1BB', '\x3', '\x2', '\x2', 
		'\x2', '\x1BC', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BE', 
		'\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1C1', '\a', 'M', '\x2', '\x2', 
		'\x1BF', '\x1C0', '\a', 'W', '\x2', '\x2', '\x1C0', '\x1C2', '\a', '\x41', 
		'\x2', '\x2', '\x1C1', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\x3', '\x2', '\x2', '\x2', 
		'\x1C3', '\x1C5', '\x5', '\x8E', 'H', '\x2', '\x1C4', '\x1C6', '\x5', 
		'r', ':', '\x2', '\x1C5', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C5', 
		'\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x301', '\x3', '\x2', '\x2', 
		'\x2', '\x1C7', '\x1C8', '\a', '\x1A', '\x2', '\x2', '\x1C8', '\x1C9', 
		'\x5', '\x8E', 'H', '\x2', '\x1C9', '\x1D2', '\a', '\x4', '\x2', '\x2', 
		'\x1CA', '\x1CF', '\x5', '\x8A', '\x46', '\x2', '\x1CB', '\x1CC', '\a', 
		'\x6', '\x2', '\x2', '\x1CC', '\x1CE', '\x5', '\x8A', '\x46', '\x2', '\x1CD', 
		'\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1D1', '\x3', '\x2', '\x2', 
		'\x2', '\x1CF', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', 
		'\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D3', '\x3', '\x2', '\x2', '\x2', 
		'\x1D1', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1CA', '\x3', 
		'\x2', '\x2', '\x2', '\x1D2', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D3', 
		'\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D5', '\a', '\x5', '\x2', 
		'\x2', '\x1D5', '\x301', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D7', 
		'\a', '&', '\x2', '\x2', '\x1D7', '\x1D8', '\a', '\x9F', '\x2', '\x2', 
		'\x1D8', '\x1DC', '\x5', '\x96', 'L', '\x2', '\x1D9', '\x1DA', '\a', '\xD0', 
		'\x2', '\x2', '\x1DA', '\x1DB', '\a', '\r', '\x2', '\x2', '\x1DB', '\x1DD', 
		'\x5', '\x90', 'I', '\x2', '\x1DC', '\x1D9', '\x3', '\x2', '\x2', '\x2', 
		'\x1DC', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x301', '\x3', 
		'\x2', '\x2', '\x2', '\x1DE', '\x1DF', '\a', ':', '\x2', '\x2', '\x1DF', 
		'\x1E0', '\a', '\x9F', '\x2', '\x2', '\x1E0', '\x301', '\x5', '\x96', 
		'L', '\x2', '\x1E1', '\x1E2', '\a', 'O', '\x2', '\x2', '\x1E2', '\x1E3', 
		'\x5', '\x94', 'K', '\x2', '\x1E3', '\x1E4', '\a', '\xBD', '\x2', '\x2', 
		'\x1E4', '\x1E9', '\x5', '\x92', 'J', '\x2', '\x1E5', '\x1E6', '\a', '\x6', 
		'\x2', '\x2', '\x1E6', '\x1E8', '\x5', '\x92', 'J', '\x2', '\x1E7', '\x1E5', 
		'\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1EB', '\x3', '\x2', '\x2', '\x2', 
		'\x1E9', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EA', '\x3', 
		'\x2', '\x2', '\x2', '\x1EA', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1EB', 
		'\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1ED', '\a', '\xD0', '\x2', 
		'\x2', '\x1ED', '\x1EE', '\a', '\r', '\x2', '\x2', '\x1EE', '\x1F0', '\a', 
		'\x84', '\x2', '\x2', '\x1EF', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EF', 
		'\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F4', '\x3', '\x2', '\x2', 
		'\x2', '\x1F1', '\x1F2', '\a', 'P', '\x2', '\x2', '\x1F2', '\x1F3', '\a', 
		'\x19', '\x2', '\x2', '\x1F3', '\x1F5', '\x5', '\x90', 'I', '\x2', '\x1F4', 
		'\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F5', '\x3', '\x2', '\x2', 
		'\x2', '\x1F5', '\x301', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1FA', 
		'\a', '\x9D', '\x2', '\x2', '\x1F7', '\x1F8', '\a', '\r', '\x2', '\x2', 
		'\x1F8', '\x1F9', '\a', '\x84', '\x2', '\x2', '\x1F9', '\x1FB', '\a', 
		'I', '\x2', '\x2', '\x1FA', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', '\x3', '\x2', '\x2', 
		'\x2', '\x1FC', '\x1FD', '\x5', '\x94', 'K', '\x2', '\x1FD', '\x1FE', 
		'\a', 'K', '\x2', '\x2', '\x1FE', '\x203', '\x5', '\x92', 'J', '\x2', 
		'\x1FF', '\x200', '\a', '\x6', '\x2', '\x2', '\x200', '\x202', '\x5', 
		'\x92', 'J', '\x2', '\x201', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x202', 
		'\x205', '\x3', '\x2', '\x2', '\x2', '\x203', '\x201', '\x3', '\x2', '\x2', 
		'\x2', '\x203', '\x204', '\x3', '\x2', '\x2', '\x2', '\x204', '\x209', 
		'\x3', '\x2', '\x2', '\x2', '\x205', '\x203', '\x3', '\x2', '\x2', '\x2', 
		'\x206', '\x207', '\a', 'P', '\x2', '\x2', '\x207', '\x208', '\a', '\x19', 
		'\x2', '\x2', '\x208', '\x20A', '\x5', '\x90', 'I', '\x2', '\x209', '\x206', 
		'\x3', '\x2', '\x2', '\x2', '\x209', '\x20A', '\x3', '\x2', '\x2', '\x2', 
		'\x20A', '\x301', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20C', '\a', 
		'\xAC', '\x2', '\x2', '\x20C', '\x210', '\a', '\x9F', '\x2', '\x2', '\x20D', 
		'\x211', '\a', '\xE', '\x2', '\x2', '\x20E', '\x211', '\a', '|', '\x2', 
		'\x2', '\x20F', '\x211', '\x5', '\x96', 'L', '\x2', '\x210', '\x20D', 
		'\x3', '\x2', '\x2', '\x2', '\x210', '\x20E', '\x3', '\x2', '\x2', '\x2', 
		'\x210', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x211', '\x301', '\x3', 
		'\x2', '\x2', '\x2', '\x212', '\x21D', '\a', 'O', '\x2', '\x2', '\x213', 
		'\x218', '\x5', '\x8C', 'G', '\x2', '\x214', '\x215', '\a', '\x6', '\x2', 
		'\x2', '\x215', '\x217', '\x5', '\x8C', 'G', '\x2', '\x216', '\x214', 
		'\x3', '\x2', '\x2', '\x2', '\x217', '\x21A', '\x3', '\x2', '\x2', '\x2', 
		'\x218', '\x216', '\x3', '\x2', '\x2', '\x2', '\x218', '\x219', '\x3', 
		'\x2', '\x2', '\x2', '\x219', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x21A', 
		'\x218', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', '\a', '\xE', '\x2', 
		'\x2', '\x21C', '\x21E', '\a', '\x90', '\x2', '\x2', '\x21D', '\x213', 
		'\x3', '\x2', '\x2', '\x2', '\x21D', '\x21B', '\x3', '\x2', '\x2', '\x2', 
		'\x21E', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x221', '\a', 
		'\x82', '\x2', '\x2', '\x220', '\x222', '\a', '\xB5', '\x2', '\x2', '\x221', 
		'\x220', '\x3', '\x2', '\x2', '\x2', '\x221', '\x222', '\x3', '\x2', '\x2', 
		'\x2', '\x222', '\x223', '\x3', '\x2', '\x2', '\x2', '\x223', '\x224', 
		'\x5', '\x8E', 'H', '\x2', '\x224', '\x225', '\a', '\xBD', '\x2', '\x2', 
		'\x225', '\x229', '\x5', '\x92', 'J', '\x2', '\x226', '\x227', '\a', '\xD0', 
		'\x2', '\x2', '\x227', '\x228', '\a', 'O', '\x2', '\x2', '\x228', '\x22A', 
		'\a', '\x84', '\x2', '\x2', '\x229', '\x226', '\x3', '\x2', '\x2', '\x2', 
		'\x229', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x301', '\x3', 
		'\x2', '\x2', '\x2', '\x22B', '\x22F', '\a', '\x9D', '\x2', '\x2', '\x22C', 
		'\x22D', '\a', 'O', '\x2', '\x2', '\x22D', '\x22E', '\a', '\x84', '\x2', 
		'\x2', '\x22E', '\x230', '\a', 'I', '\x2', '\x2', '\x22F', '\x22C', '\x3', 
		'\x2', '\x2', '\x2', '\x22F', '\x230', '\x3', '\x2', '\x2', '\x2', '\x230', 
		'\x23B', '\x3', '\x2', '\x2', '\x2', '\x231', '\x236', '\x5', '\x8C', 
		'G', '\x2', '\x232', '\x233', '\a', '\x6', '\x2', '\x2', '\x233', '\x235', 
		'\x5', '\x8C', 'G', '\x2', '\x234', '\x232', '\x3', '\x2', '\x2', '\x2', 
		'\x235', '\x238', '\x3', '\x2', '\x2', '\x2', '\x236', '\x234', '\x3', 
		'\x2', '\x2', '\x2', '\x236', '\x237', '\x3', '\x2', '\x2', '\x2', '\x237', 
		'\x23C', '\x3', '\x2', '\x2', '\x2', '\x238', '\x236', '\x3', '\x2', '\x2', 
		'\x2', '\x239', '\x23A', '\a', '\xE', '\x2', '\x2', '\x23A', '\x23C', 
		'\a', '\x90', '\x2', '\x2', '\x23B', '\x231', '\x3', '\x2', '\x2', '\x2', 
		'\x23B', '\x239', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23D', '\x3', 
		'\x2', '\x2', '\x2', '\x23D', '\x23F', '\a', '\x82', '\x2', '\x2', '\x23E', 
		'\x240', '\a', '\xB5', '\x2', '\x2', '\x23F', '\x23E', '\x3', '\x2', '\x2', 
		'\x2', '\x23F', '\x240', '\x3', '\x2', '\x2', '\x2', '\x240', '\x241', 
		'\x3', '\x2', '\x2', '\x2', '\x241', '\x242', '\x5', '\x8E', 'H', '\x2', 
		'\x242', '\x243', '\a', 'K', '\x2', '\x2', '\x243', '\x244', '\x5', '\x92', 
		'J', '\x2', '\x244', '\x301', '\x3', '\x2', '\x2', '\x2', '\x245', '\x246', 
		'\a', '\xAE', '\x2', '\x2', '\x246', '\x24C', '\a', 'Q', '\x2', '\x2', 
		'\x247', '\x249', '\a', '\x82', '\x2', '\x2', '\x248', '\x24A', '\a', 
		'\xB5', '\x2', '\x2', '\x249', '\x248', '\x3', '\x2', '\x2', '\x2', '\x249', 
		'\x24A', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x24B', '\x3', '\x2', '\x2', 
		'\x2', '\x24B', '\x24D', '\x5', '\x8E', 'H', '\x2', '\x24C', '\x247', 
		'\x3', '\x2', '\x2', '\x2', '\x24C', '\x24D', '\x3', '\x2', '\x2', '\x2', 
		'\x24D', '\x301', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x250', '\a', 
		'\x42', '\x2', '\x2', '\x24F', '\x251', '\a', '\x10', '\x2', '\x2', '\x250', 
		'\x24F', '\x3', '\x2', '\x2', '\x2', '\x250', '\x251', '\x3', '\x2', '\x2', 
		'\x2', '\x251', '\x253', '\x3', '\x2', '\x2', '\x2', '\x252', '\x254', 
		'\a', '\xCC', '\x2', '\x2', '\x253', '\x252', '\x3', '\x2', '\x2', '\x2', 
		'\x253', '\x254', '\x3', '\x2', '\x2', '\x2', '\x254', '\x260', '\x3', 
		'\x2', '\x2', '\x2', '\x255', '\x256', '\a', '\x4', '\x2', '\x2', '\x256', 
		'\x25B', '\x5', '\x84', '\x43', '\x2', '\x257', '\x258', '\a', '\x6', 
		'\x2', '\x2', '\x258', '\x25A', '\x5', '\x84', '\x43', '\x2', '\x259', 
		'\x257', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x25D', '\x3', '\x2', '\x2', 
		'\x2', '\x25B', '\x259', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x25C', 
		'\x3', '\x2', '\x2', '\x2', '\x25C', '\x25E', '\x3', '\x2', '\x2', '\x2', 
		'\x25D', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25F', '\a', 
		'\x5', '\x2', '\x2', '\x25F', '\x261', '\x3', '\x2', '\x2', '\x2', '\x260', 
		'\x255', '\x3', '\x2', '\x2', '\x2', '\x260', '\x261', '\x3', '\x2', '\x2', 
		'\x2', '\x261', '\x262', '\x3', '\x2', '\x2', '\x2', '\x262', '\x301', 
		'\x5', '\b', '\x5', '\x2', '\x263', '\x264', '\a', '\xAE', '\x2', '\x2', 
		'\x264', '\x265', '\a', '&', '\x2', '\x2', '\x265', '\x266', '\a', '\xB5', 
		'\x2', '\x2', '\x266', '\x301', '\x5', '\x8E', 'H', '\x2', '\x267', '\x268', 
		'\a', '\xAE', '\x2', '\x2', '\x268', '\x269', '\a', '&', '\x2', '\x2', 
		'\x269', '\x26A', '\a', '\xCD', '\x2', '\x2', '\x26A', '\x301', '\x5', 
		'\x8E', 'H', '\x2', '\x26B', '\x26C', '\a', '\xAE', '\x2', '\x2', '\x26C', 
		'\x26D', '\a', '&', '\x2', '\x2', '\x26D', '\x26E', '\a', 'r', '\x2', 
		'\x2', '\x26E', '\x26F', '\a', '\xCD', '\x2', '\x2', '\x26F', '\x301', 
		'\x5', '\x8E', 'H', '\x2', '\x270', '\x271', '\a', '\xAE', '\x2', '\x2', 
		'\x271', '\x272', '\a', '&', '\x2', '\x2', '\x272', '\x273', '\a', 'M', 
		'\x2', '\x2', '\x273', '\x275', '\x5', '\x8E', 'H', '\x2', '\x274', '\x276', 
		'\x5', 'r', ':', '\x2', '\x275', '\x274', '\x3', '\x2', '\x2', '\x2', 
		'\x275', '\x276', '\x3', '\x2', '\x2', '\x2', '\x276', '\x301', '\x3', 
		'\x2', '\x2', '\x2', '\x277', '\x278', '\a', '\xAE', '\x2', '\x2', '\x278', 
		'\x27B', '\a', '\xB6', '\x2', '\x2', '\x279', '\x27A', '\t', '\x4', '\x2', 
		'\x2', '\x27A', '\x27C', '\x5', '\x8E', 'H', '\x2', '\x27B', '\x279', 
		'\x3', '\x2', '\x2', '\x2', '\x27B', '\x27C', '\x3', '\x2', '\x2', '\x2', 
		'\x27C', '\x283', '\x3', '\x2', '\x2', '\x2', '\x27D', '\x27E', '\a', 
		'l', '\x2', '\x2', '\x27E', '\x281', '\x5', '`', '\x31', '\x2', '\x27F', 
		'\x280', '\a', '=', '\x2', '\x2', '\x280', '\x282', '\x5', '`', '\x31', 
		'\x2', '\x281', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x281', '\x282', 
		'\x3', '\x2', '\x2', '\x2', '\x282', '\x284', '\x3', '\x2', '\x2', '\x2', 
		'\x283', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x283', '\x284', '\x3', 
		'\x2', '\x2', '\x2', '\x284', '\x301', '\x3', '\x2', '\x2', '\x2', '\x285', 
		'\x286', '\a', '\xAE', '\x2', '\x2', '\x286', '\x289', '\a', '\xA6', '\x2', 
		'\x2', '\x287', '\x288', '\t', '\x4', '\x2', '\x2', '\x288', '\x28A', 
		'\x5', '\x96', 'L', '\x2', '\x289', '\x287', '\x3', '\x2', '\x2', '\x2', 
		'\x289', '\x28A', '\x3', '\x2', '\x2', '\x2', '\x28A', '\x291', '\x3', 
		'\x2', '\x2', '\x2', '\x28B', '\x28C', '\a', 'l', '\x2', '\x2', '\x28C', 
		'\x28F', '\x5', '`', '\x31', '\x2', '\x28D', '\x28E', '\a', '=', '\x2', 
		'\x2', '\x28E', '\x290', '\x5', '`', '\x31', '\x2', '\x28F', '\x28D', 
		'\x3', '\x2', '\x2', '\x2', '\x28F', '\x290', '\x3', '\x2', '\x2', '\x2', 
		'\x290', '\x292', '\x3', '\x2', '\x2', '\x2', '\x291', '\x28B', '\x3', 
		'\x2', '\x2', '\x2', '\x291', '\x292', '\x3', '\x2', '\x2', '\x2', '\x292', 
		'\x301', '\x3', '\x2', '\x2', '\x2', '\x293', '\x294', '\a', '\xAE', '\x2', 
		'\x2', '\x294', '\x297', '\a', '\x1F', '\x2', '\x2', '\x295', '\x296', 
		'\a', 'l', '\x2', '\x2', '\x296', '\x298', '\x5', '`', '\x31', '\x2', 
		'\x297', '\x295', '\x3', '\x2', '\x2', '\x2', '\x297', '\x298', '\x3', 
		'\x2', '\x2', '\x2', '\x298', '\x301', '\x3', '\x2', '\x2', '\x2', '\x299', 
		'\x29A', '\a', '\xAE', '\x2', '\x2', '\x29A', '\x29B', '\a', '!', '\x2', 
		'\x2', '\x29B', '\x29C', '\t', '\x4', '\x2', '\x2', '\x29C', '\x301', 
		'\x5', '\x8E', 'H', '\x2', '\x29D', '\x29E', '\a', '\xAE', '\x2', '\x2', 
		'\x29E', '\x29F', '\a', '\xB2', '\x2', '\x2', '\x29F', '\x2A0', '\a', 
		'I', '\x2', '\x2', '\x2A0', '\x301', '\x5', '\x8E', 'H', '\x2', '\x2A1', 
		'\x2A2', '\a', '\xAE', '\x2', '\x2', '\x2A2', '\x2A3', '\a', '\xB2', '\x2', 
		'\x2', '\x2A3', '\x2A4', '\a', 'I', '\x2', '\x2', '\x2A4', '\x2A5', '\a', 
		'\x4', '\x2', '\x2', '\x2A5', '\x2A6', '\x5', '\x38', '\x1D', '\x2', '\x2A6', 
		'\x2A7', '\a', '\x5', '\x2', '\x2', '\x2A7', '\x301', '\x3', '\x2', '\x2', 
		'\x2', '\x2A8', '\x2AA', '\a', '\xAE', '\x2', '\x2', '\x2A9', '\x2AB', 
		'\a', ')', '\x2', '\x2', '\x2AA', '\x2A9', '\x3', '\x2', '\x2', '\x2', 
		'\x2AA', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2AB', '\x2AC', '\x3', 
		'\x2', '\x2', '\x2', '\x2AC', '\x2AF', '\a', '\xA0', '\x2', '\x2', '\x2AD', 
		'\x2AE', '\t', '\x4', '\x2', '\x2', '\x2AE', '\x2B0', '\x5', '\x96', 'L', 
		'\x2', '\x2AF', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2AF', '\x2B0', 
		'\x3', '\x2', '\x2', '\x2', '\x2B0', '\x301', '\x3', '\x2', '\x2', '\x2', 
		'\x2B1', '\x2B2', '\a', '\xAE', '\x2', '\x2', '\x2B2', '\x2B3', '\a', 
		'\x9F', '\x2', '\x2', '\x2B3', '\x2B6', '\a', 'Q', '\x2', '\x2', '\x2B4', 
		'\x2B5', '\t', '\x4', '\x2', '\x2', '\x2B5', '\x2B7', '\x5', '\x96', 'L', 
		'\x2', '\x2B6', '\x2B4', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B7', 
		'\x3', '\x2', '\x2', '\x2', '\x2B7', '\x301', '\x3', '\x2', '\x2', '\x2', 
		'\x2B8', '\x2B9', '\a', '\x36', '\x2', '\x2', '\x2B9', '\x301', '\x5', 
		'\x8E', 'H', '\x2', '\x2BA', '\x2BB', '\a', '\x35', '\x2', '\x2', '\x2BB', 
		'\x301', '\x5', '\x8E', 'H', '\x2', '\x2BC', '\x2BD', '\a', '\xAE', '\x2', 
		'\x2', '\x2BD', '\x2C4', '\a', 'N', '\x2', '\x2', '\x2BE', '\x2BF', '\a', 
		'l', '\x2', '\x2', '\x2BF', '\x2C2', '\x5', '`', '\x31', '\x2', '\x2C0', 
		'\x2C1', '\a', '=', '\x2', '\x2', '\x2C1', '\x2C3', '\x5', '`', '\x31', 
		'\x2', '\x2C2', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C3', 
		'\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C5', '\x3', '\x2', '\x2', '\x2', 
		'\x2C4', '\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2C4', '\x2C5', '\x3', 
		'\x2', '\x2', '\x2', '\x2C5', '\x301', '\x3', '\x2', '\x2', '\x2', '\x2C6', 
		'\x2C7', '\a', '\xAE', '\x2', '\x2', '\x2C7', '\x301', '\a', '\xAB', '\x2', 
		'\x2', '\x2C8', '\x2C9', '\a', '\xAC', '\x2', '\x2', '\x2C9', '\x2CA', 
		'\a', '\xAB', '\x2', '\x2', '\x2CA', '\x2CB', '\x5', '\x8E', 'H', '\x2', 
		'\x2CB', '\x2CC', '\a', '\xD5', '\x2', '\x2', '\x2CC', '\x2CD', '\x5', 
		'V', ',', '\x2', '\x2CD', '\x301', '\x3', '\x2', '\x2', '\x2', '\x2CE', 
		'\x2CF', '\a', '\x98', '\x2', '\x2', '\x2CF', '\x2D0', '\a', '\xAB', '\x2', 
		'\x2', '\x2D0', '\x301', '\x5', '\x8E', 'H', '\x2', '\x2D1', '\x2D2', 
		'\a', '\xB1', '\x2', '\x2', '\x2D2', '\x2DB', '\a', '\xBE', '\x2', '\x2', 
		'\x2D3', '\x2D8', '\x5', '\x86', '\x44', '\x2', '\x2D4', '\x2D5', '\a', 
		'\x6', '\x2', '\x2', '\x2D5', '\x2D7', '\x5', '\x86', '\x44', '\x2', '\x2D6', 
		'\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2DA', '\x3', '\x2', '\x2', 
		'\x2', '\x2D8', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2D9', 
		'\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2DC', '\x3', '\x2', '\x2', '\x2', 
		'\x2DA', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2D3', '\x3', 
		'\x2', '\x2', '\x2', '\x2DB', '\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2DC', 
		'\x301', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2DF', '\a', '#', '\x2', 
		'\x2', '\x2DE', '\x2E0', '\a', '\xD1', '\x2', '\x2', '\x2DF', '\x2DE', 
		'\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2E0', '\x3', '\x2', '\x2', '\x2', 
		'\x2E0', '\x301', '\x3', '\x2', '\x2', '\x2', '\x2E1', '\x2E3', '\a', 
		'\xA1', '\x2', '\x2', '\x2E2', '\x2E4', '\a', '\xD1', '\x2', '\x2', '\x2E3', 
		'\x2E2', '\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2E4', '\x3', '\x2', '\x2', 
		'\x2', '\x2E4', '\x301', '\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E6', 
		'\a', '\x8F', '\x2', '\x2', '\x2E6', '\x2E7', '\x5', '\x96', 'L', '\x2', 
		'\x2E7', '\x2E8', '\a', 'K', '\x2', '\x2', '\x2E8', '\x2E9', '\x5', '\b', 
		'\x5', '\x2', '\x2E9', '\x301', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2EB', 
		'\a', '\x32', '\x2', '\x2', '\x2EB', '\x2EC', '\a', '\x8F', '\x2', '\x2', 
		'\x2EC', '\x301', '\x5', '\x96', 'L', '\x2', '\x2ED', '\x2EE', '\a', '@', 
		'\x2', '\x2', '\x2EE', '\x2F8', '\x5', '\x96', 'L', '\x2', '\x2EF', '\x2F0', 
		'\a', '\xC9', '\x2', '\x2', '\x2F0', '\x2F5', '\x5', 'V', ',', '\x2', 
		'\x2F1', '\x2F2', '\a', '\x6', '\x2', '\x2', '\x2F2', '\x2F4', '\x5', 
		'V', ',', '\x2', '\x2F3', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\x2F4', 
		'\x2F7', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2F3', '\x3', '\x2', '\x2', 
		'\x2', '\x2F5', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2F9', 
		'\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2F5', '\x3', '\x2', '\x2', '\x2', 
		'\x2F8', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2F9', '\x3', 
		'\x2', '\x2', '\x2', '\x2F9', '\x301', '\x3', '\x2', '\x2', '\x2', '\x2FA', 
		'\x2FB', '\a', '\x36', '\x2', '\x2', '\x2FB', '\x2FC', '\a', '\\', '\x2', 
		'\x2', '\x2FC', '\x301', '\x5', '\x96', 'L', '\x2', '\x2FD', '\x2FE', 
		'\a', '\x36', '\x2', '\x2', '\x2FE', '\x2FF', '\a', '\x89', '\x2', '\x2', 
		'\x2FF', '\x301', '\x5', '\x96', 'L', '\x2', '\x300', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\x300', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x300', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\x300', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\x300', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x300', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\x300', '\xCA', '\x3', '\x2', '\x2', '\x2', '\x300', '\xEC', 
		'\x3', '\x2', '\x2', '\x2', '\x300', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\x300', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x300', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x300', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x300', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x300', '\x138', '\x3', '\x2', '\x2', 
		'\x2', '\x300', '\x147', '\x3', '\x2', '\x2', '\x2', '\x300', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x300', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		'\x300', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x300', '\x172', '\x3', 
		'\x2', '\x2', '\x2', '\x300', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x300', 
		'\x193', '\x3', '\x2', '\x2', '\x2', '\x300', '\x1B2', '\x3', '\x2', '\x2', 
		'\x2', '\x300', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x300', '\x1C7', 
		'\x3', '\x2', '\x2', '\x2', '\x300', '\x1D6', '\x3', '\x2', '\x2', '\x2', 
		'\x300', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x300', '\x1E1', '\x3', 
		'\x2', '\x2', '\x2', '\x300', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x300', 
		'\x20B', '\x3', '\x2', '\x2', '\x2', '\x300', '\x212', '\x3', '\x2', '\x2', 
		'\x2', '\x300', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x300', '\x245', 
		'\x3', '\x2', '\x2', '\x2', '\x300', '\x24E', '\x3', '\x2', '\x2', '\x2', 
		'\x300', '\x263', '\x3', '\x2', '\x2', '\x2', '\x300', '\x267', '\x3', 
		'\x2', '\x2', '\x2', '\x300', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x300', 
		'\x270', '\x3', '\x2', '\x2', '\x2', '\x300', '\x277', '\x3', '\x2', '\x2', 
		'\x2', '\x300', '\x285', '\x3', '\x2', '\x2', '\x2', '\x300', '\x293', 
		'\x3', '\x2', '\x2', '\x2', '\x300', '\x299', '\x3', '\x2', '\x2', '\x2', 
		'\x300', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x300', '\x2A1', '\x3', 
		'\x2', '\x2', '\x2', '\x300', '\x2A8', '\x3', '\x2', '\x2', '\x2', '\x300', 
		'\x2B1', '\x3', '\x2', '\x2', '\x2', '\x300', '\x2B8', '\x3', '\x2', '\x2', 
		'\x2', '\x300', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\x300', '\x2BC', 
		'\x3', '\x2', '\x2', '\x2', '\x300', '\x2C6', '\x3', '\x2', '\x2', '\x2', 
		'\x300', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x300', '\x2CE', '\x3', 
		'\x2', '\x2', '\x2', '\x300', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x300', 
		'\x2DD', '\x3', '\x2', '\x2', '\x2', '\x300', '\x2E1', '\x3', '\x2', '\x2', 
		'\x2', '\x300', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x300', '\x2EA', 
		'\x3', '\x2', '\x2', '\x2', '\x300', '\x2ED', '\x3', '\x2', '\x2', '\x2', 
		'\x300', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\x300', '\x2FD', '\x3', 
		'\x2', '\x2', '\x2', '\x301', '\t', '\x3', '\x2', '\x2', '\x2', '\x302', 
		'\x304', '\x5', '\f', '\a', '\x2', '\x303', '\x302', '\x3', '\x2', '\x2', 
		'\x2', '\x303', '\x304', '\x3', '\x2', '\x2', '\x2', '\x304', '\x305', 
		'\x3', '\x2', '\x2', '\x2', '\x305', '\x306', '\x5', '\x30', '\x19', '\x2', 
		'\x306', '\v', '\x3', '\x2', '\x2', '\x2', '\x307', '\x309', '\a', '\xD0', 
		'\x2', '\x2', '\x308', '\x30A', '\a', '\x94', '\x2', '\x2', '\x309', '\x308', 
		'\x3', '\x2', '\x2', '\x2', '\x309', '\x30A', '\x3', '\x2', '\x2', '\x2', 
		'\x30A', '\x30B', '\x3', '\x2', '\x2', '\x2', '\x30B', '\x310', '\x5', 
		'@', '!', '\x2', '\x30C', '\x30D', '\a', '\x6', '\x2', '\x2', '\x30D', 
		'\x30F', '\x5', '@', '!', '\x2', '\x30E', '\x30C', '\x3', '\x2', '\x2', 
		'\x2', '\x30F', '\x312', '\x3', '\x2', '\x2', '\x2', '\x310', '\x30E', 
		'\x3', '\x2', '\x2', '\x2', '\x310', '\x311', '\x3', '\x2', '\x2', '\x2', 
		'\x311', '\r', '\x3', '\x2', '\x2', '\x2', '\x312', '\x310', '\x3', '\x2', 
		'\x2', '\x2', '\x313', '\x316', '\x5', '\x10', '\t', '\x2', '\x314', '\x316', 
		'\x5', '\x12', '\n', '\x2', '\x315', '\x313', '\x3', '\x2', '\x2', '\x2', 
		'\x315', '\x314', '\x3', '\x2', '\x2', '\x2', '\x316', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x317', '\x318', '\x5', '\x96', 'L', '\x2', '\x318', '\x31B', 
		'\x5', 't', ';', '\x2', '\x319', '\x31A', '\a', '~', '\x2', '\x2', '\x31A', 
		'\x31C', '\a', '\x7F', '\x2', '\x2', '\x31B', '\x319', '\x3', '\x2', '\x2', 
		'\x2', '\x31B', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x31F', 
		'\x3', '\x2', '\x2', '\x2', '\x31D', '\x31E', '\a', '\"', '\x2', '\x2', 
		'\x31E', '\x320', '\x5', '`', '\x31', '\x2', '\x31F', '\x31D', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x320', '\x3', '\x2', '\x2', '\x2', '\x320', 
		'\x323', '\x3', '\x2', '\x2', '\x2', '\x321', '\x322', '\a', '\xD0', '\x2', 
		'\x2', '\x322', '\x324', '\x5', '\x14', '\v', '\x2', '\x323', '\x321', 
		'\x3', '\x2', '\x2', '\x2', '\x323', '\x324', '\x3', '\x2', '\x2', '\x2', 
		'\x324', '\x11', '\x3', '\x2', '\x2', '\x2', '\x325', '\x326', '\a', 'l', 
		'\x2', '\x2', '\x326', '\x329', '\x5', '\x8E', 'H', '\x2', '\x327', '\x328', 
		'\t', '\x5', '\x2', '\x2', '\x328', '\x32A', '\a', '\x91', '\x2', '\x2', 
		'\x329', '\x327', '\x3', '\x2', '\x2', '\x2', '\x329', '\x32A', '\x3', 
		'\x2', '\x2', '\x2', '\x32A', '\x13', '\x3', '\x2', '\x2', '\x2', '\x32B', 
		'\x32C', '\a', '\x4', '\x2', '\x2', '\x32C', '\x331', '\x5', '\x16', '\f', 
		'\x2', '\x32D', '\x32E', '\a', '\x6', '\x2', '\x2', '\x32E', '\x330', 
		'\x5', '\x16', '\f', '\x2', '\x32F', '\x32D', '\x3', '\x2', '\x2', '\x2', 
		'\x330', '\x333', '\x3', '\x2', '\x2', '\x2', '\x331', '\x32F', '\x3', 
		'\x2', '\x2', '\x2', '\x331', '\x332', '\x3', '\x2', '\x2', '\x2', '\x332', 
		'\x334', '\x3', '\x2', '\x2', '\x2', '\x333', '\x331', '\x3', '\x2', '\x2', 
		'\x2', '\x334', '\x335', '\a', '\x5', '\x2', '\x2', '\x335', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x336', '\x337', '\x5', '\x96', 'L', '\x2', '\x337', 
		'\x338', '\a', '\xD5', '\x2', '\x2', '\x338', '\x339', '\x5', 'V', ',', 
		'\x2', '\x339', '\x17', '\x3', '\x2', '\x2', '\x2', '\x33A', '\x33B', 
		'\x5', '\x96', 'L', '\x2', '\x33B', '\x33C', '\x5', 't', ';', '\x2', '\x33C', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x33D', '\x33F', '\x5', '\x1C', '\xF', 
		'\x2', '\x33E', '\x33D', '\x3', '\x2', '\x2', '\x2', '\x33F', '\x342', 
		'\x3', '\x2', '\x2', '\x2', '\x340', '\x33E', '\x3', '\x2', '\x2', '\x2', 
		'\x340', '\x341', '\x3', '\x2', '\x2', '\x2', '\x341', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x342', '\x340', '\x3', '\x2', '\x2', '\x2', '\x343', 
		'\x344', '\a', 'g', '\x2', '\x2', '\x344', '\x348', '\x5', '(', '\x15', 
		'\x2', '\x345', '\x348', '\x5', '*', '\x16', '\x2', '\x346', '\x348', 
		'\x5', ',', '\x17', '\x2', '\x347', '\x343', '\x3', '\x2', '\x2', '\x2', 
		'\x347', '\x345', '\x3', '\x2', '\x2', '\x2', '\x347', '\x346', '\x3', 
		'\x2', '\x2', '\x2', '\x348', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x349', 
		'\x34B', '\x5', ' ', '\x11', '\x2', '\x34A', '\x349', '\x3', '\x2', '\x2', 
		'\x2', '\x34B', '\x34E', '\x3', '\x2', '\x2', '\x2', '\x34C', '\x34A', 
		'\x3', '\x2', '\x2', '\x2', '\x34C', '\x34D', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x34E', '\x34C', '\x3', 
		'\x2', '\x2', '\x2', '\x34F', '\x350', '\x5', ',', '\x17', '\x2', '\x350', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x351', '\x354', '\x5', '$', '\x13', 
		'\x2', '\x352', '\x354', '\x5', '&', '\x14', '\x2', '\x353', '\x351', 
		'\x3', '\x2', '\x2', '\x2', '\x353', '\x352', '\x3', '\x2', '\x2', '\x2', 
		'\x354', '#', '\x3', '\x2', '\x2', '\x2', '\x355', '\x356', '\a', '\x9B', 
		'\x2', '\x2', '\x356', '\x357', '\x5', 'V', ',', '\x2', '\x357', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x358', '\x35B', '\a', '\x44', '\x2', '\x2', 
		'\x359', '\x35A', '\a', 'u', '\x2', '\x2', '\x35A', '\x35C', '\x5', '.', 
		'\x18', '\x2', '\x35B', '\x359', '\x3', '\x2', '\x2', '\x2', '\x35B', 
		'\x35C', '\x3', '\x2', '\x2', '\x2', '\x35C', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x35D', '\x360', '\a', '\xB0', '\x2', '\x2', '\x35E', '\x360', 
		'\x5', '\x96', 'L', '\x2', '\x35F', '\x35D', '\x3', '\x2', '\x2', '\x2', 
		'\x35F', '\x35E', '\x3', '\x2', '\x2', '\x2', '\x360', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x361', '\x365', '\a', '\x37', '\x2', '\x2', '\x362', '\x363', 
		'\a', '~', '\x2', '\x2', '\x363', '\x365', '\a', '\x37', '\x2', '\x2', 
		'\x364', '\x361', '\x3', '\x2', '\x2', '\x2', '\x364', '\x362', '\x3', 
		'\x2', '\x2', '\x2', '\x365', '+', '\x3', '\x2', '\x2', '\x2', '\x366', 
		'\x367', '\a', '\x9C', '\x2', '\x2', '\x367', '\x368', '\a', '\x7F', '\x2', 
		'\x2', '\x368', '\x369', '\a', '\x82', '\x2', '\x2', '\x369', '\x36A', 
		'\a', '\x7F', '\x2', '\x2', '\x36A', '\x370', '\a', '\\', '\x2', '\x2', 
		'\x36B', '\x36C', '\a', '\x1B', '\x2', '\x2', '\x36C', '\x36D', '\a', 
		'\x82', '\x2', '\x2', '\x36D', '\x36E', '\a', '\x7F', '\x2', '\x2', '\x36E', 
		'\x370', '\a', '\\', '\x2', '\x2', '\x36F', '\x366', '\x3', '\x2', '\x2', 
		'\x2', '\x36F', '\x36B', '\x3', '\x2', '\x2', '\x2', '\x370', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x371', '\x372', '\x5', '\x96', 'L', '\x2', '\x372', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x373', '\x37E', '\x5', '\x32', '\x1A', 
		'\x2', '\x374', '\x375', '\a', '\x86', '\x2', '\x2', '\x375', '\x376', 
		'\a', '\x19', '\x2', '\x2', '\x376', '\x37B', '\x5', '\x36', '\x1C', '\x2', 
		'\x377', '\x378', '\a', '\x6', '\x2', '\x2', '\x378', '\x37A', '\x5', 
		'\x36', '\x1C', '\x2', '\x379', '\x377', '\x3', '\x2', '\x2', '\x2', '\x37A', 
		'\x37D', '\x3', '\x2', '\x2', '\x2', '\x37B', '\x379', '\x3', '\x2', '\x2', 
		'\x2', '\x37B', '\x37C', '\x3', '\x2', '\x2', '\x2', '\x37C', '\x37F', 
		'\x3', '\x2', '\x2', '\x2', '\x37D', '\x37B', '\x3', '\x2', '\x2', '\x2', 
		'\x37E', '\x374', '\x3', '\x2', '\x2', '\x2', '\x37E', '\x37F', '\x3', 
		'\x2', '\x2', '\x2', '\x37F', '\x382', '\x3', '\x2', '\x2', '\x2', '\x380', 
		'\x381', '\a', 'm', '\x2', '\x2', '\x381', '\x383', '\t', '\x6', '\x2', 
		'\x2', '\x382', '\x380', '\x3', '\x2', '\x2', '\x2', '\x382', '\x383', 
		'\x3', '\x2', '\x2', '\x2', '\x383', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x384', '\x385', '\b', '\x1A', '\x1', '\x2', '\x385', '\x386', '\x5', 
		'\x34', '\x1B', '\x2', '\x386', '\x395', '\x3', '\x2', '\x2', '\x2', '\x387', 
		'\x388', '\f', '\x4', '\x2', '\x2', '\x388', '\x38A', '\a', '^', '\x2', 
		'\x2', '\x389', '\x38B', '\x5', '\x42', '\"', '\x2', '\x38A', '\x389', 
		'\x3', '\x2', '\x2', '\x2', '\x38A', '\x38B', '\x3', '\x2', '\x2', '\x2', 
		'\x38B', '\x38C', '\x3', '\x2', '\x2', '\x2', '\x38C', '\x394', '\x5', 
		'\x32', '\x1A', '\x5', '\x38D', '\x38E', '\f', '\x3', '\x2', '\x2', '\x38E', 
		'\x390', '\t', '\a', '\x2', '\x2', '\x38F', '\x391', '\x5', '\x42', '\"', 
		'\x2', '\x390', '\x38F', '\x3', '\x2', '\x2', '\x2', '\x390', '\x391', 
		'\x3', '\x2', '\x2', '\x2', '\x391', '\x392', '\x3', '\x2', '\x2', '\x2', 
		'\x392', '\x394', '\x5', '\x32', '\x1A', '\x4', '\x393', '\x387', '\x3', 
		'\x2', '\x2', '\x2', '\x393', '\x38D', '\x3', '\x2', '\x2', '\x2', '\x394', 
		'\x397', '\x3', '\x2', '\x2', '\x2', '\x395', '\x393', '\x3', '\x2', '\x2', 
		'\x2', '\x395', '\x396', '\x3', '\x2', '\x2', '\x2', '\x396', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x397', '\x395', '\x3', '\x2', '\x2', '\x2', 
		'\x398', '\x3A9', '\x5', '\x38', '\x1D', '\x2', '\x399', '\x39A', '\a', 
		'\xB5', '\x2', '\x2', '\x39A', '\x3A9', '\x5', '\x8E', 'H', '\x2', '\x39B', 
		'\x39C', '\a', '\xCB', '\x2', '\x2', '\x39C', '\x3A1', '\x5', 'V', ',', 
		'\x2', '\x39D', '\x39E', '\a', '\x6', '\x2', '\x2', '\x39E', '\x3A0', 
		'\x5', 'V', ',', '\x2', '\x39F', '\x39D', '\x3', '\x2', '\x2', '\x2', 
		'\x3A0', '\x3A3', '\x3', '\x2', '\x2', '\x2', '\x3A1', '\x39F', '\x3', 
		'\x2', '\x2', '\x2', '\x3A1', '\x3A2', '\x3', '\x2', '\x2', '\x2', '\x3A2', 
		'\x3A9', '\x3', '\x2', '\x2', '\x2', '\x3A3', '\x3A1', '\x3', '\x2', '\x2', 
		'\x2', '\x3A4', '\x3A5', '\a', '\x4', '\x2', '\x2', '\x3A5', '\x3A6', 
		'\x5', '\x30', '\x19', '\x2', '\x3A6', '\x3A7', '\a', '\x5', '\x2', '\x2', 
		'\x3A7', '\x3A9', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\x398', '\x3', 
		'\x2', '\x2', '\x2', '\x3A8', '\x399', '\x3', '\x2', '\x2', '\x2', '\x3A8', 
		'\x39B', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\x3A4', '\x3', '\x2', '\x2', 
		'\x2', '\x3A9', '\x35', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x3AC', 
		'\x5', 'V', ',', '\x2', '\x3AB', '\x3AD', '\t', '\b', '\x2', '\x2', '\x3AC', 
		'\x3AB', '\x3', '\x2', '\x2', '\x2', '\x3AC', '\x3AD', '\x3', '\x2', '\x2', 
		'\x2', '\x3AD', '\x3B0', '\x3', '\x2', '\x2', '\x2', '\x3AE', '\x3AF', 
		'\a', '\x81', '\x2', '\x2', '\x3AF', '\x3B1', '\t', '\t', '\x2', '\x2', 
		'\x3B0', '\x3AE', '\x3', '\x2', '\x2', '\x2', '\x3B0', '\x3B1', '\x3', 
		'\x2', '\x2', '\x2', '\x3B1', '\x37', '\x3', '\x2', '\x2', '\x2', '\x3B2', 
		'\x3B4', '\a', '\xA9', '\x2', '\x2', '\x3B3', '\x3B5', '\x5', '\x42', 
		'\"', '\x2', '\x3B4', '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B5', 
		'\x3', '\x2', '\x2', '\x2', '\x3B5', '\x3B6', '\x3', '\x2', '\x2', '\x2', 
		'\x3B6', '\x3BB', '\x5', '\x44', '#', '\x2', '\x3B7', '\x3B8', '\a', '\x6', 
		'\x2', '\x2', '\x3B8', '\x3BA', '\x5', '\x44', '#', '\x2', '\x3B9', '\x3B7', 
		'\x3', '\x2', '\x2', '\x2', '\x3BA', '\x3BD', '\x3', '\x2', '\x2', '\x2', 
		'\x3BB', '\x3B9', '\x3', '\x2', '\x2', '\x2', '\x3BB', '\x3BC', '\x3', 
		'\x2', '\x2', '\x2', '\x3BC', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\x3BD', 
		'\x3BB', '\x3', '\x2', '\x2', '\x2', '\x3BE', '\x3BF', '\a', 'K', '\x2', 
		'\x2', '\x3BF', '\x3C4', '\x5', '\x46', '$', '\x2', '\x3C0', '\x3C1', 
		'\a', '\x6', '\x2', '\x2', '\x3C1', '\x3C3', '\x5', '\x46', '$', '\x2', 
		'\x3C2', '\x3C0', '\x3', '\x2', '\x2', '\x2', '\x3C3', '\x3C6', '\x3', 
		'\x2', '\x2', '\x2', '\x3C4', '\x3C2', '\x3', '\x2', '\x2', '\x2', '\x3C4', 
		'\x3C5', '\x3', '\x2', '\x2', '\x2', '\x3C5', '\x3C8', '\x3', '\x2', '\x2', 
		'\x2', '\x3C6', '\x3C4', '\x3', '\x2', '\x2', '\x2', '\x3C7', '\x3BE', 
		'\x3', '\x2', '\x2', '\x2', '\x3C7', '\x3C8', '\x3', '\x2', '\x2', '\x2', 
		'\x3C8', '\x3CB', '\x3', '\x2', '\x2', '\x2', '\x3C9', '\x3CA', '\a', 
		'\xCF', '\x2', '\x2', '\x3CA', '\x3CC', '\x5', 'X', '-', '\x2', '\x3CB', 
		'\x3C9', '\x3', '\x2', '\x2', '\x2', '\x3CB', '\x3CC', '\x3', '\x2', '\x2', 
		'\x2', '\x3CC', '\x3D0', '\x3', '\x2', '\x2', '\x2', '\x3CD', '\x3CE', 
		'\a', 'S', '\x2', '\x2', '\x3CE', '\x3CF', '\a', '\x19', '\x2', '\x2', 
		'\x3CF', '\x3D1', '\x5', ':', '\x1E', '\x2', '\x3D0', '\x3CD', '\x3', 
		'\x2', '\x2', '\x2', '\x3D0', '\x3D1', '\x3', '\x2', '\x2', '\x2', '\x3D1', 
		'\x3D4', '\x3', '\x2', '\x2', '\x2', '\x3D2', '\x3D3', '\a', 'U', '\x2', 
		'\x2', '\x3D3', '\x3D5', '\x5', 'X', '-', '\x2', '\x3D4', '\x3D2', '\x3', 
		'\x2', '\x2', '\x2', '\x3D4', '\x3D5', '\x3', '\x2', '\x2', '\x2', '\x3D5', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x3D6', '\x3D8', '\x5', '\x42', '\"', 
		'\x2', '\x3D7', '\x3D6', '\x3', '\x2', '\x2', '\x2', '\x3D7', '\x3D8', 
		'\x3', '\x2', '\x2', '\x2', '\x3D8', '\x3D9', '\x3', '\x2', '\x2', '\x2', 
		'\x3D9', '\x3DE', '\x5', '<', '\x1F', '\x2', '\x3DA', '\x3DB', '\a', '\x6', 
		'\x2', '\x2', '\x3DB', '\x3DD', '\x5', '<', '\x1F', '\x2', '\x3DC', '\x3DA', 
		'\x3', '\x2', '\x2', '\x2', '\x3DD', '\x3E0', '\x3', '\x2', '\x2', '\x2', 
		'\x3DE', '\x3DC', '\x3', '\x2', '\x2', '\x2', '\x3DE', '\x3DF', '\x3', 
		'\x2', '\x2', '\x2', '\x3DF', ';', '\x3', '\x2', '\x2', '\x2', '\x3E0', 
		'\x3DE', '\x3', '\x2', '\x2', '\x2', '\x3E1', '\x40A', '\x5', '>', ' ', 
		'\x2', '\x3E2', '\x3E3', '\a', '\xA2', '\x2', '\x2', '\x3E3', '\x3EC', 
		'\a', '\x4', '\x2', '\x2', '\x3E4', '\x3E9', '\x5', 'V', ',', '\x2', '\x3E5', 
		'\x3E6', '\a', '\x6', '\x2', '\x2', '\x3E6', '\x3E8', '\x5', 'V', ',', 
		'\x2', '\x3E7', '\x3E5', '\x3', '\x2', '\x2', '\x2', '\x3E8', '\x3EB', 
		'\x3', '\x2', '\x2', '\x2', '\x3E9', '\x3E7', '\x3', '\x2', '\x2', '\x2', 
		'\x3E9', '\x3EA', '\x3', '\x2', '\x2', '\x2', '\x3EA', '\x3ED', '\x3', 
		'\x2', '\x2', '\x2', '\x3EB', '\x3E9', '\x3', '\x2', '\x2', '\x2', '\x3EC', 
		'\x3E4', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3ED', '\x3', '\x2', '\x2', 
		'\x2', '\x3ED', '\x3EE', '\x3', '\x2', '\x2', '\x2', '\x3EE', '\x40A', 
		'\a', '\x5', '\x2', '\x2', '\x3EF', '\x3F0', '\a', '(', '\x2', '\x2', 
		'\x3F0', '\x3F9', '\a', '\x4', '\x2', '\x2', '\x3F1', '\x3F6', '\x5', 
		'V', ',', '\x2', '\x3F2', '\x3F3', '\a', '\x6', '\x2', '\x2', '\x3F3', 
		'\x3F5', '\x5', 'V', ',', '\x2', '\x3F4', '\x3F2', '\x3', '\x2', '\x2', 
		'\x2', '\x3F5', '\x3F8', '\x3', '\x2', '\x2', '\x2', '\x3F6', '\x3F4', 
		'\x3', '\x2', '\x2', '\x2', '\x3F6', '\x3F7', '\x3', '\x2', '\x2', '\x2', 
		'\x3F7', '\x3FA', '\x3', '\x2', '\x2', '\x2', '\x3F8', '\x3F6', '\x3', 
		'\x2', '\x2', '\x2', '\x3F9', '\x3F1', '\x3', '\x2', '\x2', '\x2', '\x3F9', 
		'\x3FA', '\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3FB', '\x3', '\x2', '\x2', 
		'\x2', '\x3FB', '\x40A', '\a', '\x5', '\x2', '\x2', '\x3FC', '\x3FD', 
		'\a', 'T', '\x2', '\x2', '\x3FD', '\x3FE', '\a', '\xAD', '\x2', '\x2', 
		'\x3FE', '\x3FF', '\a', '\x4', '\x2', '\x2', '\x3FF', '\x404', '\x5', 
		'>', ' ', '\x2', '\x400', '\x401', '\a', '\x6', '\x2', '\x2', '\x401', 
		'\x403', '\x5', '>', ' ', '\x2', '\x402', '\x400', '\x3', '\x2', '\x2', 
		'\x2', '\x403', '\x406', '\x3', '\x2', '\x2', '\x2', '\x404', '\x402', 
		'\x3', '\x2', '\x2', '\x2', '\x404', '\x405', '\x3', '\x2', '\x2', '\x2', 
		'\x405', '\x407', '\x3', '\x2', '\x2', '\x2', '\x406', '\x404', '\x3', 
		'\x2', '\x2', '\x2', '\x407', '\x408', '\a', '\x5', '\x2', '\x2', '\x408', 
		'\x40A', '\x3', '\x2', '\x2', '\x2', '\x409', '\x3E1', '\x3', '\x2', '\x2', 
		'\x2', '\x409', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x409', '\x3EF', 
		'\x3', '\x2', '\x2', '\x2', '\x409', '\x3FC', '\x3', '\x2', '\x2', '\x2', 
		'\x40A', '=', '\x3', '\x2', '\x2', '\x2', '\x40B', '\x414', '\a', '\x4', 
		'\x2', '\x2', '\x40C', '\x411', '\x5', 'V', ',', '\x2', '\x40D', '\x40E', 
		'\a', '\x6', '\x2', '\x2', '\x40E', '\x410', '\x5', 'V', ',', '\x2', '\x40F', 
		'\x40D', '\x3', '\x2', '\x2', '\x2', '\x410', '\x413', '\x3', '\x2', '\x2', 
		'\x2', '\x411', '\x40F', '\x3', '\x2', '\x2', '\x2', '\x411', '\x412', 
		'\x3', '\x2', '\x2', '\x2', '\x412', '\x415', '\x3', '\x2', '\x2', '\x2', 
		'\x413', '\x411', '\x3', '\x2', '\x2', '\x2', '\x414', '\x40C', '\x3', 
		'\x2', '\x2', '\x2', '\x414', '\x415', '\x3', '\x2', '\x2', '\x2', '\x415', 
		'\x416', '\x3', '\x2', '\x2', '\x2', '\x416', '\x419', '\a', '\x5', '\x2', 
		'\x2', '\x417', '\x419', '\x5', 'V', ',', '\x2', '\x418', '\x40B', '\x3', 
		'\x2', '\x2', '\x2', '\x418', '\x417', '\x3', '\x2', '\x2', '\x2', '\x419', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x41A', '\x41C', '\x5', '\x96', 'L', 
		'\x2', '\x41B', '\x41D', '\x5', 'R', '*', '\x2', '\x41C', '\x41B', '\x3', 
		'\x2', '\x2', '\x2', '\x41C', '\x41D', '\x3', '\x2', '\x2', '\x2', '\x41D', 
		'\x41E', '\x3', '\x2', '\x2', '\x2', '\x41E', '\x41F', '\a', '\x14', '\x2', 
		'\x2', '\x41F', '\x420', '\a', '\x4', '\x2', '\x2', '\x420', '\x421', 
		'\x5', '\n', '\x6', '\x2', '\x421', '\x422', '\a', '\x5', '\x2', '\x2', 
		'\x422', '\x41', '\x3', '\x2', '\x2', '\x2', '\x423', '\x424', '\t', '\n', 
		'\x2', '\x2', '\x424', '\x43', '\x3', '\x2', '\x2', '\x2', '\x425', '\x42A', 
		'\x5', 'V', ',', '\x2', '\x426', '\x428', '\a', '\x14', '\x2', '\x2', 
		'\x427', '\x426', '\x3', '\x2', '\x2', '\x2', '\x427', '\x428', '\x3', 
		'\x2', '\x2', '\x2', '\x428', '\x429', '\x3', '\x2', '\x2', '\x2', '\x429', 
		'\x42B', '\x5', '\x96', 'L', '\x2', '\x42A', '\x427', '\x3', '\x2', '\x2', 
		'\x2', '\x42A', '\x42B', '\x3', '\x2', '\x2', '\x2', '\x42B', '\x432', 
		'\x3', '\x2', '\x2', '\x2', '\x42C', '\x42D', '\x5', '\x8E', 'H', '\x2', 
		'\x42D', '\x42E', '\a', '\x3', '\x2', '\x2', '\x42E', '\x42F', '\a', '\xDD', 
		'\x2', '\x2', '\x42F', '\x432', '\x3', '\x2', '\x2', '\x2', '\x430', '\x432', 
		'\a', '\xDD', '\x2', '\x2', '\x431', '\x425', '\x3', '\x2', '\x2', '\x2', 
		'\x431', '\x42C', '\x3', '\x2', '\x2', '\x2', '\x431', '\x430', '\x3', 
		'\x2', '\x2', '\x2', '\x432', '\x45', '\x3', '\x2', '\x2', '\x2', '\x433', 
		'\x434', '\b', '$', '\x1', '\x2', '\x434', '\x435', '\x5', 'L', '\'', 
		'\x2', '\x435', '\x448', '\x3', '\x2', '\x2', '\x2', '\x436', '\x444', 
		'\f', '\x4', '\x2', '\x2', '\x437', '\x438', '\a', '\'', '\x2', '\x2', 
		'\x438', '\x439', '\a', '\x66', '\x2', '\x2', '\x439', '\x445', '\x5', 
		'L', '\'', '\x2', '\x43A', '\x43B', '\x5', 'H', '%', '\x2', '\x43B', '\x43C', 
		'\a', '\x66', '\x2', '\x2', '\x43C', '\x43D', '\x5', '\x46', '$', '\x2', 
		'\x43D', '\x43E', '\x5', 'J', '&', '\x2', '\x43E', '\x445', '\x3', '\x2', 
		'\x2', '\x2', '\x43F', '\x440', '\a', 'v', '\x2', '\x2', '\x440', '\x441', 
		'\x5', 'H', '%', '\x2', '\x441', '\x442', '\a', '\x66', '\x2', '\x2', 
		'\x442', '\x443', '\x5', 'L', '\'', '\x2', '\x443', '\x445', '\x3', '\x2', 
		'\x2', '\x2', '\x444', '\x437', '\x3', '\x2', '\x2', '\x2', '\x444', '\x43A', 
		'\x3', '\x2', '\x2', '\x2', '\x444', '\x43F', '\x3', '\x2', '\x2', '\x2', 
		'\x445', '\x447', '\x3', '\x2', '\x2', '\x2', '\x446', '\x436', '\x3', 
		'\x2', '\x2', '\x2', '\x447', '\x44A', '\x3', '\x2', '\x2', '\x2', '\x448', 
		'\x446', '\x3', '\x2', '\x2', '\x2', '\x448', '\x449', '\x3', '\x2', '\x2', 
		'\x2', '\x449', 'G', '\x3', '\x2', '\x2', '\x2', '\x44A', '\x448', '\x3', 
		'\x2', '\x2', '\x2', '\x44B', '\x44D', '\a', '[', '\x2', '\x2', '\x44C', 
		'\x44B', '\x3', '\x2', '\x2', '\x2', '\x44C', '\x44D', '\x3', '\x2', '\x2', 
		'\x2', '\x44D', '\x45B', '\x3', '\x2', '\x2', '\x2', '\x44E', '\x450', 
		'\a', 'j', '\x2', '\x2', '\x44F', '\x451', '\a', '\x88', '\x2', '\x2', 
		'\x450', '\x44F', '\x3', '\x2', '\x2', '\x2', '\x450', '\x451', '\x3', 
		'\x2', '\x2', '\x2', '\x451', '\x45B', '\x3', '\x2', '\x2', '\x2', '\x452', 
		'\x454', '\a', '\x9E', '\x2', '\x2', '\x453', '\x455', '\a', '\x88', '\x2', 
		'\x2', '\x454', '\x453', '\x3', '\x2', '\x2', '\x2', '\x454', '\x455', 
		'\x3', '\x2', '\x2', '\x2', '\x455', '\x45B', '\x3', '\x2', '\x2', '\x2', 
		'\x456', '\x458', '\a', 'L', '\x2', '\x2', '\x457', '\x459', '\a', '\x88', 
		'\x2', '\x2', '\x458', '\x457', '\x3', '\x2', '\x2', '\x2', '\x458', '\x459', 
		'\x3', '\x2', '\x2', '\x2', '\x459', '\x45B', '\x3', '\x2', '\x2', '\x2', 
		'\x45A', '\x44C', '\x3', '\x2', '\x2', '\x2', '\x45A', '\x44E', '\x3', 
		'\x2', '\x2', '\x2', '\x45A', '\x452', '\x3', '\x2', '\x2', '\x2', '\x45A', 
		'\x456', '\x3', '\x2', '\x2', '\x2', '\x45B', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x45C', '\x45D', '\a', '\x82', '\x2', '\x2', '\x45D', '\x46B', 
		'\x5', 'X', '-', '\x2', '\x45E', '\x45F', '\a', '\xC9', '\x2', '\x2', 
		'\x45F', '\x460', '\a', '\x4', '\x2', '\x2', '\x460', '\x465', '\x5', 
		'\x96', 'L', '\x2', '\x461', '\x462', '\a', '\x6', '\x2', '\x2', '\x462', 
		'\x464', '\x5', '\x96', 'L', '\x2', '\x463', '\x461', '\x3', '\x2', '\x2', 
		'\x2', '\x464', '\x467', '\x3', '\x2', '\x2', '\x2', '\x465', '\x463', 
		'\x3', '\x2', '\x2', '\x2', '\x465', '\x466', '\x3', '\x2', '\x2', '\x2', 
		'\x466', '\x468', '\x3', '\x2', '\x2', '\x2', '\x467', '\x465', '\x3', 
		'\x2', '\x2', '\x2', '\x468', '\x469', '\a', '\x5', '\x2', '\x2', '\x469', 
		'\x46B', '\x3', '\x2', '\x2', '\x2', '\x46A', '\x45C', '\x3', '\x2', '\x2', 
		'\x2', '\x46A', '\x45E', '\x3', '\x2', '\x2', '\x2', '\x46B', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\x46C', '\x473', '\x5', 'P', ')', '\x2', '\x46D', 
		'\x46E', '\a', '\xB7', '\x2', '\x2', '\x46E', '\x46F', '\x5', 'N', '(', 
		'\x2', '\x46F', '\x470', '\a', '\x4', '\x2', '\x2', '\x470', '\x471', 
		'\x5', 'V', ',', '\x2', '\x471', '\x472', '\a', '\x5', '\x2', '\x2', '\x472', 
		'\x474', '\x3', '\x2', '\x2', '\x2', '\x473', '\x46D', '\x3', '\x2', '\x2', 
		'\x2', '\x473', '\x474', '\x3', '\x2', '\x2', '\x2', '\x474', 'M', '\x3', 
		'\x2', '\x2', '\x2', '\x475', '\x476', '\t', '\v', '\x2', '\x2', '\x476', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x477', '\x47F', '\x5', 'T', '+', '\x2', 
		'\x478', '\x47A', '\a', '\x14', '\x2', '\x2', '\x479', '\x478', '\x3', 
		'\x2', '\x2', '\x2', '\x479', '\x47A', '\x3', '\x2', '\x2', '\x2', '\x47A', 
		'\x47B', '\x3', '\x2', '\x2', '\x2', '\x47B', '\x47D', '\x5', '\x96', 
		'L', '\x2', '\x47C', '\x47E', '\x5', 'R', '*', '\x2', '\x47D', '\x47C', 
		'\x3', '\x2', '\x2', '\x2', '\x47D', '\x47E', '\x3', '\x2', '\x2', '\x2', 
		'\x47E', '\x480', '\x3', '\x2', '\x2', '\x2', '\x47F', '\x479', '\x3', 
		'\x2', '\x2', '\x2', '\x47F', '\x480', '\x3', '\x2', '\x2', '\x2', '\x480', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x481', '\x482', '\a', '\x4', '\x2', 
		'\x2', '\x482', '\x487', '\x5', '\x96', 'L', '\x2', '\x483', '\x484', 
		'\a', '\x6', '\x2', '\x2', '\x484', '\x486', '\x5', '\x96', 'L', '\x2', 
		'\x485', '\x483', '\x3', '\x2', '\x2', '\x2', '\x486', '\x489', '\x3', 
		'\x2', '\x2', '\x2', '\x487', '\x485', '\x3', '\x2', '\x2', '\x2', '\x487', 
		'\x488', '\x3', '\x2', '\x2', '\x2', '\x488', '\x48A', '\x3', '\x2', '\x2', 
		'\x2', '\x489', '\x487', '\x3', '\x2', '\x2', '\x2', '\x48A', '\x48B', 
		'\a', '\x5', '\x2', '\x2', '\x48B', 'S', '\x3', '\x2', '\x2', '\x2', '\x48C', 
		'\x4AA', '\x5', '\x8E', 'H', '\x2', '\x48D', '\x48E', '\a', '\x4', '\x2', 
		'\x2', '\x48E', '\x48F', '\x5', '\n', '\x6', '\x2', '\x48F', '\x490', 
		'\a', '\x5', '\x2', '\x2', '\x490', '\x4AA', '\x3', '\x2', '\x2', '\x2', 
		'\x491', '\x492', '\a', '\xC6', '\x2', '\x2', '\x492', '\x493', '\a', 
		'\x4', '\x2', '\x2', '\x493', '\x498', '\x5', 'V', ',', '\x2', '\x494', 
		'\x495', '\a', '\x6', '\x2', '\x2', '\x495', '\x497', '\x5', 'V', ',', 
		'\x2', '\x496', '\x494', '\x3', '\x2', '\x2', '\x2', '\x497', '\x49A', 
		'\x3', '\x2', '\x2', '\x2', '\x498', '\x496', '\x3', '\x2', '\x2', '\x2', 
		'\x498', '\x499', '\x3', '\x2', '\x2', '\x2', '\x499', '\x49B', '\x3', 
		'\x2', '\x2', '\x2', '\x49A', '\x498', '\x3', '\x2', '\x2', '\x2', '\x49B', 
		'\x49E', '\a', '\x5', '\x2', '\x2', '\x49C', '\x49D', '\a', '\xD0', '\x2', 
		'\x2', '\x49D', '\x49F', '\a', '\x87', '\x2', '\x2', '\x49E', '\x49C', 
		'\x3', '\x2', '\x2', '\x2', '\x49E', '\x49F', '\x3', '\x2', '\x2', '\x2', 
		'\x49F', '\x4AA', '\x3', '\x2', '\x2', '\x2', '\x4A0', '\x4A1', '\a', 
		'i', '\x2', '\x2', '\x4A1', '\x4A2', '\a', '\x4', '\x2', '\x2', '\x4A2', 
		'\x4A3', '\x5', '\n', '\x6', '\x2', '\x4A3', '\x4A4', '\a', '\x5', '\x2', 
		'\x2', '\x4A4', '\x4AA', '\x3', '\x2', '\x2', '\x2', '\x4A5', '\x4A6', 
		'\a', '\x4', '\x2', '\x2', '\x4A6', '\x4A7', '\x5', '\x46', '$', '\x2', 
		'\x4A7', '\x4A8', '\a', '\x5', '\x2', '\x2', '\x4A8', '\x4AA', '\x3', 
		'\x2', '\x2', '\x2', '\x4A9', '\x48C', '\x3', '\x2', '\x2', '\x2', '\x4A9', 
		'\x48D', '\x3', '\x2', '\x2', '\x2', '\x4A9', '\x491', '\x3', '\x2', '\x2', 
		'\x2', '\x4A9', '\x4A0', '\x3', '\x2', '\x2', '\x2', '\x4A9', '\x4A5', 
		'\x3', '\x2', '\x2', '\x2', '\x4AA', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x4AB', '\x4AC', '\x5', 'X', '-', '\x2', '\x4AC', 'W', '\x3', '\x2', 
		'\x2', '\x2', '\x4AD', '\x4AE', '\b', '-', '\x1', '\x2', '\x4AE', '\x4B0', 
		'\x5', '\\', '/', '\x2', '\x4AF', '\x4B1', '\x5', 'Z', '.', '\x2', '\x4B0', 
		'\x4AF', '\x3', '\x2', '\x2', '\x2', '\x4B0', '\x4B1', '\x3', '\x2', '\x2', 
		'\x2', '\x4B1', '\x4B5', '\x3', '\x2', '\x2', '\x2', '\x4B2', '\x4B3', 
		'\a', '~', '\x2', '\x2', '\x4B3', '\x4B5', '\x5', 'X', '-', '\x5', '\x4B4', 
		'\x4AD', '\x3', '\x2', '\x2', '\x2', '\x4B4', '\x4B2', '\x3', '\x2', '\x2', 
		'\x2', '\x4B5', '\x4BE', '\x3', '\x2', '\x2', '\x2', '\x4B6', '\x4B7', 
		'\f', '\x4', '\x2', '\x2', '\x4B7', '\x4B8', '\a', '\x11', '\x2', '\x2', 
		'\x4B8', '\x4BD', '\x5', 'X', '-', '\x5', '\x4B9', '\x4BA', '\f', '\x3', 
		'\x2', '\x2', '\x4BA', '\x4BB', '\a', '\x85', '\x2', '\x2', '\x4BB', '\x4BD', 
		'\x5', 'X', '-', '\x4', '\x4BC', '\x4B6', '\x3', '\x2', '\x2', '\x2', 
		'\x4BC', '\x4B9', '\x3', '\x2', '\x2', '\x2', '\x4BD', '\x4C0', '\x3', 
		'\x2', '\x2', '\x2', '\x4BE', '\x4BC', '\x3', '\x2', '\x2', '\x2', '\x4BE', 
		'\x4BF', '\x3', '\x2', '\x2', '\x2', '\x4BF', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\x4C0', '\x4BE', '\x3', '\x2', '\x2', '\x2', '\x4C1', '\x4C2', 
		'\x5', '\x66', '\x34', '\x2', '\x4C2', '\x4C3', '\x5', '\\', '/', '\x2', 
		'\x4C3', '\x4FF', '\x3', '\x2', '\x2', '\x2', '\x4C4', '\x4C5', '\x5', 
		'\x66', '\x34', '\x2', '\x4C5', '\x4C6', '\x5', 'h', '\x35', '\x2', '\x4C6', 
		'\x4C7', '\a', '\x4', '\x2', '\x2', '\x4C7', '\x4C8', '\x5', '\n', '\x6', 
		'\x2', '\x4C8', '\x4C9', '\a', '\x5', '\x2', '\x2', '\x4C9', '\x4FF', 
		'\x3', '\x2', '\x2', '\x2', '\x4CA', '\x4CC', '\a', '~', '\x2', '\x2', 
		'\x4CB', '\x4CA', '\x3', '\x2', '\x2', '\x2', '\x4CB', '\x4CC', '\x3', 
		'\x2', '\x2', '\x2', '\x4CC', '\x4CD', '\x3', '\x2', '\x2', '\x2', '\x4CD', 
		'\x4CE', '\a', '\x18', '\x2', '\x2', '\x4CE', '\x4CF', '\x5', '\\', '/', 
		'\x2', '\x4CF', '\x4D0', '\a', '\x11', '\x2', '\x2', '\x4D0', '\x4D1', 
		'\x5', '\\', '/', '\x2', '\x4D1', '\x4FF', '\x3', '\x2', '\x2', '\x2', 
		'\x4D2', '\x4D4', '\a', '~', '\x2', '\x2', '\x4D3', '\x4D2', '\x3', '\x2', 
		'\x2', '\x2', '\x4D3', '\x4D4', '\x3', '\x2', '\x2', '\x2', '\x4D4', '\x4D5', 
		'\x3', '\x2', '\x2', '\x2', '\x4D5', '\x4D6', '\a', 'Y', '\x2', '\x2', 
		'\x4D6', '\x4D7', '\a', '\x4', '\x2', '\x2', '\x4D7', '\x4DC', '\x5', 
		'V', ',', '\x2', '\x4D8', '\x4D9', '\a', '\x6', '\x2', '\x2', '\x4D9', 
		'\x4DB', '\x5', 'V', ',', '\x2', '\x4DA', '\x4D8', '\x3', '\x2', '\x2', 
		'\x2', '\x4DB', '\x4DE', '\x3', '\x2', '\x2', '\x2', '\x4DC', '\x4DA', 
		'\x3', '\x2', '\x2', '\x2', '\x4DC', '\x4DD', '\x3', '\x2', '\x2', '\x2', 
		'\x4DD', '\x4DF', '\x3', '\x2', '\x2', '\x2', '\x4DE', '\x4DC', '\x3', 
		'\x2', '\x2', '\x2', '\x4DF', '\x4E0', '\a', '\x5', '\x2', '\x2', '\x4E0', 
		'\x4FF', '\x3', '\x2', '\x2', '\x2', '\x4E1', '\x4E3', '\a', '~', '\x2', 
		'\x2', '\x4E2', '\x4E1', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4E3', 
		'\x3', '\x2', '\x2', '\x2', '\x4E3', '\x4E4', '\x3', '\x2', '\x2', '\x2', 
		'\x4E4', '\x4E5', '\a', 'Y', '\x2', '\x2', '\x4E5', '\x4E6', '\a', '\x4', 
		'\x2', '\x2', '\x4E6', '\x4E7', '\x5', '\n', '\x6', '\x2', '\x4E7', '\x4E8', 
		'\a', '\x5', '\x2', '\x2', '\x4E8', '\x4FF', '\x3', '\x2', '\x2', '\x2', 
		'\x4E9', '\x4EB', '\a', '~', '\x2', '\x2', '\x4EA', '\x4E9', '\x3', '\x2', 
		'\x2', '\x2', '\x4EA', '\x4EB', '\x3', '\x2', '\x2', '\x2', '\x4EB', '\x4EC', 
		'\x3', '\x2', '\x2', '\x2', '\x4EC', '\x4ED', '\a', 'l', '\x2', '\x2', 
		'\x4ED', '\x4F0', '\x5', '\\', '/', '\x2', '\x4EE', '\x4EF', '\a', '=', 
		'\x2', '\x2', '\x4EF', '\x4F1', '\x5', '\\', '/', '\x2', '\x4F0', '\x4EE', 
		'\x3', '\x2', '\x2', '\x2', '\x4F0', '\x4F1', '\x3', '\x2', '\x2', '\x2', 
		'\x4F1', '\x4FF', '\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4F4', '\a', 
		'\x63', '\x2', '\x2', '\x4F3', '\x4F5', '\a', '~', '\x2', '\x2', '\x4F4', 
		'\x4F3', '\x3', '\x2', '\x2', '\x2', '\x4F4', '\x4F5', '\x3', '\x2', '\x2', 
		'\x2', '\x4F5', '\x4F6', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4FF', 
		'\a', '\x7F', '\x2', '\x2', '\x4F7', '\x4F9', '\a', '\x63', '\x2', '\x2', 
		'\x4F8', '\x4FA', '\a', '~', '\x2', '\x2', '\x4F9', '\x4F8', '\x3', '\x2', 
		'\x2', '\x2', '\x4F9', '\x4FA', '\x3', '\x2', '\x2', '\x2', '\x4FA', '\x4FB', 
		'\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4FC', '\a', '\x38', '\x2', '\x2', 
		'\x4FC', '\x4FD', '\a', 'K', '\x2', '\x2', '\x4FD', '\x4FF', '\x5', '\\', 
		'/', '\x2', '\x4FE', '\x4C1', '\x3', '\x2', '\x2', '\x2', '\x4FE', '\x4C4', 
		'\x3', '\x2', '\x2', '\x2', '\x4FE', '\x4CB', '\x3', '\x2', '\x2', '\x2', 
		'\x4FE', '\x4D3', '\x3', '\x2', '\x2', '\x2', '\x4FE', '\x4E2', '\x3', 
		'\x2', '\x2', '\x2', '\x4FE', '\x4EA', '\x3', '\x2', '\x2', '\x2', '\x4FE', 
		'\x4F2', '\x3', '\x2', '\x2', '\x2', '\x4FE', '\x4F7', '\x3', '\x2', '\x2', 
		'\x2', '\x4FF', '[', '\x3', '\x2', '\x2', '\x2', '\x500', '\x501', '\b', 
		'/', '\x1', '\x2', '\x501', '\x505', '\x5', '^', '\x30', '\x2', '\x502', 
		'\x503', '\t', '\f', '\x2', '\x2', '\x503', '\x505', '\x5', '\\', '/', 
		'\x6', '\x504', '\x500', '\x3', '\x2', '\x2', '\x2', '\x504', '\x502', 
		'\x3', '\x2', '\x2', '\x2', '\x505', '\x514', '\x3', '\x2', '\x2', '\x2', 
		'\x506', '\x507', '\f', '\x5', '\x2', '\x2', '\x507', '\x508', '\t', '\r', 
		'\x2', '\x2', '\x508', '\x513', '\x5', '\\', '/', '\x6', '\x509', '\x50A', 
		'\f', '\x4', '\x2', '\x2', '\x50A', '\x50B', '\t', '\f', '\x2', '\x2', 
		'\x50B', '\x513', '\x5', '\\', '/', '\x5', '\x50C', '\x50D', '\f', '\x3', 
		'\x2', '\x2', '\x50D', '\x50E', '\a', '\xE0', '\x2', '\x2', '\x50E', '\x513', 
		'\x5', '\\', '/', '\x4', '\x50F', '\x510', '\f', '\a', '\x2', '\x2', '\x510', 
		'\x511', '\a', '\x16', '\x2', '\x2', '\x511', '\x513', '\x5', '\x64', 
		'\x33', '\x2', '\x512', '\x506', '\x3', '\x2', '\x2', '\x2', '\x512', 
		'\x509', '\x3', '\x2', '\x2', '\x2', '\x512', '\x50C', '\x3', '\x2', '\x2', 
		'\x2', '\x512', '\x50F', '\x3', '\x2', '\x2', '\x2', '\x513', '\x516', 
		'\x3', '\x2', '\x2', '\x2', '\x514', '\x512', '\x3', '\x2', '\x2', '\x2', 
		'\x514', '\x515', '\x3', '\x2', '\x2', '\x2', '\x515', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x516', '\x514', '\x3', '\x2', '\x2', '\x2', '\x517', '\x518', 
		'\b', '\x30', '\x1', '\x2', '\x518', '\x607', '\a', '\x7F', '\x2', '\x2', 
		'\x519', '\x607', '\x5', 'l', '\x37', '\x2', '\x51A', '\x51B', '\x5', 
		'\x96', 'L', '\x2', '\x51B', '\x51C', '\x5', '`', '\x31', '\x2', '\x51C', 
		'\x607', '\x3', '\x2', '\x2', '\x2', '\x51D', '\x51E', '\a', '\xED', '\x2', 
		'\x2', '\x51E', '\x607', '\x5', '`', '\x31', '\x2', '\x51F', '\x607', 
		'\x5', '\x98', 'M', '\x2', '\x520', '\x607', '\x5', 'j', '\x36', '\x2', 
		'\x521', '\x607', '\x5', '`', '\x31', '\x2', '\x522', '\x607', '\a', '\xE3', 
		'\x2', '\x2', '\x523', '\x607', '\a', '\a', '\x2', '\x2', '\x524', '\x525', 
		'\a', '\x8D', '\x2', '\x2', '\x525', '\x526', '\a', '\x4', '\x2', '\x2', 
		'\x526', '\x527', '\x5', '\\', '/', '\x2', '\x527', '\x528', '\a', 'Y', 
		'\x2', '\x2', '\x528', '\x529', '\x5', '\\', '/', '\x2', '\x529', '\x52A', 
		'\a', '\x5', '\x2', '\x2', '\x52A', '\x607', '\x3', '\x2', '\x2', '\x2', 
		'\x52B', '\x52C', '\a', '\x4', '\x2', '\x2', '\x52C', '\x52F', '\x5', 
		'V', ',', '\x2', '\x52D', '\x52E', '\a', '\x6', '\x2', '\x2', '\x52E', 
		'\x530', '\x5', 'V', ',', '\x2', '\x52F', '\x52D', '\x3', '\x2', '\x2', 
		'\x2', '\x530', '\x531', '\x3', '\x2', '\x2', '\x2', '\x531', '\x52F', 
		'\x3', '\x2', '\x2', '\x2', '\x531', '\x532', '\x3', '\x2', '\x2', '\x2', 
		'\x532', '\x533', '\x3', '\x2', '\x2', '\x2', '\x533', '\x534', '\a', 
		'\x5', '\x2', '\x2', '\x534', '\x607', '\x3', '\x2', '\x2', '\x2', '\x535', 
		'\x536', '\a', '\xA3', '\x2', '\x2', '\x536', '\x537', '\a', '\x4', '\x2', 
		'\x2', '\x537', '\x53C', '\x5', 'V', ',', '\x2', '\x538', '\x539', '\a', 
		'\x6', '\x2', '\x2', '\x539', '\x53B', '\x5', 'V', ',', '\x2', '\x53A', 
		'\x538', '\x3', '\x2', '\x2', '\x2', '\x53B', '\x53E', '\x3', '\x2', '\x2', 
		'\x2', '\x53C', '\x53A', '\x3', '\x2', '\x2', '\x2', '\x53C', '\x53D', 
		'\x3', '\x2', '\x2', '\x2', '\x53D', '\x53F', '\x3', '\x2', '\x2', '\x2', 
		'\x53E', '\x53C', '\x3', '\x2', '\x2', '\x2', '\x53F', '\x540', '\a', 
		'\x5', '\x2', '\x2', '\x540', '\x607', '\x3', '\x2', '\x2', '\x2', '\x541', 
		'\x542', '\x5', '\x8E', 'H', '\x2', '\x542', '\x543', '\a', '\x4', '\x2', 
		'\x2', '\x543', '\x544', '\a', '\xDD', '\x2', '\x2', '\x544', '\x546', 
		'\a', '\x5', '\x2', '\x2', '\x545', '\x547', '\x5', '|', '?', '\x2', '\x546', 
		'\x545', '\x3', '\x2', '\x2', '\x2', '\x546', '\x547', '\x3', '\x2', '\x2', 
		'\x2', '\x547', '\x549', '\x3', '\x2', '\x2', '\x2', '\x548', '\x54A', 
		'\x5', '~', '@', '\x2', '\x549', '\x548', '\x3', '\x2', '\x2', '\x2', 
		'\x549', '\x54A', '\x3', '\x2', '\x2', '\x2', '\x54A', '\x607', '\x3', 
		'\x2', '\x2', '\x2', '\x54B', '\x54C', '\x5', '\x8E', 'H', '\x2', '\x54C', 
		'\x558', '\a', '\x4', '\x2', '\x2', '\x54D', '\x54F', '\x5', '\x42', '\"', 
		'\x2', '\x54E', '\x54D', '\x3', '\x2', '\x2', '\x2', '\x54E', '\x54F', 
		'\x3', '\x2', '\x2', '\x2', '\x54F', '\x550', '\x3', '\x2', '\x2', '\x2', 
		'\x550', '\x555', '\x5', 'V', ',', '\x2', '\x551', '\x552', '\a', '\x6', 
		'\x2', '\x2', '\x552', '\x554', '\x5', 'V', ',', '\x2', '\x553', '\x551', 
		'\x3', '\x2', '\x2', '\x2', '\x554', '\x557', '\x3', '\x2', '\x2', '\x2', 
		'\x555', '\x553', '\x3', '\x2', '\x2', '\x2', '\x555', '\x556', '\x3', 
		'\x2', '\x2', '\x2', '\x556', '\x559', '\x3', '\x2', '\x2', '\x2', '\x557', 
		'\x555', '\x3', '\x2', '\x2', '\x2', '\x558', '\x54E', '\x3', '\x2', '\x2', 
		'\x2', '\x558', '\x559', '\x3', '\x2', '\x2', '\x2', '\x559', '\x564', 
		'\x3', '\x2', '\x2', '\x2', '\x55A', '\x55B', '\a', '\x86', '\x2', '\x2', 
		'\x55B', '\x55C', '\a', '\x19', '\x2', '\x2', '\x55C', '\x561', '\x5', 
		'\x36', '\x1C', '\x2', '\x55D', '\x55E', '\a', '\x6', '\x2', '\x2', '\x55E', 
		'\x560', '\x5', '\x36', '\x1C', '\x2', '\x55F', '\x55D', '\x3', '\x2', 
		'\x2', '\x2', '\x560', '\x563', '\x3', '\x2', '\x2', '\x2', '\x561', '\x55F', 
		'\x3', '\x2', '\x2', '\x2', '\x561', '\x562', '\x3', '\x2', '\x2', '\x2', 
		'\x562', '\x565', '\x3', '\x2', '\x2', '\x2', '\x563', '\x561', '\x3', 
		'\x2', '\x2', '\x2', '\x564', '\x55A', '\x3', '\x2', '\x2', '\x2', '\x564', 
		'\x565', '\x3', '\x2', '\x2', '\x2', '\x565', '\x566', '\x3', '\x2', '\x2', 
		'\x2', '\x566', '\x568', '\a', '\x5', '\x2', '\x2', '\x567', '\x569', 
		'\x5', '|', '?', '\x2', '\x568', '\x567', '\x3', '\x2', '\x2', '\x2', 
		'\x568', '\x569', '\x3', '\x2', '\x2', '\x2', '\x569', '\x56E', '\x3', 
		'\x2', '\x2', '\x2', '\x56A', '\x56C', '\x5', '\x62', '\x32', '\x2', '\x56B', 
		'\x56A', '\x3', '\x2', '\x2', '\x2', '\x56B', '\x56C', '\x3', '\x2', '\x2', 
		'\x2', '\x56C', '\x56D', '\x3', '\x2', '\x2', '\x2', '\x56D', '\x56F', 
		'\x5', '~', '@', '\x2', '\x56E', '\x56B', '\x3', '\x2', '\x2', '\x2', 
		'\x56E', '\x56F', '\x3', '\x2', '\x2', '\x2', '\x56F', '\x607', '\x3', 
		'\x2', '\x2', '\x2', '\x570', '\x571', '\x5', '\x96', 'L', '\x2', '\x571', 
		'\x572', '\a', '\b', '\x2', '\x2', '\x572', '\x573', '\x5', 'V', ',', 
		'\x2', '\x573', '\x607', '\x3', '\x2', '\x2', '\x2', '\x574', '\x57D', 
		'\a', '\x4', '\x2', '\x2', '\x575', '\x57A', '\x5', '\x96', 'L', '\x2', 
		'\x576', '\x577', '\a', '\x6', '\x2', '\x2', '\x577', '\x579', '\x5', 
		'\x96', 'L', '\x2', '\x578', '\x576', '\x3', '\x2', '\x2', '\x2', '\x579', 
		'\x57C', '\x3', '\x2', '\x2', '\x2', '\x57A', '\x578', '\x3', '\x2', '\x2', 
		'\x2', '\x57A', '\x57B', '\x3', '\x2', '\x2', '\x2', '\x57B', '\x57E', 
		'\x3', '\x2', '\x2', '\x2', '\x57C', '\x57A', '\x3', '\x2', '\x2', '\x2', 
		'\x57D', '\x575', '\x3', '\x2', '\x2', '\x2', '\x57D', '\x57E', '\x3', 
		'\x2', '\x2', '\x2', '\x57E', '\x57F', '\x3', '\x2', '\x2', '\x2', '\x57F', 
		'\x580', '\a', '\x5', '\x2', '\x2', '\x580', '\x581', '\a', '\b', '\x2', 
		'\x2', '\x581', '\x607', '\x5', 'V', ',', '\x2', '\x582', '\x583', '\a', 
		'\x4', '\x2', '\x2', '\x583', '\x584', '\x5', '\n', '\x6', '\x2', '\x584', 
		'\x585', '\a', '\x5', '\x2', '\x2', '\x585', '\x607', '\x3', '\x2', '\x2', 
		'\x2', '\x586', '\x587', '\a', '\x41', '\x2', '\x2', '\x587', '\x588', 
		'\a', '\x4', '\x2', '\x2', '\x588', '\x589', '\x5', '\n', '\x6', '\x2', 
		'\x589', '\x58A', '\a', '\x5', '\x2', '\x2', '\x58A', '\x607', '\x3', 
		'\x2', '\x2', '\x2', '\x58B', '\x58C', '\a', '\x1D', '\x2', '\x2', '\x58C', 
		'\x58E', '\x5', '\\', '/', '\x2', '\x58D', '\x58F', '\x5', 'z', '>', '\x2', 
		'\x58E', '\x58D', '\x3', '\x2', '\x2', '\x2', '\x58F', '\x590', '\x3', 
		'\x2', '\x2', '\x2', '\x590', '\x58E', '\x3', '\x2', '\x2', '\x2', '\x590', 
		'\x591', '\x3', '\x2', '\x2', '\x2', '\x591', '\x594', '\x3', '\x2', '\x2', 
		'\x2', '\x592', '\x593', '\a', ';', '\x2', '\x2', '\x593', '\x595', '\x5', 
		'V', ',', '\x2', '\x594', '\x592', '\x3', '\x2', '\x2', '\x2', '\x594', 
		'\x595', '\x3', '\x2', '\x2', '\x2', '\x595', '\x596', '\x3', '\x2', '\x2', 
		'\x2', '\x596', '\x597', '\a', '<', '\x2', '\x2', '\x597', '\x607', '\x3', 
		'\x2', '\x2', '\x2', '\x598', '\x59A', '\a', '\x1D', '\x2', '\x2', '\x599', 
		'\x59B', '\x5', 'z', '>', '\x2', '\x59A', '\x599', '\x3', '\x2', '\x2', 
		'\x2', '\x59B', '\x59C', '\x3', '\x2', '\x2', '\x2', '\x59C', '\x59A', 
		'\x3', '\x2', '\x2', '\x2', '\x59C', '\x59D', '\x3', '\x2', '\x2', '\x2', 
		'\x59D', '\x5A0', '\x3', '\x2', '\x2', '\x2', '\x59E', '\x59F', '\a', 
		';', '\x2', '\x2', '\x59F', '\x5A1', '\x5', 'V', ',', '\x2', '\x5A0', 
		'\x59E', '\x3', '\x2', '\x2', '\x2', '\x5A0', '\x5A1', '\x3', '\x2', '\x2', 
		'\x2', '\x5A1', '\x5A2', '\x3', '\x2', '\x2', '\x2', '\x5A2', '\x5A3', 
		'\a', '<', '\x2', '\x2', '\x5A3', '\x607', '\x3', '\x2', '\x2', '\x2', 
		'\x5A4', '\x5A5', '\a', '\x1E', '\x2', '\x2', '\x5A5', '\x5A6', '\a', 
		'\x4', '\x2', '\x2', '\x5A6', '\x5A7', '\x5', 'V', ',', '\x2', '\x5A7', 
		'\x5A8', '\a', '\x14', '\x2', '\x2', '\x5A8', '\x5A9', '\x5', 't', ';', 
		'\x2', '\x5A9', '\x5AA', '\a', '\x5', '\x2', '\x2', '\x5AA', '\x607', 
		'\x3', '\x2', '\x2', '\x2', '\x5AB', '\x5AC', '\a', '\xC0', '\x2', '\x2', 
		'\x5AC', '\x5AD', '\a', '\x4', '\x2', '\x2', '\x5AD', '\x5AE', '\x5', 
		'V', ',', '\x2', '\x5AE', '\x5AF', '\a', '\x14', '\x2', '\x2', '\x5AF', 
		'\x5B0', '\x5', 't', ';', '\x2', '\x5B0', '\x5B1', '\a', '\x5', '\x2', 
		'\x2', '\x5B1', '\x607', '\x3', '\x2', '\x2', '\x2', '\x5B2', '\x5B3', 
		'\a', '\x13', '\x2', '\x2', '\x5B3', '\x5BC', '\a', '\t', '\x2', '\x2', 
		'\x5B4', '\x5B9', '\x5', 'V', ',', '\x2', '\x5B5', '\x5B6', '\a', '\x6', 
		'\x2', '\x2', '\x5B6', '\x5B8', '\x5', 'V', ',', '\x2', '\x5B7', '\x5B5', 
		'\x3', '\x2', '\x2', '\x2', '\x5B8', '\x5BB', '\x3', '\x2', '\x2', '\x2', 
		'\x5B9', '\x5B7', '\x3', '\x2', '\x2', '\x2', '\x5B9', '\x5BA', '\x3', 
		'\x2', '\x2', '\x2', '\x5BA', '\x5BD', '\x3', '\x2', '\x2', '\x2', '\x5BB', 
		'\x5B9', '\x3', '\x2', '\x2', '\x2', '\x5BC', '\x5B4', '\x3', '\x2', '\x2', 
		'\x2', '\x5BC', '\x5BD', '\x3', '\x2', '\x2', '\x2', '\x5BD', '\x5BE', 
		'\x3', '\x2', '\x2', '\x2', '\x5BE', '\x607', '\a', '\n', '\x2', '\x2', 
		'\x5BF', '\x607', '\x5', '\x96', 'L', '\x2', '\x5C0', '\x607', '\a', '*', 
		'\x2', '\x2', '\x5C1', '\x5C5', '\a', ',', '\x2', '\x2', '\x5C2', '\x5C3', 
		'\a', '\x4', '\x2', '\x2', '\x5C3', '\x5C4', '\a', '\xE4', '\x2', '\x2', 
		'\x5C4', '\x5C6', '\a', '\x5', '\x2', '\x2', '\x5C5', '\x5C2', '\x3', 
		'\x2', '\x2', '\x2', '\x5C5', '\x5C6', '\x3', '\x2', '\x2', '\x2', '\x5C6', 
		'\x607', '\x3', '\x2', '\x2', '\x2', '\x5C7', '\x5CB', '\a', '-', '\x2', 
		'\x2', '\x5C8', '\x5C9', '\a', '\x4', '\x2', '\x2', '\x5C9', '\x5CA', 
		'\a', '\xE4', '\x2', '\x2', '\x5CA', '\x5CC', '\a', '\x5', '\x2', '\x2', 
		'\x5CB', '\x5C8', '\x3', '\x2', '\x2', '\x2', '\x5CB', '\x5CC', '\x3', 
		'\x2', '\x2', '\x2', '\x5CC', '\x607', '\x3', '\x2', '\x2', '\x2', '\x5CD', 
		'\x5D1', '\a', 'n', '\x2', '\x2', '\x5CE', '\x5CF', '\a', '\x4', '\x2', 
		'\x2', '\x5CF', '\x5D0', '\a', '\xE4', '\x2', '\x2', '\x5D0', '\x5D2', 
		'\a', '\x5', '\x2', '\x2', '\x5D1', '\x5CE', '\x3', '\x2', '\x2', '\x2', 
		'\x5D1', '\x5D2', '\x3', '\x2', '\x2', '\x2', '\x5D2', '\x607', '\x3', 
		'\x2', '\x2', '\x2', '\x5D3', '\x5D7', '\a', 'o', '\x2', '\x2', '\x5D4', 
		'\x5D5', '\a', '\x4', '\x2', '\x2', '\x5D5', '\x5D6', '\a', '\xE4', '\x2', 
		'\x2', '\x5D6', '\x5D8', '\a', '\x5', '\x2', '\x2', '\x5D7', '\x5D4', 
		'\x3', '\x2', '\x2', '\x2', '\x5D7', '\x5D8', '\x3', '\x2', '\x2', '\x2', 
		'\x5D8', '\x607', '\x3', '\x2', '\x2', '\x2', '\x5D9', '\x607', '\a', 
		'.', '\x2', '\x2', '\x5DA', '\x5DB', '\a', '\xB3', '\x2', '\x2', '\x5DB', 
		'\x5DC', '\a', '\x4', '\x2', '\x2', '\x5DC', '\x5DD', '\x5', '\\', '/', 
		'\x2', '\x5DD', '\x5DE', '\a', 'K', '\x2', '\x2', '\x5DE', '\x5E1', '\x5', 
		'\\', '/', '\x2', '\x5DF', '\x5E0', '\a', 'I', '\x2', '\x2', '\x5E0', 
		'\x5E2', '\x5', '\\', '/', '\x2', '\x5E1', '\x5DF', '\x3', '\x2', '\x2', 
		'\x2', '\x5E1', '\x5E2', '\x3', '\x2', '\x2', '\x2', '\x5E2', '\x5E3', 
		'\x3', '\x2', '\x2', '\x2', '\x5E3', '\x5E4', '\a', '\x5', '\x2', '\x2', 
		'\x5E4', '\x607', '\x3', '\x2', '\x2', '\x2', '\x5E5', '\x5E6', '\a', 
		'}', '\x2', '\x2', '\x5E6', '\x5E7', '\a', '\x4', '\x2', '\x2', '\x5E7', 
		'\x5EA', '\x5', '\\', '/', '\x2', '\x5E8', '\x5E9', '\a', '\x6', '\x2', 
		'\x2', '\x5E9', '\x5EB', '\x5', 'p', '\x39', '\x2', '\x5EA', '\x5E8', 
		'\x3', '\x2', '\x2', '\x2', '\x5EA', '\x5EB', '\x3', '\x2', '\x2', '\x2', 
		'\x5EB', '\x5EC', '\x3', '\x2', '\x2', '\x2', '\x5EC', '\x5ED', '\a', 
		'\x5', '\x2', '\x2', '\x5ED', '\x607', '\x3', '\x2', '\x2', '\x2', '\x5EE', 
		'\x5EF', '\a', '\x43', '\x2', '\x2', '\x5EF', '\x5F0', '\a', '\x4', '\x2', 
		'\x2', '\x5F0', '\x5F1', '\x5', '\x96', 'L', '\x2', '\x5F1', '\x5F2', 
		'\a', 'K', '\x2', '\x2', '\x5F2', '\x5F3', '\x5', '\\', '/', '\x2', '\x5F3', 
		'\x5F4', '\a', '\x5', '\x2', '\x2', '\x5F4', '\x607', '\x3', '\x2', '\x2', 
		'\x2', '\x5F5', '\x5F6', '\a', '\x4', '\x2', '\x2', '\x5F6', '\x5F7', 
		'\x5', 'V', ',', '\x2', '\x5F7', '\x5F8', '\a', '\x5', '\x2', '\x2', '\x5F8', 
		'\x607', '\x3', '\x2', '\x2', '\x2', '\x5F9', '\x5FA', '\a', 'T', '\x2', 
		'\x2', '\x5FA', '\x603', '\a', '\x4', '\x2', '\x2', '\x5FB', '\x600', 
		'\x5', '\x8E', 'H', '\x2', '\x5FC', '\x5FD', '\a', '\x6', '\x2', '\x2', 
		'\x5FD', '\x5FF', '\x5', '\x8E', 'H', '\x2', '\x5FE', '\x5FC', '\x3', 
		'\x2', '\x2', '\x2', '\x5FF', '\x602', '\x3', '\x2', '\x2', '\x2', '\x600', 
		'\x5FE', '\x3', '\x2', '\x2', '\x2', '\x600', '\x601', '\x3', '\x2', '\x2', 
		'\x2', '\x601', '\x604', '\x3', '\x2', '\x2', '\x2', '\x602', '\x600', 
		'\x3', '\x2', '\x2', '\x2', '\x603', '\x5FB', '\x3', '\x2', '\x2', '\x2', 
		'\x603', '\x604', '\x3', '\x2', '\x2', '\x2', '\x604', '\x605', '\x3', 
		'\x2', '\x2', '\x2', '\x605', '\x607', '\a', '\x5', '\x2', '\x2', '\x606', 
		'\x517', '\x3', '\x2', '\x2', '\x2', '\x606', '\x519', '\x3', '\x2', '\x2', 
		'\x2', '\x606', '\x51A', '\x3', '\x2', '\x2', '\x2', '\x606', '\x51D', 
		'\x3', '\x2', '\x2', '\x2', '\x606', '\x51F', '\x3', '\x2', '\x2', '\x2', 
		'\x606', '\x520', '\x3', '\x2', '\x2', '\x2', '\x606', '\x521', '\x3', 
		'\x2', '\x2', '\x2', '\x606', '\x522', '\x3', '\x2', '\x2', '\x2', '\x606', 
		'\x523', '\x3', '\x2', '\x2', '\x2', '\x606', '\x524', '\x3', '\x2', '\x2', 
		'\x2', '\x606', '\x52B', '\x3', '\x2', '\x2', '\x2', '\x606', '\x535', 
		'\x3', '\x2', '\x2', '\x2', '\x606', '\x541', '\x3', '\x2', '\x2', '\x2', 
		'\x606', '\x54B', '\x3', '\x2', '\x2', '\x2', '\x606', '\x570', '\x3', 
		'\x2', '\x2', '\x2', '\x606', '\x574', '\x3', '\x2', '\x2', '\x2', '\x606', 
		'\x582', '\x3', '\x2', '\x2', '\x2', '\x606', '\x586', '\x3', '\x2', '\x2', 
		'\x2', '\x606', '\x58B', '\x3', '\x2', '\x2', '\x2', '\x606', '\x598', 
		'\x3', '\x2', '\x2', '\x2', '\x606', '\x5A4', '\x3', '\x2', '\x2', '\x2', 
		'\x606', '\x5AB', '\x3', '\x2', '\x2', '\x2', '\x606', '\x5B2', '\x3', 
		'\x2', '\x2', '\x2', '\x606', '\x5BF', '\x3', '\x2', '\x2', '\x2', '\x606', 
		'\x5C0', '\x3', '\x2', '\x2', '\x2', '\x606', '\x5C1', '\x3', '\x2', '\x2', 
		'\x2', '\x606', '\x5C7', '\x3', '\x2', '\x2', '\x2', '\x606', '\x5CD', 
		'\x3', '\x2', '\x2', '\x2', '\x606', '\x5D3', '\x3', '\x2', '\x2', '\x2', 
		'\x606', '\x5D9', '\x3', '\x2', '\x2', '\x2', '\x606', '\x5DA', '\x3', 
		'\x2', '\x2', '\x2', '\x606', '\x5E5', '\x3', '\x2', '\x2', '\x2', '\x606', 
		'\x5EE', '\x3', '\x2', '\x2', '\x2', '\x606', '\x5F5', '\x3', '\x2', '\x2', 
		'\x2', '\x606', '\x5F9', '\x3', '\x2', '\x2', '\x2', '\x607', '\x612', 
		'\x3', '\x2', '\x2', '\x2', '\x608', '\x609', '\f', '\x10', '\x2', '\x2', 
		'\x609', '\x60A', '\a', '\t', '\x2', '\x2', '\x60A', '\x60B', '\x5', '\\', 
		'/', '\x2', '\x60B', '\x60C', '\a', '\n', '\x2', '\x2', '\x60C', '\x611', 
		'\x3', '\x2', '\x2', '\x2', '\x60D', '\x60E', '\f', '\xE', '\x2', '\x2', 
		'\x60E', '\x60F', '\a', '\x3', '\x2', '\x2', '\x60F', '\x611', '\x5', 
		'\x96', 'L', '\x2', '\x610', '\x608', '\x3', '\x2', '\x2', '\x2', '\x610', 
		'\x60D', '\x3', '\x2', '\x2', '\x2', '\x611', '\x614', '\x3', '\x2', '\x2', 
		'\x2', '\x612', '\x610', '\x3', '\x2', '\x2', '\x2', '\x612', '\x613', 
		'\x3', '\x2', '\x2', '\x2', '\x613', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x614', '\x612', '\x3', '\x2', '\x2', '\x2', '\x615', '\x61C', '\a', 
		'\xE1', '\x2', '\x2', '\x616', '\x619', '\a', '\xE2', '\x2', '\x2', '\x617', 
		'\x618', '\a', '\xC2', '\x2', '\x2', '\x618', '\x61A', '\a', '\xE1', '\x2', 
		'\x2', '\x619', '\x617', '\x3', '\x2', '\x2', '\x2', '\x619', '\x61A', 
		'\x3', '\x2', '\x2', '\x2', '\x61A', '\x61C', '\x3', '\x2', '\x2', '\x2', 
		'\x61B', '\x615', '\x3', '\x2', '\x2', '\x2', '\x61B', '\x616', '\x3', 
		'\x2', '\x2', '\x2', '\x61C', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61D', 
		'\x61E', '\a', 'X', '\x2', '\x2', '\x61E', '\x622', '\a', '\x81', '\x2', 
		'\x2', '\x61F', '\x620', '\a', '\x99', '\x2', '\x2', '\x620', '\x622', 
		'\a', '\x81', '\x2', '\x2', '\x621', '\x61D', '\x3', '\x2', '\x2', '\x2', 
		'\x621', '\x61F', '\x3', '\x2', '\x2', '\x2', '\x622', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x623', '\x624', '\a', '\xBB', '\x2', '\x2', '\x624', 
		'\x625', '\a', '\xD4', '\x2', '\x2', '\x625', '\x62A', '\x5', 'l', '\x37', 
		'\x2', '\x626', '\x627', '\a', '\xBB', '\x2', '\x2', '\x627', '\x628', 
		'\a', '\xD4', '\x2', '\x2', '\x628', '\x62A', '\x5', '`', '\x31', '\x2', 
		'\x629', '\x623', '\x3', '\x2', '\x2', '\x2', '\x629', '\x626', '\x3', 
		'\x2', '\x2', '\x2', '\x62A', '\x65', '\x3', '\x2', '\x2', '\x2', '\x62B', 
		'\x62C', '\t', '\xE', '\x2', '\x2', '\x62C', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x62D', '\x62E', '\t', '\xF', '\x2', '\x2', '\x62E', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\x62F', '\x630', '\t', '\x10', '\x2', '\x2', '\x630', 
		'k', '\x3', '\x2', '\x2', '\x2', '\x631', '\x633', '\a', '_', '\x2', '\x2', 
		'\x632', '\x634', '\t', '\f', '\x2', '\x2', '\x633', '\x632', '\x3', '\x2', 
		'\x2', '\x2', '\x633', '\x634', '\x3', '\x2', '\x2', '\x2', '\x634', '\x635', 
		'\x3', '\x2', '\x2', '\x2', '\x635', '\x636', '\x5', '`', '\x31', '\x2', 
		'\x636', '\x639', '\x5', 'n', '\x38', '\x2', '\x637', '\x638', '\a', '\xBD', 
		'\x2', '\x2', '\x638', '\x63A', '\x5', 'n', '\x38', '\x2', '\x639', '\x637', 
		'\x3', '\x2', '\x2', '\x2', '\x639', '\x63A', '\x3', '\x2', '\x2', '\x2', 
		'\x63A', 'm', '\x3', '\x2', '\x2', '\x2', '\x63B', '\x63C', '\t', '\x11', 
		'\x2', '\x2', '\x63C', 'o', '\x3', '\x2', '\x2', '\x2', '\x63D', '\x63E', 
		'\t', '\x12', '\x2', '\x2', '\x63E', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x63F', '\x648', '\a', '\x4', '\x2', '\x2', '\x640', '\x645', '\x5', 
		't', ';', '\x2', '\x641', '\x642', '\a', '\x6', '\x2', '\x2', '\x642', 
		'\x644', '\x5', 't', ';', '\x2', '\x643', '\x641', '\x3', '\x2', '\x2', 
		'\x2', '\x644', '\x647', '\x3', '\x2', '\x2', '\x2', '\x645', '\x643', 
		'\x3', '\x2', '\x2', '\x2', '\x645', '\x646', '\x3', '\x2', '\x2', '\x2', 
		'\x646', '\x649', '\x3', '\x2', '\x2', '\x2', '\x647', '\x645', '\x3', 
		'\x2', '\x2', '\x2', '\x648', '\x640', '\x3', '\x2', '\x2', '\x2', '\x648', 
		'\x649', '\x3', '\x2', '\x2', '\x2', '\x649', '\x64A', '\x3', '\x2', '\x2', 
		'\x2', '\x64A', '\x64B', '\a', '\x5', '\x2', '\x2', '\x64B', 's', '\x3', 
		'\x2', '\x2', '\x2', '\x64C', '\x64D', '\b', ';', '\x1', '\x2', '\x64D', 
		'\x64E', '\a', '\x13', '\x2', '\x2', '\x64E', '\x64F', '\a', '\xD7', '\x2', 
		'\x2', '\x64F', '\x650', '\x5', 't', ';', '\x2', '\x650', '\x651', '\a', 
		'\xD9', '\x2', '\x2', '\x651', '\x67C', '\x3', '\x2', '\x2', '\x2', '\x652', 
		'\x653', '\a', 'q', '\x2', '\x2', '\x653', '\x654', '\a', '\xD7', '\x2', 
		'\x2', '\x654', '\x655', '\x5', 't', ';', '\x2', '\x655', '\x656', '\a', 
		'\x6', '\x2', '\x2', '\x656', '\x657', '\x5', 't', ';', '\x2', '\x657', 
		'\x658', '\a', '\xD9', '\x2', '\x2', '\x658', '\x67C', '\x3', '\x2', '\x2', 
		'\x2', '\x659', '\x65A', '\a', '\xA3', '\x2', '\x2', '\x65A', '\x65B', 
		'\a', '\x4', '\x2', '\x2', '\x65B', '\x65C', '\x5', '\x96', 'L', '\x2', 
		'\x65C', '\x663', '\x5', 't', ';', '\x2', '\x65D', '\x65E', '\a', '\x6', 
		'\x2', '\x2', '\x65E', '\x65F', '\x5', '\x96', 'L', '\x2', '\x65F', '\x660', 
		'\x5', 't', ';', '\x2', '\x660', '\x662', '\x3', '\x2', '\x2', '\x2', 
		'\x661', '\x65D', '\x3', '\x2', '\x2', '\x2', '\x662', '\x665', '\x3', 
		'\x2', '\x2', '\x2', '\x663', '\x661', '\x3', '\x2', '\x2', '\x2', '\x663', 
		'\x664', '\x3', '\x2', '\x2', '\x2', '\x664', '\x666', '\x3', '\x2', '\x2', 
		'\x2', '\x665', '\x663', '\x3', '\x2', '\x2', '\x2', '\x666', '\x667', 
		'\a', '\x5', '\x2', '\x2', '\x667', '\x67C', '\x3', '\x2', '\x2', '\x2', 
		'\x668', '\x674', '\x5', 'x', '=', '\x2', '\x669', '\x66A', '\a', '\x4', 
		'\x2', '\x2', '\x66A', '\x66F', '\x5', 'v', '<', '\x2', '\x66B', '\x66C', 
		'\a', '\x6', '\x2', '\x2', '\x66C', '\x66E', '\x5', 'v', '<', '\x2', '\x66D', 
		'\x66B', '\x3', '\x2', '\x2', '\x2', '\x66E', '\x671', '\x3', '\x2', '\x2', 
		'\x2', '\x66F', '\x66D', '\x3', '\x2', '\x2', '\x2', '\x66F', '\x670', 
		'\x3', '\x2', '\x2', '\x2', '\x670', '\x672', '\x3', '\x2', '\x2', '\x2', 
		'\x671', '\x66F', '\x3', '\x2', '\x2', '\x2', '\x672', '\x673', '\a', 
		'\x5', '\x2', '\x2', '\x673', '\x675', '\x3', '\x2', '\x2', '\x2', '\x674', 
		'\x669', '\x3', '\x2', '\x2', '\x2', '\x674', '\x675', '\x3', '\x2', '\x2', 
		'\x2', '\x675', '\x67C', '\x3', '\x2', '\x2', '\x2', '\x676', '\x677', 
		'\a', '_', '\x2', '\x2', '\x677', '\x678', '\x5', 'n', '\x38', '\x2', 
		'\x678', '\x679', '\a', '\xBD', '\x2', '\x2', '\x679', '\x67A', '\x5', 
		'n', '\x38', '\x2', '\x67A', '\x67C', '\x3', '\x2', '\x2', '\x2', '\x67B', 
		'\x64C', '\x3', '\x2', '\x2', '\x2', '\x67B', '\x652', '\x3', '\x2', '\x2', 
		'\x2', '\x67B', '\x659', '\x3', '\x2', '\x2', '\x2', '\x67B', '\x668', 
		'\x3', '\x2', '\x2', '\x2', '\x67B', '\x676', '\x3', '\x2', '\x2', '\x2', 
		'\x67C', '\x681', '\x3', '\x2', '\x2', '\x2', '\x67D', '\x67E', '\f', 
		'\b', '\x2', '\x2', '\x67E', '\x680', '\a', '\x13', '\x2', '\x2', '\x67F', 
		'\x67D', '\x3', '\x2', '\x2', '\x2', '\x680', '\x683', '\x3', '\x2', '\x2', 
		'\x2', '\x681', '\x67F', '\x3', '\x2', '\x2', '\x2', '\x681', '\x682', 
		'\x3', '\x2', '\x2', '\x2', '\x682', 'u', '\x3', '\x2', '\x2', '\x2', 
		'\x683', '\x681', '\x3', '\x2', '\x2', '\x2', '\x684', '\x687', '\a', 
		'\xE4', '\x2', '\x2', '\x685', '\x687', '\x5', 't', ';', '\x2', '\x686', 
		'\x684', '\x3', '\x2', '\x2', '\x2', '\x686', '\x685', '\x3', '\x2', '\x2', 
		'\x2', '\x687', 'w', '\x3', '\x2', '\x2', '\x2', '\x688', '\x68D', '\a', 
		'\xEB', '\x2', '\x2', '\x689', '\x68D', '\a', '\xEC', '\x2', '\x2', '\x68A', 
		'\x68D', '\a', '\xED', '\x2', '\x2', '\x68B', '\x68D', '\x5', '\x8E', 
		'H', '\x2', '\x68C', '\x688', '\x3', '\x2', '\x2', '\x2', '\x68C', '\x689', 
		'\x3', '\x2', '\x2', '\x2', '\x68C', '\x68A', '\x3', '\x2', '\x2', '\x2', 
		'\x68C', '\x68B', '\x3', '\x2', '\x2', '\x2', '\x68D', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x68E', '\x68F', '\a', '\xCE', '\x2', '\x2', '\x68F', '\x690', 
		'\x5', 'V', ',', '\x2', '\x690', '\x691', '\a', '\xBA', '\x2', '\x2', 
		'\x691', '\x692', '\x5', 'V', ',', '\x2', '\x692', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x693', '\x694', '\a', '\x46', '\x2', '\x2', '\x694', '\x695', 
		'\a', '\x4', '\x2', '\x2', '\x695', '\x696', '\a', '\xCF', '\x2', '\x2', 
		'\x696', '\x697', '\x5', 'X', '-', '\x2', '\x697', '\x698', '\a', '\x5', 
		'\x2', '\x2', '\x698', '}', '\x3', '\x2', '\x2', '\x2', '\x699', '\x69A', 
		'\a', '\x8A', '\x2', '\x2', '\x69A', '\x6A5', '\a', '\x4', '\x2', '\x2', 
		'\x69B', '\x69C', '\a', '\x8B', '\x2', '\x2', '\x69C', '\x69D', '\a', 
		'\x19', '\x2', '\x2', '\x69D', '\x6A2', '\x5', 'V', ',', '\x2', '\x69E', 
		'\x69F', '\a', '\x6', '\x2', '\x2', '\x69F', '\x6A1', '\x5', 'V', ',', 
		'\x2', '\x6A0', '\x69E', '\x3', '\x2', '\x2', '\x2', '\x6A1', '\x6A4', 
		'\x3', '\x2', '\x2', '\x2', '\x6A2', '\x6A0', '\x3', '\x2', '\x2', '\x2', 
		'\x6A2', '\x6A3', '\x3', '\x2', '\x2', '\x2', '\x6A3', '\x6A6', '\x3', 
		'\x2', '\x2', '\x2', '\x6A4', '\x6A2', '\x3', '\x2', '\x2', '\x2', '\x6A5', 
		'\x69B', '\x3', '\x2', '\x2', '\x2', '\x6A5', '\x6A6', '\x3', '\x2', '\x2', 
		'\x2', '\x6A6', '\x6B1', '\x3', '\x2', '\x2', '\x2', '\x6A7', '\x6A8', 
		'\a', '\x86', '\x2', '\x2', '\x6A8', '\x6A9', '\a', '\x19', '\x2', '\x2', 
		'\x6A9', '\x6AE', '\x5', '\x36', '\x1C', '\x2', '\x6AA', '\x6AB', '\a', 
		'\x6', '\x2', '\x2', '\x6AB', '\x6AD', '\x5', '\x36', '\x1C', '\x2', '\x6AC', 
		'\x6AA', '\x3', '\x2', '\x2', '\x2', '\x6AD', '\x6B0', '\x3', '\x2', '\x2', 
		'\x2', '\x6AE', '\x6AC', '\x3', '\x2', '\x2', '\x2', '\x6AE', '\x6AF', 
		'\x3', '\x2', '\x2', '\x2', '\x6AF', '\x6B2', '\x3', '\x2', '\x2', '\x2', 
		'\x6B0', '\x6AE', '\x3', '\x2', '\x2', '\x2', '\x6B1', '\x6A7', '\x3', 
		'\x2', '\x2', '\x2', '\x6B1', '\x6B2', '\x3', '\x2', '\x2', '\x2', '\x6B2', 
		'\x6B4', '\x3', '\x2', '\x2', '\x2', '\x6B3', '\x6B5', '\x5', '\x80', 
		'\x41', '\x2', '\x6B4', '\x6B3', '\x3', '\x2', '\x2', '\x2', '\x6B4', 
		'\x6B5', '\x3', '\x2', '\x2', '\x2', '\x6B5', '\x6B6', '\x3', '\x2', '\x2', 
		'\x2', '\x6B6', '\x6B7', '\a', '\x5', '\x2', '\x2', '\x6B7', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x6B8', '\x6B9', '\a', '\x92', '\x2', '\x2', '\x6B9', 
		'\x6C9', '\x5', '\x82', '\x42', '\x2', '\x6BA', '\x6BB', '\a', '\xA4', 
		'\x2', '\x2', '\x6BB', '\x6C9', '\x5', '\x82', '\x42', '\x2', '\x6BC', 
		'\x6BD', '\a', '\x92', '\x2', '\x2', '\x6BD', '\x6BE', '\a', '\x18', '\x2', 
		'\x2', '\x6BE', '\x6BF', '\x5', '\x82', '\x42', '\x2', '\x6BF', '\x6C0', 
		'\a', '\x11', '\x2', '\x2', '\x6C0', '\x6C1', '\x5', '\x82', '\x42', '\x2', 
		'\x6C1', '\x6C9', '\x3', '\x2', '\x2', '\x2', '\x6C2', '\x6C3', '\a', 
		'\xA4', '\x2', '\x2', '\x6C3', '\x6C4', '\a', '\x18', '\x2', '\x2', '\x6C4', 
		'\x6C5', '\x5', '\x82', '\x42', '\x2', '\x6C5', '\x6C6', '\a', '\x11', 
		'\x2', '\x2', '\x6C6', '\x6C7', '\x5', '\x82', '\x42', '\x2', '\x6C7', 
		'\x6C9', '\x3', '\x2', '\x2', '\x2', '\x6C8', '\x6B8', '\x3', '\x2', '\x2', 
		'\x2', '\x6C8', '\x6BA', '\x3', '\x2', '\x2', '\x2', '\x6C8', '\x6BC', 
		'\x3', '\x2', '\x2', '\x2', '\x6C8', '\x6C2', '\x3', '\x2', '\x2', '\x2', 
		'\x6C9', '\x81', '\x3', '\x2', '\x2', '\x2', '\x6CA', '\x6CB', '\a', '\xC3', 
		'\x2', '\x2', '\x6CB', '\x6D4', '\a', '\x8E', '\x2', '\x2', '\x6CC', '\x6CD', 
		'\a', '\xC3', '\x2', '\x2', '\x6CD', '\x6D4', '\a', 'H', '\x2', '\x2', 
		'\x6CE', '\x6CF', '\a', ')', '\x2', '\x2', '\x6CF', '\x6D4', '\a', '\xA3', 
		'\x2', '\x2', '\x6D0', '\x6D1', '\x5', 'V', ',', '\x2', '\x6D1', '\x6D2', 
		'\t', '\x13', '\x2', '\x2', '\x6D2', '\x6D4', '\x3', '\x2', '\x2', '\x2', 
		'\x6D3', '\x6CA', '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x6CC', '\x3', 
		'\x2', '\x2', '\x2', '\x6D3', '\x6CE', '\x3', '\x2', '\x2', '\x2', '\x6D3', 
		'\x6D0', '\x3', '\x2', '\x2', '\x2', '\x6D4', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x6D5', '\x6D6', '\a', 'J', '\x2', '\x2', '\x6D6', '\x6DA', '\t', 
		'\x14', '\x2', '\x2', '\x6D7', '\x6D8', '\a', '\xC1', '\x2', '\x2', '\x6D8', 
		'\x6DA', '\t', '\x15', '\x2', '\x2', '\x6D9', '\x6D5', '\x3', '\x2', '\x2', 
		'\x2', '\x6D9', '\x6D7', '\x3', '\x2', '\x2', '\x2', '\x6DA', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x6DB', '\x6DC', '\a', '\x64', '\x2', '\x2', 
		'\x6DC', '\x6DD', '\a', 'k', '\x2', '\x2', '\x6DD', '\x6E1', '\x5', '\x88', 
		'\x45', '\x2', '\x6DE', '\x6DF', '\a', '\x93', '\x2', '\x2', '\x6DF', 
		'\x6E1', '\t', '\x16', '\x2', '\x2', '\x6E0', '\x6DB', '\x3', '\x2', '\x2', 
		'\x2', '\x6E0', '\x6DE', '\x3', '\x2', '\x2', '\x2', '\x6E1', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x6E2', '\x6E3', '\a', '\x93', '\x2', '\x2', 
		'\x6E3', '\x6EA', '\a', '\xC4', '\x2', '\x2', '\x6E4', '\x6E5', '\a', 
		'\x93', '\x2', '\x2', '\x6E5', '\x6EA', '\a', '$', '\x2', '\x2', '\x6E6', 
		'\x6E7', '\a', '\x96', '\x2', '\x2', '\x6E7', '\x6EA', '\a', '\x93', '\x2', 
		'\x2', '\x6E8', '\x6EA', '\a', '\xAA', '\x2', '\x2', '\x6E9', '\x6E2', 
		'\x3', '\x2', '\x2', '\x2', '\x6E9', '\x6E4', '\x3', '\x2', '\x2', '\x2', 
		'\x6E9', '\x6E6', '\x3', '\x2', '\x2', '\x2', '\x6E9', '\x6E8', '\x3', 
		'\x2', '\x2', '\x2', '\x6EA', '\x89', '\x3', '\x2', '\x2', '\x2', '\x6EB', 
		'\x6F1', '\x5', 'V', ',', '\x2', '\x6EC', '\x6ED', '\x5', '\x96', 'L', 
		'\x2', '\x6ED', '\x6EE', '\a', '\v', '\x2', '\x2', '\x6EE', '\x6EF', '\x5', 
		'V', ',', '\x2', '\x6EF', '\x6F1', '\x3', '\x2', '\x2', '\x2', '\x6F0', 
		'\x6EB', '\x3', '\x2', '\x2', '\x2', '\x6F0', '\x6EC', '\x3', '\x2', '\x2', 
		'\x2', '\x6F1', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x6F2', '\x6F7', 
		'\a', '\xA9', '\x2', '\x2', '\x6F3', '\x6F7', '\a', '\x34', '\x2', '\x2', 
		'\x6F4', '\x6F7', '\a', ']', '\x2', '\x2', '\x6F5', '\x6F7', '\x5', '\x96', 
		'L', '\x2', '\x6F6', '\x6F2', '\x3', '\x2', '\x2', '\x2', '\x6F6', '\x6F3', 
		'\x3', '\x2', '\x2', '\x2', '\x6F6', '\x6F4', '\x3', '\x2', '\x2', '\x2', 
		'\x6F6', '\x6F5', '\x3', '\x2', '\x2', '\x2', '\x6F7', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x6F8', '\x6FD', '\x5', '\x96', 'L', '\x2', '\x6F9', 
		'\x6FA', '\a', '\x3', '\x2', '\x2', '\x6FA', '\x6FC', '\x5', '\x96', 'L', 
		'\x2', '\x6FB', '\x6F9', '\x3', '\x2', '\x2', '\x2', '\x6FC', '\x6FF', 
		'\x3', '\x2', '\x2', '\x2', '\x6FD', '\x6FB', '\x3', '\x2', '\x2', '\x2', 
		'\x6FD', '\x6FE', '\x3', '\x2', '\x2', '\x2', '\x6FE', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x6FF', '\x6FD', '\x3', '\x2', '\x2', '\x2', '\x700', 
		'\x704', '\a', '.', '\x2', '\x2', '\x701', '\x704', '\a', '+', '\x2', 
		'\x2', '\x702', '\x704', '\x5', '\x92', 'J', '\x2', '\x703', '\x700', 
		'\x3', '\x2', '\x2', '\x2', '\x703', '\x701', '\x3', '\x2', '\x2', '\x2', 
		'\x703', '\x702', '\x3', '\x2', '\x2', '\x2', '\x704', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x705', '\x706', '\a', '\xC8', '\x2', '\x2', '\x706', 
		'\x70B', '\x5', '\x96', 'L', '\x2', '\x707', '\x708', '\a', '\x9F', '\x2', 
		'\x2', '\x708', '\x70B', '\x5', '\x96', 'L', '\x2', '\x709', '\x70B', 
		'\x5', '\x96', 'L', '\x2', '\x70A', '\x705', '\x3', '\x2', '\x2', '\x2', 
		'\x70A', '\x707', '\x3', '\x2', '\x2', '\x2', '\x70A', '\x709', '\x3', 
		'\x2', '\x2', '\x2', '\x70B', '\x93', '\x3', '\x2', '\x2', '\x2', '\x70C', 
		'\x711', '\x5', '\x96', 'L', '\x2', '\x70D', '\x70E', '\a', '\x6', '\x2', 
		'\x2', '\x70E', '\x710', '\x5', '\x96', 'L', '\x2', '\x70F', '\x70D', 
		'\x3', '\x2', '\x2', '\x2', '\x710', '\x713', '\x3', '\x2', '\x2', '\x2', 
		'\x711', '\x70F', '\x3', '\x2', '\x2', '\x2', '\x711', '\x712', '\x3', 
		'\x2', '\x2', '\x2', '\x712', '\x95', '\x3', '\x2', '\x2', '\x2', '\x713', 
		'\x711', '\x3', '\x2', '\x2', '\x2', '\x714', '\x71A', '\a', '\xE7', '\x2', 
		'\x2', '\x715', '\x71A', '\a', '\xE9', '\x2', '\x2', '\x716', '\x71A', 
		'\x5', '\x9A', 'N', '\x2', '\x717', '\x71A', '\a', '\xEA', '\x2', '\x2', 
		'\x718', '\x71A', '\a', '\xE8', '\x2', '\x2', '\x719', '\x714', '\x3', 
		'\x2', '\x2', '\x2', '\x719', '\x715', '\x3', '\x2', '\x2', '\x2', '\x719', 
		'\x716', '\x3', '\x2', '\x2', '\x2', '\x719', '\x717', '\x3', '\x2', '\x2', 
		'\x2', '\x719', '\x718', '\x3', '\x2', '\x2', '\x2', '\x71A', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x71B', '\x71F', '\a', '\xE5', '\x2', '\x2', 
		'\x71C', '\x71F', '\a', '\xE6', '\x2', '\x2', '\x71D', '\x71F', '\a', 
		'\xE4', '\x2', '\x2', '\x71E', '\x71B', '\x3', '\x2', '\x2', '\x2', '\x71E', 
		'\x71C', '\x3', '\x2', '\x2', '\x2', '\x71E', '\x71D', '\x3', '\x2', '\x2', 
		'\x2', '\x71F', '\x99', '\x3', '\x2', '\x2', '\x2', '\x720', '\x721', 
		'\t', '\x17', '\x2', '\x2', '\x721', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\xB2', '\xB7', '\xBD', '\xC1', '\xCF', '\xD3', '\xD7', '\xDB', 
		'\xE3', '\xE7', '\xEA', '\xF1', '\xFA', '\x100', '\x104', '\x10A', '\x111', 
		'\x11A', '\x120', '\x12B', '\x132', '\x13C', '\x143', '\x14B', '\x153', 
		'\x15B', '\x160', '\x166', '\x16F', '\x178', '\x17D', '\x181', '\x189', 
		'\x190', '\x196', '\x199', '\x1A3', '\x1A6', '\x1AD', '\x1B6', '\x1BC', 
		'\x1C1', '\x1C5', '\x1CF', '\x1D2', '\x1DC', '\x1E9', '\x1EF', '\x1F4', 
		'\x1FA', '\x203', '\x209', '\x210', '\x218', '\x21D', '\x221', '\x229', 
		'\x22F', '\x236', '\x23B', '\x23F', '\x249', '\x24C', '\x250', '\x253', 
		'\x25B', '\x260', '\x275', '\x27B', '\x281', '\x283', '\x289', '\x28F', 
		'\x291', '\x297', '\x2AA', '\x2AF', '\x2B6', '\x2C2', '\x2C4', '\x2D8', 
		'\x2DB', '\x2DF', '\x2E3', '\x2F5', '\x2F8', '\x300', '\x303', '\x309', 
		'\x310', '\x315', '\x31B', '\x31F', '\x323', '\x329', '\x331', '\x340', 
		'\x347', '\x34C', '\x353', '\x35B', '\x35F', '\x364', '\x36F', '\x37B', 
		'\x37E', '\x382', '\x38A', '\x390', '\x393', '\x395', '\x3A1', '\x3A8', 
		'\x3AC', '\x3B0', '\x3B4', '\x3BB', '\x3C4', '\x3C7', '\x3CB', '\x3D0', 
		'\x3D4', '\x3D7', '\x3DE', '\x3E9', '\x3EC', '\x3F6', '\x3F9', '\x404', 
		'\x409', '\x411', '\x414', '\x418', '\x41C', '\x427', '\x42A', '\x431', 
		'\x444', '\x448', '\x44C', '\x450', '\x454', '\x458', '\x45A', '\x465', 
		'\x46A', '\x473', '\x479', '\x47D', '\x47F', '\x487', '\x498', '\x49E', 
		'\x4A9', '\x4B0', '\x4B4', '\x4BC', '\x4BE', '\x4CB', '\x4D3', '\x4DC', 
		'\x4E2', '\x4EA', '\x4F0', '\x4F4', '\x4F9', '\x4FE', '\x504', '\x512', 
		'\x514', '\x531', '\x53C', '\x546', '\x549', '\x54E', '\x555', '\x558', 
		'\x561', '\x564', '\x568', '\x56B', '\x56E', '\x57A', '\x57D', '\x590', 
		'\x594', '\x59C', '\x5A0', '\x5B9', '\x5BC', '\x5C5', '\x5CB', '\x5D1', 
		'\x5D7', '\x5E1', '\x5EA', '\x600', '\x603', '\x606', '\x610', '\x612', 
		'\x619', '\x61B', '\x621', '\x629', '\x633', '\x639', '\x645', '\x648', 
		'\x663', '\x66F', '\x674', '\x67B', '\x681', '\x686', '\x68C', '\x6A2', 
		'\x6A5', '\x6AE', '\x6B1', '\x6B4', '\x6C8', '\x6D3', '\x6D9', '\x6E0', 
		'\x6E9', '\x6F0', '\x6F6', '\x6FD', '\x703', '\x70A', '\x711', '\x719', 
		'\x71E',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
